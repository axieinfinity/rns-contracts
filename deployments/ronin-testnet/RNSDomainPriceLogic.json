{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int32",
          "name": "expo1",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "expo2",
          "type": "int32"
        },
        {
          "internalType": "int64",
          "name": "price1",
          "type": "int64"
        }
      ],
      "name": "ErrComputedPriceTooLarge",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int32",
          "name": "expo",
          "type": "int32"
        }
      ],
      "name": "ErrExponentTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedAuctionDomainExpiry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "PeriodNumOverflowedUint16",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RenewalFeeIsNotOverriden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "ratio",
          "type": "uint192"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "period",
          "type": "uint64"
        }
      ],
      "name": "DomainPriceScaleRuleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "labelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "setType",
          "type": "uint256"
        }
      ],
      "name": "DomainPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maxLength",
          "type": "uint256"
        }
      ],
      "name": "MaxRenewalFeeLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPyth",
          "name": "pyth",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAcceptableAge",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pythIdForRONUSD",
          "type": "bytes32"
        }
      ],
      "name": "PythOracleConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "labelLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "renewalFee",
          "type": "uint256"
        }
      ],
      "name": "RenewalFeeByLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "labelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inverseRenewalFee",
          "type": "uint256"
        }
      ],
      "name": "RenewalFeeOverridingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "TaxRatioUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OVERRIDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "lbHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "usdPrices",
          "type": "uint256[]"
        }
      ],
      "name": "bulkOverrideRenewalFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "lbHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ronPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "setTypes",
          "type": "uint256[]"
        }
      ],
      "name": "bulkSetDomainPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "lbHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ronPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "setTypes",
          "type": "uint256[]"
        }
      ],
      "name": "bulkTrySetDomainPrice",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "updated",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ronWei",
          "type": "uint256"
        }
      ],
      "name": "convertRONToUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdWei",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdWei",
          "type": "uint256"
        }
      ],
      "name": "convertUSDToRON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ronWei",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "getDomainPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ronPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "getOverriddenRenewalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPythOracleConfig",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "pyth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAcceptableAge",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "pythIdForRONUSD",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "getRenewalFee",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "usd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ron",
              "type": "uint256"
            }
          ],
          "internalType": "struct INSDomainPrice.UnitPrice",
          "name": "basePrice",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "usd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ron",
              "type": "uint256"
            }
          ],
          "internalType": "struct INSDomainPrice.UnitPrice",
          "name": "tax",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRenewalFeeByLengths",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "labelLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct INSDomainPrice.RenewalFee[]",
          "name": "renewalFees",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getScaleDownRuleForDomainPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "ratio",
              "type": "uint192"
            },
            {
              "internalType": "uint64",
              "name": "period",
              "type": "uint64"
            }
          ],
          "internalType": "struct PeriodScaler",
          "name": "scaleRule",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTaxRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "labelLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct INSDomainPrice.RenewalFee[]",
          "name": "renewalFees",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "taxRatio",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "ratio",
              "type": "uint192"
            },
            {
              "internalType": "uint64",
              "name": "period",
              "type": "uint64"
            }
          ],
          "internalType": "struct PeriodScaler",
          "name": "domainPriceScaleRule",
          "type": "tuple"
        },
        {
          "internalType": "contract IPyth",
          "name": "pyth",
          "type": "address"
        },
        {
          "internalType": "contract INSAuction",
          "name": "auction",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAcceptableAge",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "pythIdForRONUSD",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPyth",
          "name": "pyth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAcceptableAge",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "pythIdForRONUSD",
          "type": "bytes32"
        }
      ],
      "name": "setPythOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "labelLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct INSDomainPrice.RenewalFee[]",
          "name": "renewalFees",
          "type": "tuple[]"
        }
      ],
      "name": "setRenewalFeeByLengths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "ratio",
              "type": "uint192"
            },
            {
              "internalType": "uint64",
              "name": "period",
              "type": "uint64"
            }
          ],
          "internalType": "struct PeriodScaler",
          "name": "scaleRule",
          "type": "tuple"
        }
      ],
      "name": "setScaleDownRuleForDomainPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "setTaxRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "address": "0x79Abf4410D7c76d2b38F75eaE7bD6Fc6099797Ac",
  "args": "0x",
  "ast": {
    "absolutePath": "src/RNSDomainPrice.sol",
    "id": 61317,
    "exportedSymbols": {
      "AccessControlEnumerable": [
        48967
      ],
      "INSAuction": [
        64912
      ],
      "INSDomainPrice": [
        65182
      ],
      "INSUnified": [
        65555
      ],
      "IPyth": [
        54836
      ],
      "Initializable": [
        50240
      ],
      "LibPeriodScaler": [
        67268
      ],
      "LibRNSDomain": [
        66622
      ],
      "LibSafeRange": [
        67166
      ],
      "LibString": [
        66904
      ],
      "Math": [
        53549
      ],
      "PeriodScaler": [
        67177
      ],
      "PythConverter": [
        67957
      ],
      "PythStructs": [
        54879
      ],
      "RNSDomainPrice": [
        61316
      ],
      "TimestampWrapper": [
        67100
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:13153:90",
    "nodes": [
      {
        "id": 60144,
        "nodeType": "PragmaDirective",
        "src": "32:24:90",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 60146,
        "nodeType": "ImportDirective",
        "src": "58:86:90",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 50241,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60145,
              "name": "Initializable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 50240,
              "src": "67:13:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60148,
        "nodeType": "ImportDirective",
        "src": "145:101:90",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol",
        "file": "@openzeppelin/contracts/access/AccessControlEnumerable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 48968,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60147,
              "name": "AccessControlEnumerable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 48967,
              "src": "154:23:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60150,
        "nodeType": "ImportDirective",
        "src": "247:67:90",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "file": "@openzeppelin/contracts/utils/math/Math.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 53550,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60149,
              "name": "Math",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53549,
              "src": "256:4:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60153,
        "nodeType": "ImportDirective",
        "src": "315:60:90",
        "nodes": [],
        "absolutePath": "lib/pyth-sdk-solidity/IPyth.sol",
        "file": "@pythnetwork/IPyth.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 54837,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60151,
              "name": "IPyth",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 54836,
              "src": "324:5:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 60152,
              "name": "PythStructs",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 54879,
              "src": "331:11:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60155,
        "nodeType": "ImportDirective",
        "src": "376:57:90",
        "nodes": [],
        "absolutePath": "src/interfaces/INSUnified.sol",
        "file": "./interfaces/INSUnified.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 65556,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60154,
              "name": "INSUnified",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 65555,
              "src": "385:10:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60157,
        "nodeType": "ImportDirective",
        "src": "434:57:90",
        "nodes": [],
        "absolutePath": "src/interfaces/INSAuction.sol",
        "file": "./interfaces/INSAuction.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 64913,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60156,
              "name": "INSAuction",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 64912,
              "src": "443:10:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60159,
        "nodeType": "ImportDirective",
        "src": "492:65:90",
        "nodes": [],
        "absolutePath": "src/interfaces/INSDomainPrice.sol",
        "file": "./interfaces/INSDomainPrice.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 65183,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60158,
              "name": "INSDomainPrice",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 65182,
              "src": "501:14:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60163,
        "nodeType": "ImportDirective",
        "src": "558:94:90",
        "nodes": [],
        "absolutePath": "src/libraries/math/PeriodScalingUtils.sol",
        "file": "./libraries/math/PeriodScalingUtils.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 67269,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60160,
              "name": "PeriodScaler",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 67177,
              "src": "567:12:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 60161,
              "name": "LibPeriodScaler",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 67268,
              "src": "581:15:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 60162,
              "name": "Math",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53549,
              "src": "598:4:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60165,
        "nodeType": "ImportDirective",
        "src": "653:73:90",
        "nodes": [],
        "absolutePath": "src/libraries/TimestampWrapperUtils.sol",
        "file": "./libraries/TimestampWrapperUtils.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 67101,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60164,
              "name": "TimestampWrapper",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 67100,
              "src": "662:16:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60167,
        "nodeType": "ImportDirective",
        "src": "727:65:90",
        "nodes": [],
        "absolutePath": "src/libraries/math/LibSafeRange.sol",
        "file": "./libraries/math/LibSafeRange.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 67167,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60166,
              "name": "LibSafeRange",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 67166,
              "src": "736:12:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60169,
        "nodeType": "ImportDirective",
        "src": "793:54:90",
        "nodes": [],
        "absolutePath": "src/libraries/LibString.sol",
        "file": "./libraries/LibString.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 66905,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60168,
              "name": "LibString",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 66904,
              "src": "802:9:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60171,
        "nodeType": "ImportDirective",
        "src": "848:60:90",
        "nodes": [],
        "absolutePath": "src/libraries/LibRNSDomain.sol",
        "file": "./libraries/LibRNSDomain.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 66623,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60170,
              "name": "LibRNSDomain",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 66622,
              "src": "857:12:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60173,
        "nodeType": "ImportDirective",
        "src": "909:67:90",
        "nodes": [],
        "absolutePath": "src/libraries/pyth/PythConverter.sol",
        "file": "./libraries/pyth/PythConverter.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61317,
        "sourceUnit": 67958,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60172,
              "name": "PythConverter",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 67957,
              "src": "918:13:90",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61316,
        "nodeType": "ContractDefinition",
        "src": "978:12206:90",
        "nodes": [
          {
            "id": 60181,
            "nodeType": "UsingForDirective",
            "src": "1064:22:90",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 60180,
              "name": "LibString",
              "nameLocations": [
                "1070:9:90"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66904,
              "src": "1070:9:90"
            }
          },
          {
            "id": 60184,
            "nodeType": "UsingForDirective",
            "src": "1089:30:90",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 60182,
              "name": "LibRNSDomain",
              "nameLocations": [
                "1095:12:90"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66622,
              "src": "1095:12:90"
            },
            "typeName": {
              "id": 60183,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1112:6:90",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            }
          },
          {
            "id": 60188,
            "nodeType": "UsingForDirective",
            "src": "1122:39:90",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 60185,
              "name": "LibPeriodScaler",
              "nameLocations": [
                "1128:15:90"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 67268,
              "src": "1128:15:90"
            },
            "typeName": {
              "id": 60187,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 60186,
                "name": "PeriodScaler",
                "nameLocations": [
                  "1148:12:90"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 67177,
                "src": "1148:12:90"
              },
              "referencedDeclaration": 67177,
              "src": "1148:12:90",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage_ptr",
                "typeString": "struct PeriodScaler"
              }
            }
          },
          {
            "id": 60192,
            "nodeType": "UsingForDirective",
            "src": "1164:42:90",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 60189,
              "name": "PythConverter",
              "nameLocations": [
                "1170:13:90"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 67957,
              "src": "1170:13:90"
            },
            "typeName": {
              "id": 60191,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 60190,
                "name": "PythStructs.Price",
                "nameLocations": [
                  "1188:11:90",
                  "1200:5:90"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 54869,
                "src": "1188:17:90"
              },
              "referencedDeclaration": 54869,
              "src": "1188:17:90",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Price_$54869_storage_ptr",
                "typeString": "struct PythStructs.Price"
              }
            }
          },
          {
            "id": 60196,
            "nodeType": "VariableDeclaration",
            "src": "1243:39:90",
            "nodes": [],
            "baseFunctions": [
              65181
            ],
            "constant": true,
            "documentation": {
              "id": 60193,
              "nodeType": "StructuredDocumentation",
              "src": "1210:30:90",
              "text": "@inheritdoc INSDomainPrice"
            },
            "functionSelector": "2f6ee695",
            "mutability": "constant",
            "name": "USD_DECIMALS",
            "nameLocation": "1265:12:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 60194,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "1243:5:90",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "hexValue": "3138",
              "id": 60195,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1280:2:90",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "public"
          },
          {
            "id": 60200,
            "nodeType": "VariableDeclaration",
            "src": "1319:46:90",
            "nodes": [],
            "baseFunctions": [
              65175
            ],
            "constant": true,
            "documentation": {
              "id": 60197,
              "nodeType": "StructuredDocumentation",
              "src": "1286:30:90",
              "text": "@inheritdoc INSDomainPrice"
            },
            "functionSelector": "4c255c97",
            "mutability": "constant",
            "name": "MAX_PERCENTAGE",
            "nameLocation": "1342:14:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint64",
              "typeString": "uint64"
            },
            "typeName": {
              "id": 60198,
              "name": "uint64",
              "nodeType": "ElementaryTypeName",
              "src": "1319:6:90",
              "typeDescriptions": {
                "typeIdentifier": "t_uint64",
                "typeString": "uint64"
              }
            },
            "value": {
              "hexValue": "3130305f3030",
              "id": 60199,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1359:6:90",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "100_00"
            },
            "visibility": "public"
          },
          {
            "id": 60206,
            "nodeType": "VariableDeclaration",
            "src": "1402:66:90",
            "nodes": [],
            "baseFunctions": [
              65163
            ],
            "constant": true,
            "documentation": {
              "id": 60201,
              "nodeType": "StructuredDocumentation",
              "src": "1369:30:90",
              "text": "@inheritdoc INSDomainPrice"
            },
            "functionSelector": "f5b541a6",
            "mutability": "constant",
            "name": "OPERATOR_ROLE",
            "nameLocation": "1426:13:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 60202,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1402:7:90",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "4f50455241544f525f524f4c45",
                  "id": 60204,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1452:15:90",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
                    "typeString": "literal_string \"OPERATOR_ROLE\""
                  },
                  "value": "OPERATOR_ROLE"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
                    "typeString": "literal_string \"OPERATOR_ROLE\""
                  }
                ],
                "id": 60203,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "1442:9:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 60205,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1442:26:90",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 60212,
            "nodeType": "VariableDeclaration",
            "src": "1505:68:90",
            "nodes": [],
            "baseFunctions": [
              65169
            ],
            "constant": true,
            "documentation": {
              "id": 60207,
              "nodeType": "StructuredDocumentation",
              "src": "1472:30:90",
              "text": "@inheritdoc INSDomainPrice"
            },
            "functionSelector": "700213c8",
            "mutability": "constant",
            "name": "OVERRIDER_ROLE",
            "nameLocation": "1529:14:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 60208,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1505:7:90",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "4f56455252494445525f524f4c45",
                  "id": 60210,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1556:16:90",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad",
                    "typeString": "literal_string \"OVERRIDER_ROLE\""
                  },
                  "value": "OVERRIDER_ROLE"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad",
                    "typeString": "literal_string \"OVERRIDER_ROLE\""
                  }
                ],
                "id": 60209,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "1546:9:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 60211,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1546:27:90",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 60217,
            "nodeType": "VariableDeclaration",
            "src": "1613:27:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60213,
              "nodeType": "StructuredDocumentation",
              "src": "1578:32:90",
              "text": "@dev Gap for upgradeability."
            },
            "mutability": "mutable",
            "name": "____gap",
            "nameLocation": "1633:7:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 60214,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1613:7:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 60216,
              "length": {
                "hexValue": "3530",
                "id": 60215,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1621:2:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1613:11:90",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          },
          {
            "id": 60221,
            "nodeType": "VariableDeclaration",
            "src": "1677:20:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60218,
              "nodeType": "StructuredDocumentation",
              "src": "1645:29:90",
              "text": "@dev Pyth oracle contract"
            },
            "mutability": "mutable",
            "name": "_pyth",
            "nameLocation": "1692:5:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IPyth_$54836",
              "typeString": "contract IPyth"
            },
            "typeName": {
              "id": 60220,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 60219,
                "name": "IPyth",
                "nameLocations": [
                  "1677:5:90"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 54836,
                "src": "1677:5:90"
              },
              "referencedDeclaration": 54836,
              "src": "1677:5:90",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IPyth_$54836",
                "typeString": "contract IPyth"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60225,
            "nodeType": "VariableDeclaration",
            "src": "1732:28:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60222,
              "nodeType": "StructuredDocumentation",
              "src": "1701:28:90",
              "text": "@dev RNSAuction contract"
            },
            "mutability": "mutable",
            "name": "_auction",
            "nameLocation": "1752:8:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_INSAuction_$64912",
              "typeString": "contract INSAuction"
            },
            "typeName": {
              "id": 60224,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 60223,
                "name": "INSAuction",
                "nameLocations": [
                  "1732:10:90"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 64912,
                "src": "1732:10:90"
              },
              "referencedDeclaration": 64912,
              "src": "1732:10:90",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_INSAuction_$64912",
                "typeString": "contract INSAuction"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60228,
            "nodeType": "VariableDeclaration",
            "src": "1833:26:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60226,
              "nodeType": "StructuredDocumentation",
              "src": "1764:66:90",
              "text": "@dev Extra fee for renewals based on the current domain price."
            },
            "mutability": "mutable",
            "name": "_taxRatio",
            "nameLocation": "1850:9:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 60227,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1833:7:90",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60231,
            "nodeType": "VariableDeclaration",
            "src": "1904:30:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60229,
              "nodeType": "StructuredDocumentation",
              "src": "1863:38:90",
              "text": "@dev Max length of the renewal fee"
            },
            "mutability": "mutable",
            "name": "_rnfMaxLength",
            "nameLocation": "1921:13:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 60230,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1904:7:90",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60234,
            "nodeType": "VariableDeclaration",
            "src": "1996:34:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60232,
              "nodeType": "StructuredDocumentation",
              "src": "1938:55:90",
              "text": "@dev Max acceptable age of the price oracle request"
            },
            "mutability": "mutable",
            "name": "_maxAcceptableAge",
            "nameLocation": "2013:17:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 60233,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1996:7:90",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60237,
            "nodeType": "VariableDeclaration",
            "src": "2079:33:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60235,
              "nodeType": "StructuredDocumentation",
              "src": "2034:42:90",
              "text": "@dev Price feed ID on Pyth for RON/USD"
            },
            "mutability": "mutable",
            "name": "_pythIdForRONUSD",
            "nameLocation": "2096:16:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 60236,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2079:7:90",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60241,
            "nodeType": "VariableDeclaration",
            "src": "2178:35:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60238,
              "nodeType": "StructuredDocumentation",
              "src": "2116:59:90",
              "text": "@dev The percentage scale from domain price each period"
            },
            "mutability": "mutable",
            "name": "_dpDownScaler",
            "nameLocation": "2200:13:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage",
              "typeString": "struct PeriodScaler"
            },
            "typeName": {
              "id": 60240,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 60239,
                "name": "PeriodScaler",
                "nameLocations": [
                  "2178:12:90"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 67177,
                "src": "2178:12:90"
              },
              "referencedDeclaration": 67177,
              "src": "2178:12:90",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage_ptr",
                "typeString": "struct PeriodScaler"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60246,
            "nodeType": "VariableDeclaration",
            "src": "2278:59:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60242,
              "nodeType": "StructuredDocumentation",
              "src": "2218:57:90",
              "text": "@dev Mapping from domain length => renewal fee in USD"
            },
            "mutability": "mutable",
            "name": "_rnFee",
            "nameLocation": "2331:6:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 60245,
              "keyName": "length",
              "keyNameLocation": "2294:6:90",
              "keyType": {
                "id": 60243,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2286:7:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "2278:43:90",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueName": "usdPrice",
              "valueNameLocation": "2312:8:90",
              "valueType": {
                "id": 60244,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2304:7:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60252,
            "nodeType": "VariableDeclaration",
            "src": "2393:65:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60247,
              "nodeType": "StructuredDocumentation",
              "src": "2341:49:90",
              "text": "@dev Mapping from name => domain price in USD"
            },
            "mutability": "mutable",
            "name": "_dp",
            "nameLocation": "2455:3:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TimestampWrapper_$67100_storage_$",
              "typeString": "mapping(bytes32 => struct TimestampWrapper)"
            },
            "typeName": {
              "id": 60251,
              "keyName": "lbHash",
              "keyNameLocation": "2409:6:90",
              "keyType": {
                "id": 60248,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "2401:7:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "2393:52:90",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TimestampWrapper_$67100_storage_$",
                "typeString": "mapping(bytes32 => struct TimestampWrapper)"
              },
              "valueName": "usdPrice",
              "valueNameLocation": "2436:8:90",
              "valueType": {
                "id": 60250,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 60249,
                  "name": "TimestampWrapper",
                  "nameLocations": [
                    "2419:16:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 67100,
                  "src": "2419:16:90"
                },
                "referencedDeclaration": 67100,
                "src": "2419:16:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                  "typeString": "struct TimestampWrapper"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60257,
            "nodeType": "VariableDeclaration",
            "src": "2537:69:90",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 60253,
              "nodeType": "StructuredDocumentation",
              "src": "2462:72:90",
              "text": "@dev Mapping from name => inverse bitwise of renewal fee overriding."
            },
            "mutability": "mutable",
            "name": "_rnFeeOverriding",
            "nameLocation": "2590:16:90",
            "scope": 61316,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
              "typeString": "mapping(bytes32 => uint256)"
            },
            "typeName": {
              "id": 60256,
              "keyName": "lbHash",
              "keyNameLocation": "2553:6:90",
              "keyType": {
                "id": 60254,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "2545:7:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "2537:43:90",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                "typeString": "mapping(bytes32 => uint256)"
              },
              "valueName": "usdPrice",
              "valueNameLocation": "2571:8:90",
              "valueType": {
                "id": 60255,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2563:7:90",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 60264,
            "nodeType": "FunctionDefinition",
            "src": "2611:55:90",
            "nodes": [],
            "body": {
              "id": 60263,
              "nodeType": "Block",
              "src": "2633:33:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 60260,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50221,
                      "src": "2639:20:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 60261,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2639:22:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60262,
                  "nodeType": "ExpressionStatement",
                  "src": "2639:22:90"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 60258,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2622:2:90"
            },
            "returnParameters": {
              "id": 60259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2633:0:90"
            },
            "scope": 61316,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 60349,
            "nodeType": "FunctionDefinition",
            "src": "2670:776:90",
            "nodes": [],
            "body": {
              "id": 60348,
              "nodeType": "Block",
              "src": "2976:470:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    60294
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60294,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "2990:6:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60348,
                      "src": "2982:14:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60293,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2982:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60297,
                  "initialValue": {
                    "expression": {
                      "id": 60295,
                      "name": "operators",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60269,
                      "src": "2999:9:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                        "typeString": "address[] calldata"
                      }
                    },
                    "id": 60296,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "3009:6:90",
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "2999:16:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2982:33:90"
                },
                {
                  "assignments": [
                    60299
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60299,
                      "mutability": "mutable",
                      "name": "operatorRole",
                      "nameLocation": "3029:12:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60348,
                      "src": "3021:20:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 60298,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3021:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60301,
                  "initialValue": {
                    "id": 60300,
                    "name": "OPERATOR_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60206,
                    "src": "3044:13:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3021:36:90"
                },
                {
                  "body": {
                    "id": 60319,
                    "nodeType": "Block",
                    "src": "3093:93:90",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 60309,
                              "name": "operatorRole",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60299,
                              "src": "3112:12:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60310,
                                "name": "operators",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60269,
                                "src": "3126:9:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                  "typeString": "address[] calldata"
                                }
                              },
                              "id": 60312,
                              "indexExpression": {
                                "id": 60311,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60303,
                                "src": "3136:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3126:12:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 60308,
                            "name": "_setupRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48750,
                            "src": "3101:10:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                              "typeString": "function (bytes32,address)"
                            }
                          },
                          "id": 60313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3101:38:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 60314,
                        "nodeType": "ExpressionStatement",
                        "src": "3101:38:90"
                      },
                      {
                        "id": 60318,
                        "nodeType": "UncheckedBlock",
                        "src": "3148:32:90",
                        "statements": [
                          {
                            "expression": {
                              "id": 60316,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "3168:3:90",
                              "subExpression": {
                                "id": 60315,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60303,
                                "src": "3170:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60317,
                            "nodeType": "ExpressionStatement",
                            "src": "3168:3:90"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60307,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60305,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60303,
                      "src": "3080:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 60306,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60294,
                      "src": "3084:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3080:10:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60320,
                  "initializationExpression": {
                    "assignments": [
                      60303
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 60303,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3077:1:90",
                        "nodeType": "VariableDeclaration",
                        "scope": 60320,
                        "src": "3069:9:90",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 60302,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3069:7:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 60304,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3069:9:90"
                  },
                  "nodeType": "ForStatement",
                  "src": "3064:122:90"
                },
                {
                  "expression": {
                    "id": 60323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60321,
                      "name": "_auction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60225,
                      "src": "3191:8:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSAuction_$64912",
                        "typeString": "contract INSAuction"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 60322,
                      "name": "auction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60284,
                      "src": "3202:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSAuction_$64912",
                        "typeString": "contract INSAuction"
                      }
                    },
                    "src": "3191:18:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSAuction_$64912",
                      "typeString": "contract INSAuction"
                    }
                  },
                  "id": 60324,
                  "nodeType": "ExpressionStatement",
                  "src": "3191:18:90"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60326,
                        "name": "DEFAULT_ADMIN_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48554,
                        "src": "3226:18:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 60327,
                        "name": "admin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60266,
                        "src": "3246:5:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 60325,
                      "name": "_setupRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48750,
                      "src": "3215:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 60328,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3215:37:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60329,
                  "nodeType": "ExpressionStatement",
                  "src": "3215:37:90"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60331,
                        "name": "renewalFees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60273,
                        "src": "3282:11:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct INSDomainPrice.RenewalFee calldata[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct INSDomainPrice.RenewalFee calldata[] calldata"
                        }
                      ],
                      "id": 60330,
                      "name": "_setRenewalFeeByLengths",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61241,
                      "src": "3258:23:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr_$returns$__$",
                        "typeString": "function (struct INSDomainPrice.RenewalFee calldata[] calldata)"
                      }
                    },
                    "id": 60332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3258:36:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60333,
                  "nodeType": "ExpressionStatement",
                  "src": "3258:36:90"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60335,
                        "name": "taxRatio",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60275,
                        "src": "3313:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 60334,
                      "name": "_setTaxRatio",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61136,
                      "src": "3300:12:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 60336,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3300:22:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60337,
                  "nodeType": "ExpressionStatement",
                  "src": "3300:22:90"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60339,
                        "name": "domainPriceScaleRule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60278,
                        "src": "3353:20:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                          "typeString": "struct PeriodScaler calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                          "typeString": "struct PeriodScaler calldata"
                        }
                      ],
                      "id": 60338,
                      "name": "_setDomainPriceScaleRule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61157,
                      "src": "3328:24:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PeriodScaler_$67177_calldata_ptr_$returns$__$",
                        "typeString": "function (struct PeriodScaler calldata)"
                      }
                    },
                    "id": 60340,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3328:46:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60341,
                  "nodeType": "ExpressionStatement",
                  "src": "3328:46:90"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60343,
                        "name": "pyth",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60281,
                        "src": "3401:4:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPyth_$54836",
                          "typeString": "contract IPyth"
                        }
                      },
                      {
                        "id": 60344,
                        "name": "maxAcceptableAge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60286,
                        "src": "3407:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 60345,
                        "name": "pythIdForRONUSD",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60288,
                        "src": "3425:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IPyth_$54836",
                          "typeString": "contract IPyth"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 60342,
                      "name": "_setPythOracleConfig",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61273,
                      "src": "3380:20:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IPyth_$54836_$_t_uint256_$_t_bytes32_$returns$__$",
                        "typeString": "function (contract IPyth,uint256,bytes32)"
                      }
                    },
                    "id": 60346,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3380:61:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60347,
                  "nodeType": "ExpressionStatement",
                  "src": "3380:61:90"
                }
              ]
            },
            "functionSelector": "d40ed58c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 60291,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60290,
                  "name": "initializer",
                  "nameLocations": [
                    "2964:11:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 50142,
                  "src": "2964:11:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "2964:11:90"
              }
            ],
            "name": "initialize",
            "nameLocation": "2679:10:90",
            "parameters": {
              "id": 60289,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60266,
                  "mutability": "mutable",
                  "name": "admin",
                  "nameLocation": "2703:5:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2695:13:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 60265,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2695:7:90",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60269,
                  "mutability": "mutable",
                  "name": "operators",
                  "nameLocation": "2733:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2714:28:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60267,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2714:7:90",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 60268,
                    "nodeType": "ArrayTypeName",
                    "src": "2714:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60273,
                  "mutability": "mutable",
                  "name": "renewalFees",
                  "nameLocation": "2770:11:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2748:33:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct INSDomainPrice.RenewalFee[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60271,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 60270,
                        "name": "RenewalFee",
                        "nameLocations": [
                          "2748:10:90"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 64929,
                        "src": "2748:10:90"
                      },
                      "referencedDeclaration": 64929,
                      "src": "2748:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_RenewalFee_$64929_storage_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee"
                      }
                    },
                    "id": 60272,
                    "nodeType": "ArrayTypeName",
                    "src": "2748:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_storage_$dyn_storage_ptr",
                      "typeString": "struct INSDomainPrice.RenewalFee[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60275,
                  "mutability": "mutable",
                  "name": "taxRatio",
                  "nameLocation": "2795:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2787:16:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60274,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2787:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60278,
                  "mutability": "mutable",
                  "name": "domainPriceScaleRule",
                  "nameLocation": "2831:20:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2809:42:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                    "typeString": "struct PeriodScaler"
                  },
                  "typeName": {
                    "id": 60277,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60276,
                      "name": "PeriodScaler",
                      "nameLocations": [
                        "2809:12:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67177,
                      "src": "2809:12:90"
                    },
                    "referencedDeclaration": 67177,
                    "src": "2809:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage_ptr",
                      "typeString": "struct PeriodScaler"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60281,
                  "mutability": "mutable",
                  "name": "pyth",
                  "nameLocation": "2863:4:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2857:10:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPyth_$54836",
                    "typeString": "contract IPyth"
                  },
                  "typeName": {
                    "id": 60280,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60279,
                      "name": "IPyth",
                      "nameLocations": [
                        "2857:5:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54836,
                      "src": "2857:5:90"
                    },
                    "referencedDeclaration": 54836,
                    "src": "2857:5:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPyth_$54836",
                      "typeString": "contract IPyth"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60284,
                  "mutability": "mutable",
                  "name": "auction",
                  "nameLocation": "2884:7:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2873:18:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_INSAuction_$64912",
                    "typeString": "contract INSAuction"
                  },
                  "typeName": {
                    "id": 60283,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60282,
                      "name": "INSAuction",
                      "nameLocations": [
                        "2873:10:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 64912,
                      "src": "2873:10:90"
                    },
                    "referencedDeclaration": 64912,
                    "src": "2873:10:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSAuction_$64912",
                      "typeString": "contract INSAuction"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60286,
                  "mutability": "mutable",
                  "name": "maxAcceptableAge",
                  "nameLocation": "2905:16:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2897:24:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60285,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2897:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60288,
                  "mutability": "mutable",
                  "name": "pythIdForRONUSD",
                  "nameLocation": "2935:15:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60349,
                  "src": "2927:23:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 60287,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2927:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2689:265:90"
            },
            "returnParameters": {
              "id": 60292,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2976:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60366,
            "nodeType": "FunctionDefinition",
            "src": "3494:179:90",
            "nodes": [],
            "body": {
              "id": 60365,
              "nodeType": "Block",
              "src": "3611:62:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 60360,
                        "name": "_pyth",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60221,
                        "src": "3625:5:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPyth_$54836",
                          "typeString": "contract IPyth"
                        }
                      },
                      {
                        "id": 60361,
                        "name": "_maxAcceptableAge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60234,
                        "src": "3632:17:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 60362,
                        "name": "_pythIdForRONUSD",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60237,
                        "src": "3651:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "id": 60363,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "3624:44:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_contract$_IPyth_$54836_$_t_uint256_$_t_bytes32_$",
                      "typeString": "tuple(contract IPyth,uint256,bytes32)"
                    }
                  },
                  "functionReturnParameters": 60359,
                  "id": 60364,
                  "nodeType": "Return",
                  "src": "3617:51:90"
                }
              ]
            },
            "baseFunctions": [
              65011
            ],
            "documentation": {
              "id": 60350,
              "nodeType": "StructuredDocumentation",
              "src": "3450:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "2be09ecc",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getPythOracleConfig",
            "nameLocation": "3503:19:90",
            "parameters": {
              "id": 60351,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3522:2:90"
            },
            "returnParameters": {
              "id": 60359,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60354,
                  "mutability": "mutable",
                  "name": "pyth",
                  "nameLocation": "3554:4:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60366,
                  "src": "3548:10:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPyth_$54836",
                    "typeString": "contract IPyth"
                  },
                  "typeName": {
                    "id": 60353,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60352,
                      "name": "IPyth",
                      "nameLocations": [
                        "3548:5:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54836,
                      "src": "3548:5:90"
                    },
                    "referencedDeclaration": 54836,
                    "src": "3548:5:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPyth_$54836",
                      "typeString": "contract IPyth"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60356,
                  "mutability": "mutable",
                  "name": "maxAcceptableAge",
                  "nameLocation": "3568:16:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60366,
                  "src": "3560:24:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60355,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3560:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60358,
                  "mutability": "mutable",
                  "name": "pythIdForRONUSD",
                  "nameLocation": "3594:15:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60366,
                  "src": "3586:23:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 60357,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3586:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3547:63:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60387,
            "nodeType": "FunctionDefinition",
            "src": "3721:212:90",
            "nodes": [],
            "body": {
              "id": 60386,
              "nodeType": "Block",
              "src": "3861:72:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60381,
                        "name": "pyth",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60370,
                        "src": "3888:4:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPyth_$54836",
                          "typeString": "contract IPyth"
                        }
                      },
                      {
                        "id": 60382,
                        "name": "maxAcceptableAge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60372,
                        "src": "3894:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 60383,
                        "name": "pythIdForRONUSD",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60374,
                        "src": "3912:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IPyth_$54836",
                          "typeString": "contract IPyth"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 60380,
                      "name": "_setPythOracleConfig",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61273,
                      "src": "3867:20:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IPyth_$54836_$_t_uint256_$_t_bytes32_$returns$__$",
                        "typeString": "function (contract IPyth,uint256,bytes32)"
                      }
                    },
                    "id": 60384,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3867:61:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60385,
                  "nodeType": "ExpressionStatement",
                  "src": "3867:61:90"
                }
              ]
            },
            "baseFunctions": [
              65022
            ],
            "documentation": {
              "id": 60367,
              "nodeType": "StructuredDocumentation",
              "src": "3677:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "28dd3065",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 60377,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48554,
                    "src": "3839:18:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 60378,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60376,
                  "name": "onlyRole",
                  "nameLocations": [
                    "3830:8:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48565,
                  "src": "3830:8:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "3830:28:90"
              }
            ],
            "name": "setPythOracleConfig",
            "nameLocation": "3730:19:90",
            "parameters": {
              "id": 60375,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60370,
                  "mutability": "mutable",
                  "name": "pyth",
                  "nameLocation": "3756:4:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60387,
                  "src": "3750:10:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPyth_$54836",
                    "typeString": "contract IPyth"
                  },
                  "typeName": {
                    "id": 60369,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60368,
                      "name": "IPyth",
                      "nameLocations": [
                        "3750:5:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54836,
                      "src": "3750:5:90"
                    },
                    "referencedDeclaration": 54836,
                    "src": "3750:5:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPyth_$54836",
                      "typeString": "contract IPyth"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60372,
                  "mutability": "mutable",
                  "name": "maxAcceptableAge",
                  "nameLocation": "3770:16:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60387,
                  "src": "3762:24:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60371,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3762:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60374,
                  "mutability": "mutable",
                  "name": "pythIdForRONUSD",
                  "nameLocation": "3796:15:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60387,
                  "src": "3788:23:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 60373,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3788:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3749:63:90"
            },
            "returnParameters": {
              "id": 60379,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3861:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60446,
            "nodeType": "FunctionDefinition",
            "src": "3981:396:90",
            "nodes": [],
            "body": {
              "id": 60445,
              "nodeType": "Block",
              "src": "4071:306:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    60396
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60396,
                      "mutability": "mutable",
                      "name": "rnfMaxLength",
                      "nameLocation": "4085:12:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60445,
                      "src": "4077:20:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60395,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4077:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60398,
                  "initialValue": {
                    "id": 60397,
                    "name": "_rnfMaxLength",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60231,
                    "src": "4100:13:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4077:36:90"
                },
                {
                  "expression": {
                    "id": 60406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60399,
                      "name": "renewalFees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60393,
                      "src": "4119:11:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee memory[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 60404,
                          "name": "rnfMaxLength",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60396,
                          "src": "4150:12:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 60403,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "4133:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_RenewalFee_$64929_memory_ptr_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (struct INSDomainPrice.RenewalFee memory[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 60401,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 60400,
                              "name": "RenewalFee",
                              "nameLocations": [
                                "4137:10:90"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 64929,
                              "src": "4137:10:90"
                            },
                            "referencedDeclaration": 64929,
                            "src": "4137:10:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RenewalFee_$64929_storage_ptr",
                              "typeString": "struct INSDomainPrice.RenewalFee"
                            }
                          },
                          "id": 60402,
                          "nodeType": "ArrayTypeName",
                          "src": "4137:12:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_storage_$dyn_storage_ptr",
                            "typeString": "struct INSDomainPrice.RenewalFee[]"
                          }
                        }
                      },
                      "id": 60405,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4133:30:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee memory[] memory"
                      }
                    },
                    "src": "4119:44:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct INSDomainPrice.RenewalFee memory[] memory"
                    }
                  },
                  "id": 60407,
                  "nodeType": "ExpressionStatement",
                  "src": "4119:44:90"
                },
                {
                  "assignments": [
                    60409
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60409,
                      "mutability": "mutable",
                      "name": "len",
                      "nameLocation": "4177:3:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60445,
                      "src": "4169:11:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60408,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4169:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60410,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4169:11:90"
                },
                {
                  "body": {
                    "id": 60443,
                    "nodeType": "Block",
                    "src": "4222:151:90",
                    "statements": [
                      {
                        "id": 60442,
                        "nodeType": "UncheckedBlock",
                        "src": "4230:137:90",
                        "statements": [
                          {
                            "expression": {
                              "id": 60421,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 60417,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60409,
                                "src": "4250:3:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 60420,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 60418,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60412,
                                  "src": "4256:1:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 60419,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4260:1:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "4256:5:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4250:11:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60422,
                            "nodeType": "ExpressionStatement",
                            "src": "4250:11:90"
                          },
                          {
                            "expression": {
                              "id": 60428,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 60423,
                                    "name": "renewalFees",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60393,
                                    "src": "4271:11:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "struct INSDomainPrice.RenewalFee memory[] memory"
                                    }
                                  },
                                  "id": 60425,
                                  "indexExpression": {
                                    "id": 60424,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60412,
                                    "src": "4283:1:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4271:14:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                                    "typeString": "struct INSDomainPrice.RenewalFee memory"
                                  }
                                },
                                "id": 60426,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "4286:11:90",
                                "memberName": "labelLength",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 64926,
                                "src": "4271:26:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "id": 60427,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60409,
                                "src": "4300:3:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4271:32:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60429,
                            "nodeType": "ExpressionStatement",
                            "src": "4271:32:90"
                          },
                          {
                            "expression": {
                              "id": 60437,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 60430,
                                    "name": "renewalFees",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60393,
                                    "src": "4313:11:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "struct INSDomainPrice.RenewalFee memory[] memory"
                                    }
                                  },
                                  "id": 60432,
                                  "indexExpression": {
                                    "id": 60431,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60412,
                                    "src": "4325:1:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4313:14:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                                    "typeString": "struct INSDomainPrice.RenewalFee memory"
                                  }
                                },
                                "id": 60433,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "4328:3:90",
                                "memberName": "fee",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 64928,
                                "src": "4313:18:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "baseExpression": {
                                  "id": 60434,
                                  "name": "_rnFee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60246,
                                  "src": "4334:6:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                    "typeString": "mapping(uint256 => uint256)"
                                  }
                                },
                                "id": 60436,
                                "indexExpression": {
                                  "id": 60435,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60409,
                                  "src": "4341:3:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4334:11:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4313:32:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60438,
                            "nodeType": "ExpressionStatement",
                            "src": "4313:32:90"
                          },
                          {
                            "expression": {
                              "id": 60440,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "4355:3:90",
                              "subExpression": {
                                "id": 60439,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60412,
                                "src": "4357:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60441,
                            "nodeType": "ExpressionStatement",
                            "src": "4355:3:90"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60416,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60414,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60412,
                      "src": "4203:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 60415,
                      "name": "rnfMaxLength",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60396,
                      "src": "4207:12:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4203:16:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60444,
                  "initializationExpression": {
                    "assignments": [
                      60412
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 60412,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "4200:1:90",
                        "nodeType": "VariableDeclaration",
                        "scope": 60444,
                        "src": "4192:9:90",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 60411,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4192:7:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 60413,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "4192:9:90"
                  },
                  "nodeType": "ForStatement",
                  "src": "4187:186:90"
                }
              ]
            },
            "baseFunctions": [
              65044
            ],
            "documentation": {
              "id": 60388,
              "nodeType": "StructuredDocumentation",
              "src": "3937:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "0a44f51f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRenewalFeeByLengths",
            "nameLocation": "3990:22:90",
            "parameters": {
              "id": 60389,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4012:2:90"
            },
            "returnParameters": {
              "id": 60394,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60393,
                  "mutability": "mutable",
                  "name": "renewalFees",
                  "nameLocation": "4058:11:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60446,
                  "src": "4038:31:90",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct INSDomainPrice.RenewalFee[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60391,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 60390,
                        "name": "RenewalFee",
                        "nameLocations": [
                          "4038:10:90"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 64929,
                        "src": "4038:10:90"
                      },
                      "referencedDeclaration": 64929,
                      "src": "4038:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_RenewalFee_$64929_storage_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee"
                      }
                    },
                    "id": 60392,
                    "nodeType": "ArrayTypeName",
                    "src": "4038:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_storage_$dyn_storage_ptr",
                      "typeString": "struct INSDomainPrice.RenewalFee[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4037:33:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60462,
            "nodeType": "FunctionDefinition",
            "src": "4425:152:90",
            "nodes": [],
            "body": {
              "id": 60461,
              "nodeType": "Block",
              "src": "4530:47:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60458,
                        "name": "renewalFees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60451,
                        "src": "4560:11:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct INSDomainPrice.RenewalFee calldata[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct INSDomainPrice.RenewalFee calldata[] calldata"
                        }
                      ],
                      "id": 60457,
                      "name": "_setRenewalFeeByLengths",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61241,
                      "src": "4536:23:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr_$returns$__$",
                        "typeString": "function (struct INSDomainPrice.RenewalFee calldata[] calldata)"
                      }
                    },
                    "id": 60459,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4536:36:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60460,
                  "nodeType": "ExpressionStatement",
                  "src": "4536:36:90"
                }
              ]
            },
            "baseFunctions": [
              65052
            ],
            "documentation": {
              "id": 60447,
              "nodeType": "StructuredDocumentation",
              "src": "4381:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "35feb741",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 60454,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48554,
                    "src": "4510:18:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 60455,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60453,
                  "name": "onlyRole",
                  "nameLocations": [
                    "4501:8:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48565,
                  "src": "4501:8:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "4501:28:90"
              }
            ],
            "name": "setRenewalFeeByLengths",
            "nameLocation": "4434:22:90",
            "parameters": {
              "id": 60452,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60451,
                  "mutability": "mutable",
                  "name": "renewalFees",
                  "nameLocation": "4479:11:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60462,
                  "src": "4457:33:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct INSDomainPrice.RenewalFee[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60449,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 60448,
                        "name": "RenewalFee",
                        "nameLocations": [
                          "4457:10:90"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 64929,
                        "src": "4457:10:90"
                      },
                      "referencedDeclaration": 64929,
                      "src": "4457:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_RenewalFee_$64929_storage_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee"
                      }
                    },
                    "id": 60450,
                    "nodeType": "ArrayTypeName",
                    "src": "4457:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_storage_$dyn_storage_ptr",
                      "typeString": "struct INSDomainPrice.RenewalFee[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4456:35:90"
            },
            "returnParameters": {
              "id": 60456,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4530:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60471,
            "nodeType": "FunctionDefinition",
            "src": "4625:88:90",
            "nodes": [],
            "body": {
              "id": 60470,
              "nodeType": "Block",
              "src": "4686:27:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 60468,
                    "name": "_taxRatio",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60228,
                    "src": "4699:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 60467,
                  "id": 60469,
                  "nodeType": "Return",
                  "src": "4692:16:90"
                }
              ]
            },
            "baseFunctions": [
              65058
            ],
            "documentation": {
              "id": 60463,
              "nodeType": "StructuredDocumentation",
              "src": "4581:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "5ef32e2c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTaxRatio",
            "nameLocation": "4634:11:90",
            "parameters": {
              "id": 60464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4645:2:90"
            },
            "returnParameters": {
              "id": 60467,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60466,
                  "mutability": "mutable",
                  "name": "ratio",
                  "nameLocation": "4679:5:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60471,
                  "src": "4671:13:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60465,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4671:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4670:15:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60485,
            "nodeType": "FunctionDefinition",
            "src": "4761:104:90",
            "nodes": [],
            "body": {
              "id": 60484,
              "nodeType": "Block",
              "src": "4835:30:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60481,
                        "name": "ratio",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60474,
                        "src": "4854:5:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 60480,
                      "name": "_setTaxRatio",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61136,
                      "src": "4841:12:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 60482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4841:19:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60483,
                  "nodeType": "ExpressionStatement",
                  "src": "4841:19:90"
                }
              ]
            },
            "baseFunctions": [
              65064
            ],
            "documentation": {
              "id": 60472,
              "nodeType": "StructuredDocumentation",
              "src": "4717:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "fe303ebf",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 60477,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48554,
                    "src": "4815:18:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 60478,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60476,
                  "name": "onlyRole",
                  "nameLocations": [
                    "4806:8:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48565,
                  "src": "4806:8:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "4806:28:90"
              }
            ],
            "name": "setTaxRatio",
            "nameLocation": "4770:11:90",
            "parameters": {
              "id": 60475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60474,
                  "mutability": "mutable",
                  "name": "ratio",
                  "nameLocation": "4790:5:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60485,
                  "src": "4782:13:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60473,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4782:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4781:15:90"
            },
            "returnParameters": {
              "id": 60479,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4835:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60495,
            "nodeType": "FunctionDefinition",
            "src": "4913:127:90",
            "nodes": [],
            "body": {
              "id": 60494,
              "nodeType": "Block",
              "src": "5009:31:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 60492,
                    "name": "_dpDownScaler",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60241,
                    "src": "5022:13:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage",
                      "typeString": "struct PeriodScaler storage ref"
                    }
                  },
                  "functionReturnParameters": 60491,
                  "id": 60493,
                  "nodeType": "Return",
                  "src": "5015:20:90"
                }
              ]
            },
            "baseFunctions": [
              65029
            ],
            "documentation": {
              "id": 60486,
              "nodeType": "StructuredDocumentation",
              "src": "4869:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "39e47da7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getScaleDownRuleForDomainPrice",
            "nameLocation": "4922:30:90",
            "parameters": {
              "id": 60487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4952:2:90"
            },
            "returnParameters": {
              "id": 60491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60490,
                  "mutability": "mutable",
                  "name": "scaleRule",
                  "nameLocation": "4998:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60495,
                  "src": "4978:29:90",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PeriodScaler_$67177_memory_ptr",
                    "typeString": "struct PeriodScaler"
                  },
                  "typeName": {
                    "id": 60489,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60488,
                      "name": "PeriodScaler",
                      "nameLocations": [
                        "4978:12:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67177,
                      "src": "4978:12:90"
                    },
                    "referencedDeclaration": 67177,
                    "src": "4978:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage_ptr",
                      "typeString": "struct PeriodScaler"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4977:31:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60510,
            "nodeType": "FunctionDefinition",
            "src": "5088:157:90",
            "nodes": [],
            "body": {
              "id": 60509,
              "nodeType": "Block",
              "src": "5199:46:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60506,
                        "name": "scaleRule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60499,
                        "src": "5230:9:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                          "typeString": "struct PeriodScaler calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                          "typeString": "struct PeriodScaler calldata"
                        }
                      ],
                      "id": 60505,
                      "name": "_setDomainPriceScaleRule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61157,
                      "src": "5205:24:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PeriodScaler_$67177_calldata_ptr_$returns$__$",
                        "typeString": "function (struct PeriodScaler calldata)"
                      }
                    },
                    "id": 60507,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5205:35:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60508,
                  "nodeType": "ExpressionStatement",
                  "src": "5205:35:90"
                }
              ]
            },
            "baseFunctions": [
              65036
            ],
            "documentation": {
              "id": 60496,
              "nodeType": "StructuredDocumentation",
              "src": "5044:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "e229a670",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 60502,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48554,
                    "src": "5179:18:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 60503,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60501,
                  "name": "onlyRole",
                  "nameLocations": [
                    "5170:8:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48565,
                  "src": "5170:8:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "5170:28:90"
              }
            ],
            "name": "setScaleDownRuleForDomainPrice",
            "nameLocation": "5097:30:90",
            "parameters": {
              "id": 60500,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60499,
                  "mutability": "mutable",
                  "name": "scaleRule",
                  "nameLocation": "5150:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60510,
                  "src": "5128:31:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                    "typeString": "struct PeriodScaler"
                  },
                  "typeName": {
                    "id": 60498,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60497,
                      "name": "PeriodScaler",
                      "nameLocations": [
                        "5128:12:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67177,
                      "src": "5128:12:90"
                    },
                    "referencedDeclaration": 67177,
                    "src": "5128:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage_ptr",
                      "typeString": "struct PeriodScaler"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5127:33:90"
            },
            "returnParameters": {
              "id": 60504,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5199:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60537,
            "nodeType": "FunctionDefinition",
            "src": "5293:226:90",
            "nodes": [],
            "body": {
              "id": 60536,
              "nodeType": "Block",
              "src": "5388:131:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 60524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60518,
                      "name": "usdFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60516,
                      "src": "5394:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 60519,
                        "name": "_rnFeeOverriding",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60257,
                        "src": "5403:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        }
                      },
                      "id": 60523,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 60520,
                            "name": "label",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60513,
                            "src": "5420:5:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "id": 60521,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5426:9:90",
                          "memberName": "hashLabel",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 66611,
                          "src": "5420:15:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$attached_to$_t_string_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes32)"
                          }
                        },
                        "id": 60522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5420:17:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5403:35:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5394:44:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 60525,
                  "nodeType": "ExpressionStatement",
                  "src": "5394:44:90"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60528,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60526,
                      "name": "usdFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60516,
                      "src": "5448:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 60527,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5458:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "5448:11:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60532,
                  "nodeType": "IfStatement",
                  "src": "5444:50:90",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 60529,
                        "name": "RenewalFeeIsNotOverriden",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 64922,
                        "src": "5468:24:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 60530,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5468:26:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 60531,
                    "nodeType": "RevertStatement",
                    "src": "5461:33:90"
                  }
                },
                {
                  "expression": {
                    "id": 60534,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "~",
                    "prefix": true,
                    "src": "5507:7:90",
                    "subExpression": {
                      "id": 60533,
                      "name": "usdFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60516,
                      "src": "5508:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 60517,
                  "id": 60535,
                  "nodeType": "Return",
                  "src": "5500:14:90"
                }
              ]
            },
            "baseFunctions": [
              65096
            ],
            "documentation": {
              "id": 60511,
              "nodeType": "StructuredDocumentation",
              "src": "5249:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "5c68c830",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOverriddenRenewalFee",
            "nameLocation": "5302:23:90",
            "parameters": {
              "id": 60514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60513,
                  "mutability": "mutable",
                  "name": "label",
                  "nameLocation": "5342:5:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60537,
                  "src": "5326:21:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 60512,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5326:6:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5325:23:90"
            },
            "returnParameters": {
              "id": 60517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60516,
                  "mutability": "mutable",
                  "name": "usdFee",
                  "nameLocation": "5380:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60537,
                  "src": "5372:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60515,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5372:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5371:16:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60611,
            "nodeType": "FunctionDefinition",
            "src": "5567:577:90",
            "nodes": [],
            "body": {
              "id": 60610,
              "nodeType": "Block",
              "src": "5703:441:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    60551
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60551,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "5717:6:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60610,
                      "src": "5709:14:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60550,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5709:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60554,
                  "initialValue": {
                    "expression": {
                      "id": 60552,
                      "name": "lbHashes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60541,
                      "src": "5726:8:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                        "typeString": "bytes32[] calldata"
                      }
                    },
                    "id": 60553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "5735:6:90",
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "5726:15:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5709:32:90"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 60562,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 60557,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 60555,
                        "name": "length",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60551,
                        "src": "5751:6:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 60556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5761:1:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "5751:11:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 60561,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 60558,
                        "name": "length",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60551,
                        "src": "5766:6:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "expression": {
                          "id": 60559,
                          "name": "usdPrices",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60544,
                          "src": "5776:9:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                            "typeString": "uint256[] calldata"
                          }
                        },
                        "id": 60560,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5786:6:90",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "5776:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "5766:26:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5751:41:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60566,
                  "nodeType": "IfStatement",
                  "src": "5747:74:90",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 60563,
                        "name": "InvalidArrayLength",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 64920,
                        "src": "5801:18:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 60564,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5801:20:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 60565,
                    "nodeType": "RevertStatement",
                    "src": "5794:27:90"
                  }
                },
                {
                  "assignments": [
                    60568
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60568,
                      "mutability": "mutable",
                      "name": "inverseBitwise",
                      "nameLocation": "5835:14:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60610,
                      "src": "5827:22:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60567,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5827:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60569,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5827:22:90"
                },
                {
                  "assignments": [
                    60571
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60571,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "5863:8:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60610,
                      "src": "5855:16:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 60570,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5855:7:90",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60574,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 60572,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52298,
                      "src": "5874:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 60573,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5874:12:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5855:31:90"
                },
                {
                  "body": {
                    "id": 60608,
                    "nodeType": "Block",
                    "src": "5922:218:90",
                    "statements": [
                      {
                        "expression": {
                          "id": 60586,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 60581,
                            "name": "inverseBitwise",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60568,
                            "src": "5930:14:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 60585,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "~",
                            "prefix": true,
                            "src": "5947:13:90",
                            "subExpression": {
                              "baseExpression": {
                                "id": 60582,
                                "name": "usdPrices",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60544,
                                "src": "5948:9:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                  "typeString": "uint256[] calldata"
                                }
                              },
                              "id": 60584,
                              "indexExpression": {
                                "id": 60583,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60576,
                                "src": "5958:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5948:12:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5930:30:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60587,
                        "nodeType": "ExpressionStatement",
                        "src": "5930:30:90"
                      },
                      {
                        "expression": {
                          "id": 60594,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 60588,
                              "name": "_rnFeeOverriding",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60257,
                              "src": "5968:16:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 60592,
                            "indexExpression": {
                              "baseExpression": {
                                "id": 60589,
                                "name": "lbHashes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60541,
                                "src": "5985:8:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                                  "typeString": "bytes32[] calldata"
                                }
                              },
                              "id": 60591,
                              "indexExpression": {
                                "id": 60590,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60576,
                                "src": "5994:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5985:11:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5968:29:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 60593,
                            "name": "inverseBitwise",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60568,
                            "src": "6000:14:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5968:46:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60595,
                        "nodeType": "ExpressionStatement",
                        "src": "5968:46:90"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 60597,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60571,
                              "src": "6055:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60598,
                                "name": "lbHashes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60541,
                                "src": "6065:8:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                                  "typeString": "bytes32[] calldata"
                                }
                              },
                              "id": 60600,
                              "indexExpression": {
                                "id": 60599,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60576,
                                "src": "6074:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6065:11:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 60601,
                              "name": "inverseBitwise",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60568,
                              "src": "6078:14:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 60596,
                            "name": "RenewalFeeOverridingUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64966,
                            "src": "6027:27:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$__$",
                              "typeString": "function (address,bytes32,uint256)"
                            }
                          },
                          "id": 60602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6027:66:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 60603,
                        "nodeType": "EmitStatement",
                        "src": "6022:71:90"
                      },
                      {
                        "id": 60607,
                        "nodeType": "UncheckedBlock",
                        "src": "6102:32:90",
                        "statements": [
                          {
                            "expression": {
                              "id": 60605,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "6122:3:90",
                              "subExpression": {
                                "id": 60604,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60576,
                                "src": "6124:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60606,
                            "nodeType": "ExpressionStatement",
                            "src": "6122:3:90"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60580,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60578,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60576,
                      "src": "5909:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 60579,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60551,
                      "src": "5913:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5909:10:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60609,
                  "initializationExpression": {
                    "assignments": [
                      60576
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 60576,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "5906:1:90",
                        "nodeType": "VariableDeclaration",
                        "scope": 60609,
                        "src": "5898:9:90",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 60575,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5898:7:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 60577,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "5898:9:90"
                  },
                  "nodeType": "ForStatement",
                  "src": "5893:247:90"
                }
              ]
            },
            "baseFunctions": [
              65106
            ],
            "documentation": {
              "id": 60538,
              "nodeType": "StructuredDocumentation",
              "src": "5523:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "dd28776d",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 60547,
                    "name": "OVERRIDER_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60212,
                    "src": "5685:14:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 60548,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60546,
                  "name": "onlyRole",
                  "nameLocations": [
                    "5676:8:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48565,
                  "src": "5676:8:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "5676:24:90"
              }
            ],
            "name": "bulkOverrideRenewalFees",
            "nameLocation": "5576:23:90",
            "parameters": {
              "id": 60545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60541,
                  "mutability": "mutable",
                  "name": "lbHashes",
                  "nameLocation": "5619:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60611,
                  "src": "5600:27:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60539,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "5600:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 60540,
                    "nodeType": "ArrayTypeName",
                    "src": "5600:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60544,
                  "mutability": "mutable",
                  "name": "usdPrices",
                  "nameLocation": "5648:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60611,
                  "src": "5629:28:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60542,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5629:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60543,
                    "nodeType": "ArrayTypeName",
                    "src": "5629:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5599:59:90"
            },
            "returnParameters": {
              "id": 60549,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5703:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60689,
            "nodeType": "FunctionDefinition",
            "src": "6192:610:90",
            "nodes": [],
            "body": {
              "id": 60688,
              "nodeType": "Block",
              "src": "6428:374:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    60634
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60634,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "6442:6:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60688,
                      "src": "6434:14:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60633,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6434:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60641,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 60636,
                        "name": "lbHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60615,
                        "src": "6492:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      },
                      {
                        "id": 60637,
                        "name": "ronPrices",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60618,
                        "src": "6502:9:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "id": 60638,
                        "name": "proofHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60621,
                        "src": "6513:11:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      },
                      {
                        "id": 60639,
                        "name": "setTypes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60624,
                        "src": "6526:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      ],
                      "id": 60635,
                      "name": "_requireBulkSetDomainPriceArgumentsValid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61054,
                      "src": "6451:40:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function (bytes32[] calldata,uint256[] calldata,bytes32[] calldata,uint256[] calldata) pure returns (uint256)"
                      }
                    },
                    "id": 60640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6451:84:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6434:101:90"
                },
                {
                  "assignments": [
                    60643
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60643,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "6549:8:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60688,
                      "src": "6541:16:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 60642,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6541:7:90",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60646,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 60644,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52298,
                      "src": "6560:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 60645,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6560:12:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6541:31:90"
                },
                {
                  "expression": {
                    "id": 60653,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60647,
                      "name": "updated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60631,
                      "src": "6578:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                        "typeString": "bool[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 60651,
                          "name": "length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60634,
                          "src": "6599:6:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 60650,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "6588:10:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (bool[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 60648,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "6592:4:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 60649,
                          "nodeType": "ArrayTypeName",
                          "src": "6592:6:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                            "typeString": "bool[]"
                          }
                        }
                      },
                      "id": 60652,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6588:18:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                        "typeString": "bool[] memory"
                      }
                    },
                    "src": "6578:28:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "id": 60654,
                  "nodeType": "ExpressionStatement",
                  "src": "6578:28:90"
                },
                {
                  "body": {
                    "id": 60686,
                    "nodeType": "Block",
                    "src": "6642:156:90",
                    "statements": [
                      {
                        "expression": {
                          "id": 60680,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 60661,
                              "name": "updated",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60631,
                              "src": "6650:7:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 60663,
                            "indexExpression": {
                              "id": 60662,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60656,
                              "src": "6658:1:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6650:10:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 60665,
                                "name": "operator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60643,
                                "src": "6679:8:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 60666,
                                  "name": "lbHashes",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60615,
                                  "src": "6689:8:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                                    "typeString": "bytes32[] calldata"
                                  }
                                },
                                "id": 60668,
                                "indexExpression": {
                                  "id": 60667,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60656,
                                  "src": "6698:1:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6689:11:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 60669,
                                  "name": "ronPrices",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60618,
                                  "src": "6702:9:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                    "typeString": "uint256[] calldata"
                                  }
                                },
                                "id": 60671,
                                "indexExpression": {
                                  "id": 60670,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60656,
                                  "src": "6712:1:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6702:12:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 60672,
                                  "name": "proofHashes",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60621,
                                  "src": "6716:11:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                                    "typeString": "bytes32[] calldata"
                                  }
                                },
                                "id": 60674,
                                "indexExpression": {
                                  "id": 60673,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60656,
                                  "src": "6728:1:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6716:14:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 60675,
                                  "name": "setTypes",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60624,
                                  "src": "6732:8:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                    "typeString": "uint256[] calldata"
                                  }
                                },
                                "id": 60677,
                                "indexExpression": {
                                  "id": 60676,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60656,
                                  "src": "6741:1:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6732:11:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "hexValue": "66616c7365",
                                "id": 60678,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6745:5:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              ],
                              "id": 60664,
                              "name": "_setDomainPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61119,
                              "src": "6663:15:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_bool_$returns$_t_bool_$",
                                "typeString": "function (address,bytes32,uint256,bytes32,uint256,bool) returns (bool)"
                              }
                            },
                            "id": 60679,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6663:88:90",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6650:101:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 60681,
                        "nodeType": "ExpressionStatement",
                        "src": "6650:101:90"
                      },
                      {
                        "id": 60685,
                        "nodeType": "UncheckedBlock",
                        "src": "6760:32:90",
                        "statements": [
                          {
                            "expression": {
                              "id": 60683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "6780:3:90",
                              "subExpression": {
                                "id": 60682,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60656,
                                "src": "6782:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60684,
                            "nodeType": "ExpressionStatement",
                            "src": "6780:3:90"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60660,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60658,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60656,
                      "src": "6629:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 60659,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60634,
                      "src": "6633:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6629:10:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60687,
                  "initializationExpression": {
                    "assignments": [
                      60656
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 60656,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "6626:1:90",
                        "nodeType": "VariableDeclaration",
                        "scope": 60687,
                        "src": "6618:9:90",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 60655,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6618:7:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 60657,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "6618:9:90"
                  },
                  "nodeType": "ForStatement",
                  "src": "6613:185:90"
                }
              ]
            },
            "baseFunctions": [
              65125
            ],
            "documentation": {
              "id": 60612,
              "nodeType": "StructuredDocumentation",
              "src": "6148:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "53faf909",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 60627,
                    "name": "OPERATOR_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60206,
                    "src": "6381:13:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 60628,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60626,
                  "name": "onlyRole",
                  "nameLocations": [
                    "6372:8:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48565,
                  "src": "6372:8:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "6372:23:90"
              }
            ],
            "name": "bulkTrySetDomainPrice",
            "nameLocation": "6201:21:90",
            "parameters": {
              "id": 60625,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60615,
                  "mutability": "mutable",
                  "name": "lbHashes",
                  "nameLocation": "6247:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60689,
                  "src": "6228:27:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60613,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "6228:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 60614,
                    "nodeType": "ArrayTypeName",
                    "src": "6228:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60618,
                  "mutability": "mutable",
                  "name": "ronPrices",
                  "nameLocation": "6280:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60689,
                  "src": "6261:28:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60616,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6261:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60617,
                    "nodeType": "ArrayTypeName",
                    "src": "6261:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60621,
                  "mutability": "mutable",
                  "name": "proofHashes",
                  "nameLocation": "6314:11:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60689,
                  "src": "6295:30:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60619,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "6295:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 60620,
                    "nodeType": "ArrayTypeName",
                    "src": "6295:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60624,
                  "mutability": "mutable",
                  "name": "setTypes",
                  "nameLocation": "6350:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60689,
                  "src": "6331:27:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60622,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6331:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60623,
                    "nodeType": "ArrayTypeName",
                    "src": "6331:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6222:140:90"
            },
            "returnParameters": {
              "id": 60632,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60631,
                  "mutability": "mutable",
                  "name": "updated",
                  "nameLocation": "6419:7:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60689,
                  "src": "6405:21:90",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60629,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "6405:4:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 60630,
                    "nodeType": "ArrayTypeName",
                    "src": "6405:6:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6404:23:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60752,
            "nodeType": "FunctionDefinition",
            "src": "6850:527:90",
            "nodes": [],
            "body": {
              "id": 60751,
              "nodeType": "Block",
              "src": "7052:325:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    60709
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60709,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "7066:6:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60751,
                      "src": "7058:14:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60708,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7058:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60716,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 60711,
                        "name": "lbHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60693,
                        "src": "7116:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      },
                      {
                        "id": 60712,
                        "name": "ronPrices",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60696,
                        "src": "7126:9:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "id": 60713,
                        "name": "proofHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60699,
                        "src": "7137:11:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      },
                      {
                        "id": 60714,
                        "name": "setTypes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60702,
                        "src": "7150:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      ],
                      "id": 60710,
                      "name": "_requireBulkSetDomainPriceArgumentsValid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61054,
                      "src": "7075:40:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function (bytes32[] calldata,uint256[] calldata,bytes32[] calldata,uint256[] calldata) pure returns (uint256)"
                      }
                    },
                    "id": 60715,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7075:84:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7058:101:90"
                },
                {
                  "assignments": [
                    60718
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60718,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "7173:8:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60751,
                      "src": "7165:16:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 60717,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7165:7:90",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60721,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 60719,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52298,
                      "src": "7184:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 60720,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7184:12:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7165:31:90"
                },
                {
                  "body": {
                    "id": 60749,
                    "nodeType": "Block",
                    "src": "7232:141:90",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 60729,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60718,
                              "src": "7256:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60730,
                                "name": "lbHashes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60693,
                                "src": "7266:8:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                                  "typeString": "bytes32[] calldata"
                                }
                              },
                              "id": 60732,
                              "indexExpression": {
                                "id": 60731,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60723,
                                "src": "7275:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7266:11:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60733,
                                "name": "ronPrices",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60696,
                                "src": "7279:9:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                  "typeString": "uint256[] calldata"
                                }
                              },
                              "id": 60735,
                              "indexExpression": {
                                "id": 60734,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60723,
                                "src": "7289:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7279:12:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60736,
                                "name": "proofHashes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60699,
                                "src": "7293:11:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                                  "typeString": "bytes32[] calldata"
                                }
                              },
                              "id": 60738,
                              "indexExpression": {
                                "id": 60737,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60723,
                                "src": "7305:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7293:14:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60739,
                                "name": "setTypes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60702,
                                "src": "7309:8:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                  "typeString": "uint256[] calldata"
                                }
                              },
                              "id": 60741,
                              "indexExpression": {
                                "id": 60740,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60723,
                                "src": "7318:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7309:11:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "74727565",
                              "id": 60742,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7322:4:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 60728,
                            "name": "_setDomainPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61119,
                            "src": "7240:15:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_bool_$returns$_t_bool_$",
                              "typeString": "function (address,bytes32,uint256,bytes32,uint256,bool) returns (bool)"
                            }
                          },
                          "id": 60743,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7240:87:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 60744,
                        "nodeType": "ExpressionStatement",
                        "src": "7240:87:90"
                      },
                      {
                        "id": 60748,
                        "nodeType": "UncheckedBlock",
                        "src": "7335:32:90",
                        "statements": [
                          {
                            "expression": {
                              "id": 60746,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "7355:3:90",
                              "subExpression": {
                                "id": 60745,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60723,
                                "src": "7357:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60747,
                            "nodeType": "ExpressionStatement",
                            "src": "7355:3:90"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60727,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60725,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60723,
                      "src": "7219:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 60726,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60709,
                      "src": "7223:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7219:10:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60750,
                  "initializationExpression": {
                    "assignments": [
                      60723
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 60723,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "7216:1:90",
                        "nodeType": "VariableDeclaration",
                        "scope": 60750,
                        "src": "7208:9:90",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 60722,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7208:7:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 60724,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "7208:9:90"
                  },
                  "nodeType": "ForStatement",
                  "src": "7203:170:90"
                }
              ]
            },
            "baseFunctions": [
              65141
            ],
            "documentation": {
              "id": 60690,
              "nodeType": "StructuredDocumentation",
              "src": "6806:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "599eaabf",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 60705,
                    "name": "OVERRIDER_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60212,
                    "src": "7036:14:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 60706,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60704,
                  "name": "onlyRole",
                  "nameLocations": [
                    "7027:8:90"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48565,
                  "src": "7027:8:90"
                },
                "nodeType": "ModifierInvocation",
                "src": "7027:24:90"
              }
            ],
            "name": "bulkSetDomainPrice",
            "nameLocation": "6859:18:90",
            "parameters": {
              "id": 60703,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60693,
                  "mutability": "mutable",
                  "name": "lbHashes",
                  "nameLocation": "6902:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60752,
                  "src": "6883:27:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60691,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "6883:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 60692,
                    "nodeType": "ArrayTypeName",
                    "src": "6883:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60696,
                  "mutability": "mutable",
                  "name": "ronPrices",
                  "nameLocation": "6935:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60752,
                  "src": "6916:28:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60694,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6916:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60695,
                    "nodeType": "ArrayTypeName",
                    "src": "6916:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60699,
                  "mutability": "mutable",
                  "name": "proofHashes",
                  "nameLocation": "6969:11:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60752,
                  "src": "6950:30:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60697,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "6950:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 60698,
                    "nodeType": "ArrayTypeName",
                    "src": "6950:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60702,
                  "mutability": "mutable",
                  "name": "setTypes",
                  "nameLocation": "7005:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60752,
                  "src": "6986:27:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60700,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6986:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60701,
                    "nodeType": "ArrayTypeName",
                    "src": "6986:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6877:140:90"
            },
            "returnParameters": {
              "id": 60707,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7052:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60777,
            "nodeType": "FunctionDefinition",
            "src": "7425:200:90",
            "nodes": [],
            "body": {
              "id": 60776,
              "nodeType": "Block",
              "src": "7527:98:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 60768,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60762,
                      "name": "usdPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60758,
                      "src": "7533:8:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 60764,
                              "name": "label",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60755,
                              "src": "7560:5:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "id": 60765,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7566:9:90",
                            "memberName": "hashLabel",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 66611,
                            "src": "7560:15:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$attached_to$_t_string_memory_ptr_$",
                              "typeString": "function (string memory) pure returns (bytes32)"
                            }
                          },
                          "id": 60766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7560:17:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 60763,
                        "name": "_getDomainPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61315,
                        "src": "7544:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_uint256_$",
                          "typeString": "function (bytes32) view returns (uint256)"
                        }
                      },
                      "id": 60767,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7544:34:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7533:45:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 60769,
                  "nodeType": "ExpressionStatement",
                  "src": "7533:45:90"
                },
                {
                  "expression": {
                    "id": 60774,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60770,
                      "name": "ronPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60760,
                      "src": "7584:8:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 60772,
                          "name": "usdPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60758,
                          "src": "7611:8:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 60771,
                        "name": "convertUSDToRON",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60981,
                        "src": "7595:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256) view returns (uint256)"
                        }
                      },
                      "id": 60773,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7595:25:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7584:36:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 60775,
                  "nodeType": "ExpressionStatement",
                  "src": "7584:36:90"
                }
              ]
            },
            "baseFunctions": [
              65074
            ],
            "documentation": {
              "id": 60753,
              "nodeType": "StructuredDocumentation",
              "src": "7381:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "713a69a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDomainPrice",
            "nameLocation": "7434:14:90",
            "parameters": {
              "id": 60756,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60755,
                  "mutability": "mutable",
                  "name": "label",
                  "nameLocation": "7463:5:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60777,
                  "src": "7449:19:90",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 60754,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7449:6:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7448:21:90"
            },
            "returnParameters": {
              "id": 60761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60758,
                  "mutability": "mutable",
                  "name": "usdPrice",
                  "nameLocation": "7499:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60777,
                  "src": "7491:16:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60757,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7491:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60760,
                  "mutability": "mutable",
                  "name": "ronPrice",
                  "nameLocation": "7517:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60777,
                  "src": "7509:16:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60759,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7509:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7490:36:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 60951,
            "nodeType": "FunctionDefinition",
            "src": "7673:1367:90",
            "nodes": [],
            "body": {
              "id": 60950,
              "nodeType": "Block",
              "src": "7820:1220:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    60792
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60792,
                      "mutability": "mutable",
                      "name": "nameLen",
                      "nameLocation": "7834:7:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60950,
                      "src": "7826:15:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60791,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7826:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60796,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 60793,
                        "name": "label",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60780,
                        "src": "7844:5:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "id": 60794,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7850:6:90",
                      "memberName": "strlen",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66729,
                      "src": "7844:12:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$attached_to$_t_string_memory_ptr_$",
                        "typeString": "function (string memory) pure returns (uint256)"
                      }
                    },
                    "id": 60795,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7844:14:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7826:32:90"
                },
                {
                  "assignments": [
                    60798
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60798,
                      "mutability": "mutable",
                      "name": "lbHash",
                      "nameLocation": "7872:6:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60950,
                      "src": "7864:14:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 60797,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "7864:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60802,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 60799,
                        "name": "label",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60780,
                        "src": "7881:5:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "id": 60800,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7887:9:90",
                      "memberName": "hashLabel",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66611,
                      "src": "7881:15:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$attached_to$_t_string_memory_ptr_$",
                        "typeString": "function (string memory) pure returns (bytes32)"
                      }
                    },
                    "id": 60801,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7881:17:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7864:34:90"
                },
                {
                  "assignments": [
                    60804
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60804,
                      "mutability": "mutable",
                      "name": "overriddenRenewalFee",
                      "nameLocation": "7912:20:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 60950,
                      "src": "7904:28:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 60803,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7904:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60808,
                  "initialValue": {
                    "baseExpression": {
                      "id": 60805,
                      "name": "_rnFeeOverriding",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60257,
                      "src": "7935:16:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      }
                    },
                    "id": 60807,
                    "indexExpression": {
                      "id": 60806,
                      "name": "lbHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60798,
                      "src": "7952:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7935:24:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7904:55:90"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60811,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60809,
                      "name": "overriddenRenewalFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60804,
                      "src": "7970:20:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 60810,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7994:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "7970:25:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 60930,
                    "nodeType": "Block",
                    "src": "8066:877:90",
                    "statements": [
                      {
                        "assignments": [
                          60823
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 60823,
                            "mutability": "mutable",
                            "name": "renewalFeeByLength",
                            "nameLocation": "8082:18:90",
                            "nodeType": "VariableDeclaration",
                            "scope": 60930,
                            "src": "8074:26:90",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 60822,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8074:7:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 60831,
                        "initialValue": {
                          "baseExpression": {
                            "id": 60824,
                            "name": "_rnFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60246,
                            "src": "8103:6:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 60830,
                          "indexExpression": {
                            "arguments": [
                              {
                                "id": 60827,
                                "name": "nameLen",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60792,
                                "src": "8119:7:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 60828,
                                "name": "_rnfMaxLength",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60231,
                                "src": "8128:13:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 60825,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53549,
                                "src": "8110:4:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$53549_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 60826,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8115:3:90",
                              "memberName": "min",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 52726,
                              "src": "8110:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 60829,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8110:32:90",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8103:40:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8074:69:90"
                      },
                      {
                        "expression": {
                          "id": 60838,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 60832,
                              "name": "basePrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60786,
                              "src": "8151:9:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                                "typeString": "struct INSDomainPrice.UnitPrice memory"
                              }
                            },
                            "id": 60834,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "8161:3:90",
                            "memberName": "usd",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 64931,
                            "src": "8151:13:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 60837,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 60835,
                              "name": "duration",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60782,
                              "src": "8167:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 60836,
                              "name": "renewalFeeByLength",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60823,
                              "src": "8178:18:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "8167:29:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8151:45:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60839,
                        "nodeType": "ExpressionStatement",
                        "src": "8151:45:90"
                      },
                      {
                        "assignments": [
                          60841
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 60841,
                            "mutability": "mutable",
                            "name": "id",
                            "nameLocation": "8212:2:90",
                            "nodeType": "VariableDeclaration",
                            "scope": 60930,
                            "src": "8204:10:90",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 60840,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8204:7:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 60848,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 60844,
                                "name": "LibRNSDomain",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 66622,
                                "src": "8235:12:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$66622_$",
                                  "typeString": "type(library LibRNSDomain)"
                                }
                              },
                              "id": 60845,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "8248:6:90",
                              "memberName": "RON_ID",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 66585,
                              "src": "8235:19:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 60846,
                              "name": "label",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60780,
                              "src": "8256:5:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 60842,
                              "name": "LibRNSDomain",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 66622,
                              "src": "8217:12:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$66622_$",
                                "typeString": "type(library LibRNSDomain)"
                              }
                            },
                            "id": 60843,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8230:4:90",
                            "memberName": "toId",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 66601,
                            "src": "8217:17:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (uint256,string memory) pure returns (uint256)"
                            }
                          },
                          "id": 60847,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8217:45:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8204:58:90"
                      },
                      {
                        "assignments": [
                          60851
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 60851,
                            "mutability": "mutable",
                            "name": "auction",
                            "nameLocation": "8281:7:90",
                            "nodeType": "VariableDeclaration",
                            "scope": 60930,
                            "src": "8270:18:90",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_INSAuction_$64912",
                              "typeString": "contract INSAuction"
                            },
                            "typeName": {
                              "id": 60850,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 60849,
                                "name": "INSAuction",
                                "nameLocations": [
                                  "8270:10:90"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 64912,
                                "src": "8270:10:90"
                              },
                              "referencedDeclaration": 64912,
                              "src": "8270:10:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INSAuction_$64912",
                                "typeString": "contract INSAuction"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 60853,
                        "initialValue": {
                          "id": 60852,
                          "name": "_auction",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60225,
                          "src": "8291:8:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_INSAuction_$64912",
                            "typeString": "contract INSAuction"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8270:29:90"
                      },
                      {
                        "condition": {
                          "arguments": [
                            {
                              "id": 60856,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60841,
                              "src": "8328:2:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 60854,
                              "name": "auction",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60851,
                              "src": "8311:7:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INSAuction_$64912",
                                "typeString": "contract INSAuction"
                              }
                            },
                            "id": 60855,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8319:8:90",
                            "memberName": "reserved",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 64814,
                            "src": "8311:16:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (uint256) view external returns (bool)"
                            }
                          },
                          "id": 60857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8311:20:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 60929,
                        "nodeType": "IfStatement",
                        "src": "8307:630:90",
                        "trueBody": {
                          "id": 60928,
                          "nodeType": "Block",
                          "src": "8333:604:90",
                          "statements": [
                            {
                              "assignments": [
                                60860
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 60860,
                                  "mutability": "mutable",
                                  "name": "rns",
                                  "nameLocation": "8354:3:90",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 60928,
                                  "src": "8343:14:90",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_INSUnified_$65555",
                                    "typeString": "contract INSUnified"
                                  },
                                  "typeName": {
                                    "id": 60859,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 60858,
                                      "name": "INSUnified",
                                      "nameLocations": [
                                        "8343:10:90"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 65555,
                                      "src": "8343:10:90"
                                    },
                                    "referencedDeclaration": 65555,
                                    "src": "8343:10:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_INSUnified_$65555",
                                      "typeString": "contract INSUnified"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 60864,
                              "initialValue": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "id": 60861,
                                    "name": "auction",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60851,
                                    "src": "8360:7:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_INSAuction_$64912",
                                      "typeString": "contract INSAuction"
                                    }
                                  },
                                  "id": 60862,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8368:13:90",
                                  "memberName": "getRNSUnified",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 64911,
                                  "src": "8360:21:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_INSUnified_$65555_$",
                                    "typeString": "function () view external returns (contract INSUnified)"
                                  }
                                },
                                "id": 60863,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8360:23:90",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_INSUnified_$65555",
                                  "typeString": "contract INSUnified"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8343:40:90"
                            },
                            {
                              "assignments": [
                                60866
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 60866,
                                  "mutability": "mutable",
                                  "name": "expiry",
                                  "nameLocation": "8401:6:90",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 60928,
                                  "src": "8393:14:90",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 60865,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8393:7:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 60882,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "id": 60871,
                                            "name": "id",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 60841,
                                            "src": "8455:2:90",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 60869,
                                            "name": "rns",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 60860,
                                            "src": "8441:3:90",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_INSUnified_$65555",
                                              "typeString": "contract INSUnified"
                                            }
                                          },
                                          "id": 60870,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "8445:9:90",
                                          "memberName": "getRecord",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 65484,
                                          "src": "8441:13:90",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_struct$_Record_$65368_memory_ptr_$",
                                            "typeString": "function (uint256) view external returns (struct INSUnified.Record memory)"
                                          }
                                        },
                                        "id": 60872,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "8441:17:90",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Record_$65368_memory_ptr",
                                          "typeString": "struct INSUnified.Record memory"
                                        }
                                      },
                                      "id": 60873,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "8459:3:90",
                                      "memberName": "mut",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 65367,
                                      "src": "8441:21:90",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_MutableRecord_$65361_memory_ptr",
                                        "typeString": "struct INSUnified.MutableRecord memory"
                                      }
                                    },
                                    "id": 60874,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8463:6:90",
                                    "memberName": "expiry",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 65358,
                                    "src": "8441:28:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  {
                                    "id": 60875,
                                    "name": "duration",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60782,
                                    "src": "8471:8:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 60878,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "8486:6:90",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_uint64_$",
                                            "typeString": "type(uint64)"
                                          },
                                          "typeName": {
                                            "id": 60877,
                                            "name": "uint64",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "8486:6:90",
                                            "typeDescriptions": {}
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_type$_t_uint64_$",
                                            "typeString": "type(uint64)"
                                          }
                                        ],
                                        "id": 60876,
                                        "name": "type",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -27,
                                        "src": "8481:4:90",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 60879,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8481:12:90",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_meta_type_t_uint64",
                                        "typeString": "type(uint64)"
                                      }
                                    },
                                    "id": 60880,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "8494:3:90",
                                    "memberName": "max",
                                    "nodeType": "MemberAccess",
                                    "src": "8481:16:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  ],
                                  "expression": {
                                    "id": 60867,
                                    "name": "LibSafeRange",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 67166,
                                    "src": "8410:12:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_LibSafeRange_$67166_$",
                                      "typeString": "type(library LibSafeRange)"
                                    }
                                  },
                                  "id": 60868,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8423:17:90",
                                  "memberName": "addWithUpperbound",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 67165,
                                  "src": "8410:30:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 60881,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8410:88:90",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8393:105:90"
                            },
                            {
                              "assignments": [
                                60887,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 60887,
                                  "mutability": "mutable",
                                  "name": "domainAuction",
                                  "nameLocation": "8541:13:90",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 60928,
                                  "src": "8509:45:90",
                                  "stateVariable": false,
                                  "storageLocation": "memory",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DomainAuction_$64722_memory_ptr",
                                    "typeString": "struct INSAuction.DomainAuction"
                                  },
                                  "typeName": {
                                    "id": 60886,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 60885,
                                      "name": "INSAuction.DomainAuction",
                                      "nameLocations": [
                                        "8509:10:90",
                                        "8520:13:90"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 64722,
                                      "src": "8509:24:90"
                                    },
                                    "referencedDeclaration": 64722,
                                    "src": "8509:24:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_DomainAuction_$64722_storage_ptr",
                                      "typeString": "struct INSAuction.DomainAuction"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 60892,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 60890,
                                    "name": "id",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60841,
                                    "src": "8578:2:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 60888,
                                    "name": "auction",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60851,
                                    "src": "8559:7:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_INSAuction_$64912",
                                      "typeString": "contract INSAuction"
                                    }
                                  },
                                  "id": 60889,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8567:10:90",
                                  "memberName": "getAuction",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 64870,
                                  "src": "8559:18:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_struct$_DomainAuction_$64722_memory_ptr_$_t_uint256_$",
                                    "typeString": "function (uint256) view external returns (struct INSAuction.DomainAuction memory,uint256)"
                                  }
                                },
                                "id": 60891,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8559:22:90",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_struct$_DomainAuction_$64722_memory_ptr_$_t_uint256_$",
                                  "typeString": "tuple(struct INSAuction.DomainAuction memory,uint256)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8508:73:90"
                            },
                            {
                              "assignments": [
                                60894
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 60894,
                                  "mutability": "mutable",
                                  "name": "claimedAt",
                                  "nameLocation": "8599:9:90",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 60928,
                                  "src": "8591:17:90",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 60893,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8591:7:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 60898,
                              "initialValue": {
                                "expression": {
                                  "expression": {
                                    "id": 60895,
                                    "name": "domainAuction",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60887,
                                    "src": "8611:13:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_DomainAuction_$64722_memory_ptr",
                                      "typeString": "struct INSAuction.DomainAuction memory"
                                    }
                                  },
                                  "id": 60896,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8625:3:90",
                                  "memberName": "bid",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 64721,
                                  "src": "8611:17:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Bid_$64714_memory_ptr",
                                    "typeString": "struct INSAuction.Bid memory"
                                  }
                                },
                                "id": 60897,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "8629:9:90",
                                "memberName": "claimedAt",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 64713,
                                "src": "8611:27:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8591:47:90"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 60909,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 60901,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 60899,
                                    "name": "claimedAt",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60894,
                                    "src": "8652:9:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 60900,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "8665:1:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "8652:14:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 60908,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 60904,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 60902,
                                      "name": "expiry",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 60866,
                                      "src": "8670:6:90",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "id": 60903,
                                      "name": "claimedAt",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 60894,
                                      "src": "8679:9:90",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "8670:18:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "expression": {
                                        "id": 60905,
                                        "name": "auction",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 60851,
                                        "src": "8691:7:90",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_INSAuction_$64912",
                                          "typeString": "contract INSAuction"
                                        }
                                      },
                                      "id": 60906,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "8699:25:90",
                                      "memberName": "MAX_AUCTION_DOMAIN_EXPIRY",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 64778,
                                      "src": "8691:33:90",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_pure$__$returns$_t_uint64_$",
                                        "typeString": "function () pure external returns (uint64)"
                                      }
                                    },
                                    "id": 60907,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "8691:35:90",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  "src": "8670:56:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "8652:74:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 60914,
                              "nodeType": "IfStatement",
                              "src": "8648:137:90",
                              "trueBody": {
                                "id": 60913,
                                "nodeType": "Block",
                                "src": "8728:57:90",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "id": 60910,
                                        "name": "ExceedAuctionDomainExpiry",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 64924,
                                        "src": "8747:25:90",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 60911,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8747:27:90",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 60912,
                                    "nodeType": "RevertStatement",
                                    "src": "8740:34:90"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 60926,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 60915,
                                    "name": "tax",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 60789,
                                    "src": "8855:3:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                                      "typeString": "struct INSDomainPrice.UnitPrice memory"
                                    }
                                  },
                                  "id": 60917,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "8859:3:90",
                                  "memberName": "usd",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 64931,
                                  "src": "8855:7:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 60920,
                                      "name": "_taxRatio",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 60228,
                                      "src": "8877:9:90",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "id": 60922,
                                          "name": "lbHash",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 60798,
                                          "src": "8904:6:90",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        ],
                                        "id": 60921,
                                        "name": "_getDomainPrice",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 61315,
                                        "src": "8888:15:90",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_uint256_$",
                                          "typeString": "function (bytes32) view returns (uint256)"
                                        }
                                      },
                                      "id": 60923,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8888:23:90",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "id": 60924,
                                      "name": "MAX_PERCENTAGE",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 60200,
                                      "src": "8913:14:90",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint64",
                                        "typeString": "uint64"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_uint64",
                                        "typeString": "uint64"
                                      }
                                    ],
                                    "expression": {
                                      "id": 60918,
                                      "name": "Math",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 53549,
                                      "src": "8865:4:90",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_Math_$53549_$",
                                        "typeString": "type(library Math)"
                                      }
                                    },
                                    "id": 60919,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8870:6:90",
                                    "memberName": "mulDiv",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 52897,
                                    "src": "8865:11:90",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 60925,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8865:63:90",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "8855:73:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 60927,
                              "nodeType": "ExpressionStatement",
                              "src": "8855:73:90"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 60931,
                  "nodeType": "IfStatement",
                  "src": "7966:977:90",
                  "trueBody": {
                    "id": 60821,
                    "nodeType": "Block",
                    "src": "7997:63:90",
                    "statements": [
                      {
                        "expression": {
                          "id": 60819,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 60812,
                              "name": "basePrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60786,
                              "src": "8005:9:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                                "typeString": "struct INSDomainPrice.UnitPrice memory"
                              }
                            },
                            "id": 60814,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "8015:3:90",
                            "memberName": "usd",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 64931,
                            "src": "8005:13:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 60818,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 60815,
                              "name": "duration",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60782,
                              "src": "8021:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 60817,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "~",
                              "prefix": true,
                              "src": "8032:21:90",
                              "subExpression": {
                                "id": 60816,
                                "name": "overriddenRenewalFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60804,
                                "src": "8033:20:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "8021:32:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8005:48:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60820,
                        "nodeType": "ExpressionStatement",
                        "src": "8005:48:90"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 60939,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 60932,
                        "name": "tax",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60789,
                        "src": "8949:3:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                          "typeString": "struct INSDomainPrice.UnitPrice memory"
                        }
                      },
                      "id": 60934,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "8953:3:90",
                      "memberName": "ron",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64933,
                      "src": "8949:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 60936,
                            "name": "tax",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60789,
                            "src": "8975:3:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                              "typeString": "struct INSDomainPrice.UnitPrice memory"
                            }
                          },
                          "id": 60937,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8979:3:90",
                          "memberName": "usd",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 64931,
                          "src": "8975:7:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 60935,
                        "name": "convertUSDToRON",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60981,
                        "src": "8959:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256) view returns (uint256)"
                        }
                      },
                      "id": 60938,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8959:24:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8949:34:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 60940,
                  "nodeType": "ExpressionStatement",
                  "src": "8949:34:90"
                },
                {
                  "expression": {
                    "id": 60948,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 60941,
                        "name": "basePrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60786,
                        "src": "8989:9:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                          "typeString": "struct INSDomainPrice.UnitPrice memory"
                        }
                      },
                      "id": 60943,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "8999:3:90",
                      "memberName": "ron",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64933,
                      "src": "8989:13:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 60945,
                            "name": "basePrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60786,
                            "src": "9021:9:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                              "typeString": "struct INSDomainPrice.UnitPrice memory"
                            }
                          },
                          "id": 60946,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9031:3:90",
                          "memberName": "usd",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 64931,
                          "src": "9021:13:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 60944,
                        "name": "convertUSDToRON",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60981,
                        "src": "9005:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256) view returns (uint256)"
                        }
                      },
                      "id": 60947,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9005:30:90",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8989:46:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 60949,
                  "nodeType": "ExpressionStatement",
                  "src": "8989:46:90"
                }
              ]
            },
            "baseFunctions": [
              65088
            ],
            "documentation": {
              "id": 60778,
              "nodeType": "StructuredDocumentation",
              "src": "7629:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "f4651f49",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRenewalFee",
            "nameLocation": "7682:13:90",
            "parameters": {
              "id": 60783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60780,
                  "mutability": "mutable",
                  "name": "label",
                  "nameLocation": "7710:5:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60951,
                  "src": "7696:19:90",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 60779,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7696:6:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60782,
                  "mutability": "mutable",
                  "name": "duration",
                  "nameLocation": "7725:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60951,
                  "src": "7717:16:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60781,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7717:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7695:39:90"
            },
            "returnParameters": {
              "id": 60790,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60786,
                  "mutability": "mutable",
                  "name": "basePrice",
                  "nameLocation": "7785:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60951,
                  "src": "7768:26:90",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                    "typeString": "struct INSDomainPrice.UnitPrice"
                  },
                  "typeName": {
                    "id": 60785,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60784,
                      "name": "UnitPrice",
                      "nameLocations": [
                        "7768:9:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 64934,
                      "src": "7768:9:90"
                    },
                    "referencedDeclaration": 64934,
                    "src": "7768:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UnitPrice_$64934_storage_ptr",
                      "typeString": "struct INSDomainPrice.UnitPrice"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60789,
                  "mutability": "mutable",
                  "name": "tax",
                  "nameLocation": "7813:3:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60951,
                  "src": "7796:20:90",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UnitPrice_$64934_memory_ptr",
                    "typeString": "struct INSDomainPrice.UnitPrice"
                  },
                  "typeName": {
                    "id": 60788,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60787,
                      "name": "UnitPrice",
                      "nameLocations": [
                        "7796:9:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 64934,
                      "src": "7796:9:90"
                    },
                    "referencedDeclaration": 64934,
                    "src": "7796:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UnitPrice_$64934_storage_ptr",
                      "typeString": "struct INSDomainPrice.UnitPrice"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7767:50:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 60981,
            "nodeType": "FunctionDefinition",
            "src": "9088:286:90",
            "nodes": [],
            "body": {
              "id": 60980,
              "nodeType": "Block",
              "src": "9166:208:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60969,
                        "name": "usdWei",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60954,
                        "src": "9285:6:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 60974,
                                "name": "USD_DECIMALS",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60196,
                                "src": "9325:12:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              ],
                              "id": 60973,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9318:6:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint32_$",
                                "typeString": "type(uint32)"
                              },
                              "typeName": {
                                "id": 60972,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "9318:6:90",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 60975,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9318:20:90",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          ],
                          "id": 60971,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9312:5:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_int32_$",
                            "typeString": "type(int32)"
                          },
                          "typeName": {
                            "id": 60970,
                            "name": "int32",
                            "nodeType": "ElementaryTypeName",
                            "src": "9312:5:90",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 60976,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9312:27:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_int32",
                          "typeString": "int32"
                        }
                      },
                      {
                        "hexValue": "3138",
                        "id": 60977,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9360:2:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_18_by_1",
                          "typeString": "int_const 18"
                        },
                        "value": "18"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_int32",
                          "typeString": "int32"
                        },
                        {
                          "typeIdentifier": "t_rational_18_by_1",
                          "typeString": "int_const 18"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 60966,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "-",
                            "prefix": true,
                            "src": "9258:3:90",
                            "subExpression": {
                              "hexValue": "3138",
                              "id": 60965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9259:2:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_18_by_1",
                                "typeString": "int_const 18"
                              },
                              "value": "18"
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_minus_18_by_1",
                              "typeString": "int_const -18"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_minus_18_by_1",
                              "typeString": "int_const -18"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 60961,
                                "name": "_pythIdForRONUSD",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60237,
                                "src": "9205:16:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 60962,
                                "name": "_maxAcceptableAge",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60234,
                                "src": "9223:17:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 60959,
                                "name": "_pyth",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60221,
                                "src": "9179:5:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IPyth_$54836",
                                  "typeString": "contract IPyth"
                                }
                              },
                              "id": 60960,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9185:19:90",
                              "memberName": "getPriceNoOlderThan",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 54768,
                              "src": "9179:25:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_bytes32_$_t_uint256_$returns$_t_struct$_Price_$54869_memory_ptr_$",
                                "typeString": "function (bytes32,uint256) view external returns (struct PythStructs.Price memory)"
                              }
                            },
                            "id": 60963,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9179:62:90",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Price_$54869_memory_ptr",
                              "typeString": "struct PythStructs.Price memory"
                            }
                          },
                          "id": 60964,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9242:7:90",
                          "memberName": "inverse",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 67956,
                          "src": "9179:70:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_struct$_Price_$54869_memory_ptr_$_t_int32_$returns$_t_struct$_Price_$54869_memory_ptr_$attached_to$_t_struct$_Price_$54869_memory_ptr_$",
                            "typeString": "function (struct PythStructs.Price memory,int32) pure returns (struct PythStructs.Price memory)"
                          }
                        },
                        "id": 60967,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [
                          "9252:4:90"
                        ],
                        "names": [
                          "expo"
                        ],
                        "nodeType": "FunctionCall",
                        "src": "9179:85:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Price_$54869_memory_ptr",
                          "typeString": "struct PythStructs.Price memory"
                        }
                      },
                      "id": 60968,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9265:3:90",
                      "memberName": "mul",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 67848,
                      "src": "9179:89:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Price_$54869_memory_ptr_$_t_uint256_$_t_int32_$_t_int32_$returns$_t_uint256_$attached_to$_t_struct$_Price_$54869_memory_ptr_$",
                        "typeString": "function (struct PythStructs.Price memory,uint256,int32,int32) pure returns (uint256)"
                      }
                    },
                    "id": 60978,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [
                      "9277:6:90",
                      "9299:11:90",
                      "9347:11:90"
                    ],
                    "names": [
                      "inpWei",
                      "inpDecimals",
                      "outDecimals"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "9179:190:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 60958,
                  "id": 60979,
                  "nodeType": "Return",
                  "src": "9172:197:90"
                }
              ]
            },
            "baseFunctions": [
              65149
            ],
            "documentation": {
              "id": 60952,
              "nodeType": "StructuredDocumentation",
              "src": "9044:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "7174026e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "convertUSDToRON",
            "nameLocation": "9097:15:90",
            "parameters": {
              "id": 60955,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60954,
                  "mutability": "mutable",
                  "name": "usdWei",
                  "nameLocation": "9121:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60981,
                  "src": "9113:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60953,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9113:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9112:16:90"
            },
            "returnParameters": {
              "id": 60958,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60957,
                  "mutability": "mutable",
                  "name": "ronWei",
                  "nameLocation": "9158:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 60981,
                  "src": "9150:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60956,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9150:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9149:16:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 61007,
            "nodeType": "FunctionDefinition",
            "src": "9422:263:90",
            "nodes": [],
            "body": {
              "id": 61006,
              "nodeType": "Block",
              "src": "9500:185:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60995,
                        "name": "ronWei",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60984,
                        "src": "9596:6:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "3138",
                        "id": 60996,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9623:2:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_18_by_1",
                          "typeString": "int_const 18"
                        },
                        "value": "18"
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 61001,
                                "name": "USD_DECIMALS",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60196,
                                "src": "9659:12:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              ],
                              "id": 61000,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9652:6:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint32_$",
                                "typeString": "type(uint32)"
                              },
                              "typeName": {
                                "id": 60999,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "9652:6:90",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 61002,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9652:20:90",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          ],
                          "id": 60998,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9646:5:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_int32_$",
                            "typeString": "type(int32)"
                          },
                          "typeName": {
                            "id": 60997,
                            "name": "int32",
                            "nodeType": "ElementaryTypeName",
                            "src": "9646:5:90",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 61003,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9646:27:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_int32",
                          "typeString": "int32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_18_by_1",
                          "typeString": "int_const 18"
                        },
                        {
                          "typeIdentifier": "t_int32",
                          "typeString": "int32"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 60991,
                            "name": "_pythIdForRONUSD",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60237,
                            "src": "9539:16:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 60992,
                            "name": "_maxAcceptableAge",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60234,
                            "src": "9557:17:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 60989,
                            "name": "_pyth",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60221,
                            "src": "9513:5:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IPyth_$54836",
                              "typeString": "contract IPyth"
                            }
                          },
                          "id": 60990,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9519:19:90",
                          "memberName": "getPriceNoOlderThan",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 54768,
                          "src": "9513:25:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_bytes32_$_t_uint256_$returns$_t_struct$_Price_$54869_memory_ptr_$",
                            "typeString": "function (bytes32,uint256) view external returns (struct PythStructs.Price memory)"
                          }
                        },
                        "id": 60993,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9513:62:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Price_$54869_memory_ptr",
                          "typeString": "struct PythStructs.Price memory"
                        }
                      },
                      "id": 60994,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9576:3:90",
                      "memberName": "mul",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 67848,
                      "src": "9513:66:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Price_$54869_memory_ptr_$_t_uint256_$_t_int32_$_t_int32_$returns$_t_uint256_$attached_to$_t_struct$_Price_$54869_memory_ptr_$",
                        "typeString": "function (struct PythStructs.Price memory,uint256,int32,int32) pure returns (uint256)"
                      }
                    },
                    "id": 61004,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [
                      "9588:6:90",
                      "9610:11:90",
                      "9633:11:90"
                    ],
                    "names": [
                      "inpWei",
                      "inpDecimals",
                      "outDecimals"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "9513:167:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 60988,
                  "id": 61005,
                  "nodeType": "Return",
                  "src": "9506:174:90"
                }
              ]
            },
            "baseFunctions": [
              65157
            ],
            "documentation": {
              "id": 60982,
              "nodeType": "StructuredDocumentation",
              "src": "9378:41:90",
              "text": " @inheritdoc INSDomainPrice"
            },
            "functionSelector": "037f1769",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "convertRONToUSD",
            "nameLocation": "9431:15:90",
            "parameters": {
              "id": 60985,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60984,
                  "mutability": "mutable",
                  "name": "ronWei",
                  "nameLocation": "9455:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61007,
                  "src": "9447:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60983,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9447:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9446:16:90"
            },
            "returnParameters": {
              "id": 60988,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60987,
                  "mutability": "mutable",
                  "name": "usdWei",
                  "nameLocation": "9492:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61007,
                  "src": "9484:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60986,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9484:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9483:16:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 61054,
            "nodeType": "FunctionDefinition",
            "src": "9783:419:90",
            "nodes": [],
            "body": {
              "id": 61053,
              "nodeType": "Block",
              "src": "10012:190:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 61028,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61025,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61023,
                      "src": "10018:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 61026,
                        "name": "lbHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61011,
                        "src": "10027:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      },
                      "id": 61027,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10036:6:90",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "10027:15:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10018:24:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 61029,
                  "nodeType": "ExpressionStatement",
                  "src": "10018:24:90"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 61047,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 61042,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 61037,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 61032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 61030,
                            "name": "length",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61023,
                            "src": "10052:6:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 61031,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10062:1:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "10052:11:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 61036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 61033,
                              "name": "ronPrices",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61014,
                              "src": "10067:9:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 61034,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "10077:6:90",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "10067:16:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 61035,
                            "name": "length",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61023,
                            "src": "10087:6:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10067:26:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "10052:41:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 61041,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 61038,
                            "name": "proofHashes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61017,
                            "src": "10097:11:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                              "typeString": "bytes32[] calldata"
                            }
                          },
                          "id": 61039,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "10109:6:90",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "10097:18:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 61040,
                          "name": "length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61023,
                          "src": "10119:6:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10097:28:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "10052:73:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 61046,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 61043,
                          "name": "setTypes",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61020,
                          "src": "10129:8:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                            "typeString": "uint256[] calldata"
                          }
                        },
                        "id": 61044,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "10138:6:90",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "10129:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "id": 61045,
                        "name": "length",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61023,
                        "src": "10148:6:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "10129:25:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "10052:102:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 61052,
                  "nodeType": "IfStatement",
                  "src": "10048:150:90",
                  "trueBody": {
                    "id": 61051,
                    "nodeType": "Block",
                    "src": "10156:42:90",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 61048,
                            "name": "InvalidArrayLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64920,
                            "src": "10171:18:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 61049,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10171:20:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 61050,
                        "nodeType": "RevertStatement",
                        "src": "10164:27:90"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 61008,
              "nodeType": "StructuredDocumentation",
              "src": "9689:91:90",
              "text": " @dev Reverts if the arguments of the method {bulkSetDomainPrice} is invalid."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_requireBulkSetDomainPriceArgumentsValid",
            "nameLocation": "9792:40:90",
            "parameters": {
              "id": 61021,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61011,
                  "mutability": "mutable",
                  "name": "lbHashes",
                  "nameLocation": "9857:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61054,
                  "src": "9838:27:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61009,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "9838:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 61010,
                    "nodeType": "ArrayTypeName",
                    "src": "9838:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61014,
                  "mutability": "mutable",
                  "name": "ronPrices",
                  "nameLocation": "9890:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61054,
                  "src": "9871:28:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61012,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "9871:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 61013,
                    "nodeType": "ArrayTypeName",
                    "src": "9871:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61017,
                  "mutability": "mutable",
                  "name": "proofHashes",
                  "nameLocation": "9924:11:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61054,
                  "src": "9905:30:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61015,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "9905:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 61016,
                    "nodeType": "ArrayTypeName",
                    "src": "9905:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61020,
                  "mutability": "mutable",
                  "name": "setTypes",
                  "nameLocation": "9960:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61054,
                  "src": "9941:27:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61018,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "9941:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 61019,
                    "nodeType": "ArrayTypeName",
                    "src": "9941:9:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9832:140:90"
            },
            "returnParameters": {
              "id": 61024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61023,
                  "mutability": "mutable",
                  "name": "length",
                  "nameLocation": "10004:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61054,
                  "src": "9996:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61022,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9996:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9995:16:90"
            },
            "scope": 61316,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 61119,
            "nodeType": "FunctionDefinition",
            "src": "10321:503:90",
            "nodes": [],
            "body": {
              "id": 61118,
              "nodeType": "Block",
              "src": "10507:317:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    61073
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61073,
                      "mutability": "mutable",
                      "name": "usdPrice",
                      "nameLocation": "10521:8:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61118,
                      "src": "10513:16:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 61072,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10513:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61077,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 61075,
                        "name": "ronPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61061,
                        "src": "10548:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 61074,
                      "name": "convertRONToUSD",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61007,
                      "src": "10532:15:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 61076,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10532:25:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10513:44:90"
                },
                {
                  "assignments": [
                    61080
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61080,
                      "mutability": "mutable",
                      "name": "dp",
                      "nameLocation": "10588:2:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61118,
                      "src": "10563:27:90",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                        "typeString": "struct TimestampWrapper"
                      },
                      "typeName": {
                        "id": 61079,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 61078,
                          "name": "TimestampWrapper",
                          "nameLocations": [
                            "10563:16:90"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 67100,
                          "src": "10563:16:90"
                        },
                        "referencedDeclaration": 67100,
                        "src": "10563:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                          "typeString": "struct TimestampWrapper"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61084,
                  "initialValue": {
                    "baseExpression": {
                      "id": 61081,
                      "name": "_dp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60252,
                      "src": "10593:3:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TimestampWrapper_$67100_storage_$",
                        "typeString": "mapping(bytes32 => struct TimestampWrapper storage ref)"
                      }
                    },
                    "id": 61083,
                    "indexExpression": {
                      "id": 61082,
                      "name": "lbHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61059,
                      "src": "10597:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "10593:11:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage",
                      "typeString": "struct TimestampWrapper storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10563:41:90"
                },
                {
                  "expression": {
                    "id": 61092,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61085,
                      "name": "updated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61070,
                      "src": "10610:7:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 61091,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 61086,
                        "name": "forced",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61067,
                        "src": "10620:6:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 61090,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 61087,
                            "name": "dp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61080,
                            "src": "10630:2:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                              "typeString": "struct TimestampWrapper storage pointer"
                            }
                          },
                          "id": 61088,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "10633:5:90",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 67097,
                          "src": "10630:8:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 61089,
                          "name": "usdPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61073,
                          "src": "10641:8:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10630:19:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "10620:29:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "10610:39:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 61093,
                  "nodeType": "ExpressionStatement",
                  "src": "10610:39:90"
                },
                {
                  "condition": {
                    "id": 61094,
                    "name": "updated",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 61070,
                    "src": "10660:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 61117,
                  "nodeType": "IfStatement",
                  "src": "10656:164:90",
                  "trueBody": {
                    "id": 61116,
                    "nodeType": "Block",
                    "src": "10669:151:90",
                    "statements": [
                      {
                        "expression": {
                          "id": 61099,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 61095,
                              "name": "dp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61080,
                              "src": "10677:2:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                                "typeString": "struct TimestampWrapper storage pointer"
                              }
                            },
                            "id": 61097,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "10680:5:90",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 67097,
                            "src": "10677:8:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 61098,
                            "name": "usdPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61073,
                            "src": "10688:8:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10677:19:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 61100,
                        "nodeType": "ExpressionStatement",
                        "src": "10677:19:90"
                      },
                      {
                        "expression": {
                          "id": 61106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 61101,
                              "name": "dp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61080,
                              "src": "10704:2:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                                "typeString": "struct TimestampWrapper storage pointer"
                              }
                            },
                            "id": 61103,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "10707:9:90",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 67099,
                            "src": "10704:12:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 61104,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "10719:5:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 61105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "10725:9:90",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "10719:15:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10704:30:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 61107,
                        "nodeType": "ExpressionStatement",
                        "src": "10704:30:90"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 61109,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61057,
                              "src": "10766:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 61110,
                              "name": "lbHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61059,
                              "src": "10776:6:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 61111,
                              "name": "usdPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61073,
                              "src": "10784:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 61112,
                              "name": "proofHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61063,
                              "src": "10794:9:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 61113,
                              "name": "setType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61065,
                              "src": "10805:7:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 61108,
                            "name": "DomainPriceUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64979,
                            "src": "10747:18:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$",
                              "typeString": "function (address,bytes32,uint256,bytes32,uint256)"
                            }
                          },
                          "id": 61114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10747:66:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 61115,
                        "nodeType": "EmitStatement",
                        "src": "10742:71:90"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 61055,
              "nodeType": "StructuredDocumentation",
              "src": "10206:112:90",
              "text": " @dev Helper method to set domain price.\n Emits an event {DomainPriceUpdated} optionally."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setDomainPrice",
            "nameLocation": "10330:15:90",
            "parameters": {
              "id": 61068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61057,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "10359:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61119,
                  "src": "10351:16:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61056,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10351:7:90",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61059,
                  "mutability": "mutable",
                  "name": "lbHash",
                  "nameLocation": "10381:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61119,
                  "src": "10373:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 61058,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "10373:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61061,
                  "mutability": "mutable",
                  "name": "ronPrice",
                  "nameLocation": "10401:8:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61119,
                  "src": "10393:16:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61060,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10393:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61063,
                  "mutability": "mutable",
                  "name": "proofHash",
                  "nameLocation": "10423:9:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61119,
                  "src": "10415:17:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 61062,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "10415:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61065,
                  "mutability": "mutable",
                  "name": "setType",
                  "nameLocation": "10446:7:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61119,
                  "src": "10438:15:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61064,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10438:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61067,
                  "mutability": "mutable",
                  "name": "forced",
                  "nameLocation": "10464:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61119,
                  "src": "10459:11:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61066,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10459:4:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10345:129:90"
            },
            "returnParameters": {
              "id": 61071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61070,
                  "mutability": "mutable",
                  "name": "updated",
                  "nameLocation": "10498:7:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61119,
                  "src": "10493:12:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61069,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10493:4:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10492:14:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 61136,
            "nodeType": "FunctionDefinition",
            "src": "10926:121:90",
            "nodes": [],
            "body": {
              "id": 61135,
              "nodeType": "Block",
              "src": "10972:75:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 61127,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61125,
                      "name": "_taxRatio",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60228,
                      "src": "10978:9:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61126,
                      "name": "ratio",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61122,
                      "src": "10990:5:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10978:17:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 61128,
                  "nodeType": "ExpressionStatement",
                  "src": "10978:17:90"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 61130,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 52298,
                          "src": "11022:10:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 61131,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11022:12:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 61132,
                        "name": "ratio",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61122,
                        "src": "11036:5:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 61129,
                      "name": "TaxRatioUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64941,
                      "src": "11006:15:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 61133,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11006:36:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 61134,
                  "nodeType": "EmitStatement",
                  "src": "11001:41:90"
                }
              ]
            },
            "documentation": {
              "id": 61120,
              "nodeType": "StructuredDocumentation",
              "src": "10828:95:90",
              "text": " @dev Sets renewal reservation ratio.\n Emits an event {TaxRatioUpdated}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setTaxRatio",
            "nameLocation": "10935:12:90",
            "parameters": {
              "id": 61123,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61122,
                  "mutability": "mutable",
                  "name": "ratio",
                  "nameLocation": "10956:5:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61136,
                  "src": "10948:13:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61121,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10948:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10947:15:90"
            },
            "returnParameters": {
              "id": 61124,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10972:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 61157,
            "nodeType": "FunctionDefinition",
            "src": "11157:243:90",
            "nodes": [],
            "body": {
              "id": 61156,
              "nodeType": "Block",
              "src": "11244:156:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 61145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61143,
                      "name": "_dpDownScaler",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60241,
                      "src": "11250:13:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage",
                        "typeString": "struct PeriodScaler storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61144,
                      "name": "domainPriceScaleRule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61140,
                      "src": "11266:20:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                        "typeString": "struct PeriodScaler calldata"
                      }
                    },
                    "src": "11250:36:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage",
                      "typeString": "struct PeriodScaler storage ref"
                    }
                  },
                  "id": 61146,
                  "nodeType": "ExpressionStatement",
                  "src": "11250:36:90"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 61148,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 52298,
                          "src": "11325:10:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 61149,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11325:12:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 61150,
                          "name": "domainPriceScaleRule",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61140,
                          "src": "11339:20:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                            "typeString": "struct PeriodScaler calldata"
                          }
                        },
                        "id": 61151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "11360:5:90",
                        "memberName": "ratio",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 67174,
                        "src": "11339:26:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint192",
                          "typeString": "uint192"
                        }
                      },
                      {
                        "expression": {
                          "id": 61152,
                          "name": "domainPriceScaleRule",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61140,
                          "src": "11367:20:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                            "typeString": "struct PeriodScaler calldata"
                          }
                        },
                        "id": 61153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "11388:6:90",
                        "memberName": "period",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 67176,
                        "src": "11367:27:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint192",
                          "typeString": "uint192"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 61147,
                      "name": "DomainPriceScaleRuleUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64988,
                      "src": "11297:27:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint192_$_t_uint64_$returns$__$",
                        "typeString": "function (address,uint192,uint64)"
                      }
                    },
                    "id": 61154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11297:98:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 61155,
                  "nodeType": "EmitStatement",
                  "src": "11292:103:90"
                }
              ]
            },
            "documentation": {
              "id": 61137,
              "nodeType": "StructuredDocumentation",
              "src": "11051:103:90",
              "text": " @dev Sets domain price scale rule.\n Emits events {DomainPriceScaleRuleUpdated}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setDomainPriceScaleRule",
            "nameLocation": "11166:24:90",
            "parameters": {
              "id": 61141,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61140,
                  "mutability": "mutable",
                  "name": "domainPriceScaleRule",
                  "nameLocation": "11213:20:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61157,
                  "src": "11191:42:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PeriodScaler_$67177_calldata_ptr",
                    "typeString": "struct PeriodScaler"
                  },
                  "typeName": {
                    "id": 61139,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61138,
                      "name": "PeriodScaler",
                      "nameLocations": [
                        "11191:12:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67177,
                      "src": "11191:12:90"
                    },
                    "referencedDeclaration": 67177,
                    "src": "11191:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage_ptr",
                      "typeString": "struct PeriodScaler"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11190:44:90"
            },
            "returnParameters": {
              "id": 61142,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11244:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 61241,
            "nodeType": "FunctionDefinition",
            "src": "11557:754:90",
            "nodes": [],
            "body": {
              "id": 61240,
              "nodeType": "Block",
              "src": "11634:677:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    61166
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61166,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "11648:8:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61240,
                      "src": "11640:16:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 61165,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11640:7:90",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61169,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 61167,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52298,
                      "src": "11659:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 61168,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11659:12:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11640:31:90"
                },
                {
                  "assignments": [
                    61172
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61172,
                      "mutability": "mutable",
                      "name": "renewalFee",
                      "nameLocation": "11695:10:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61240,
                      "src": "11677:28:90",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee"
                      },
                      "typeName": {
                        "id": 61171,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 61170,
                          "name": "RenewalFee",
                          "nameLocations": [
                            "11677:10:90"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 64929,
                          "src": "11677:10:90"
                        },
                        "referencedDeclaration": 64929,
                        "src": "11677:10:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RenewalFee_$64929_storage_ptr",
                          "typeString": "struct INSDomainPrice.RenewalFee"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61173,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11677:28:90"
                },
                {
                  "assignments": [
                    61175
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61175,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "11719:6:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61240,
                      "src": "11711:14:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 61174,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11711:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61178,
                  "initialValue": {
                    "expression": {
                      "id": 61176,
                      "name": "renewalFees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61162,
                      "src": "11728:11:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee calldata[] calldata"
                      }
                    },
                    "id": 61177,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "11740:6:90",
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "11728:18:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11711:35:90"
                },
                {
                  "assignments": [
                    61180
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61180,
                      "mutability": "mutable",
                      "name": "maxRenewalFeeLength",
                      "nameLocation": "11760:19:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61240,
                      "src": "11752:27:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 61179,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11752:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61182,
                  "initialValue": {
                    "id": 61181,
                    "name": "_rnfMaxLength",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 60231,
                    "src": "11782:13:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11752:43:90"
                },
                {
                  "body": {
                    "id": 61224,
                    "nodeType": "Block",
                    "src": "11831:308:90",
                    "statements": [
                      {
                        "expression": {
                          "id": 61193,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 61189,
                            "name": "renewalFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61172,
                            "src": "11839:10:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                              "typeString": "struct INSDomainPrice.RenewalFee memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 61190,
                              "name": "renewalFees",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61162,
                              "src": "11852:11:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct INSDomainPrice.RenewalFee calldata[] calldata"
                              }
                            },
                            "id": 61192,
                            "indexExpression": {
                              "id": 61191,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61184,
                              "src": "11864:1:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "11852:14:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RenewalFee_$64929_calldata_ptr",
                              "typeString": "struct INSDomainPrice.RenewalFee calldata"
                            }
                          },
                          "src": "11839:27:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                            "typeString": "struct INSDomainPrice.RenewalFee memory"
                          }
                        },
                        "id": 61194,
                        "nodeType": "ExpressionStatement",
                        "src": "11839:27:90"
                      },
                      {
                        "expression": {
                          "id": 61202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 61195,
                            "name": "maxRenewalFeeLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61180,
                            "src": "11874:19:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 61198,
                                "name": "maxRenewalFeeLength",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61180,
                                "src": "11905:19:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 61199,
                                  "name": "renewalFee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 61172,
                                  "src": "11926:10:90",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                                    "typeString": "struct INSDomainPrice.RenewalFee memory"
                                  }
                                },
                                "id": 61200,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "11937:11:90",
                                "memberName": "labelLength",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 64926,
                                "src": "11926:22:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 61196,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53549,
                                "src": "11896:4:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$53549_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 61197,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "11901:3:90",
                              "memberName": "max",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 52708,
                              "src": "11896:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 61201,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11896:53:90",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11874:75:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 61203,
                        "nodeType": "ExpressionStatement",
                        "src": "11874:75:90"
                      },
                      {
                        "expression": {
                          "id": 61210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 61204,
                              "name": "_rnFee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60246,
                              "src": "11957:6:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 61207,
                            "indexExpression": {
                              "expression": {
                                "id": 61205,
                                "name": "renewalFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61172,
                                "src": "11964:10:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                                  "typeString": "struct INSDomainPrice.RenewalFee memory"
                                }
                              },
                              "id": 61206,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "11975:11:90",
                              "memberName": "labelLength",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 64926,
                              "src": "11964:22:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11957:30:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 61208,
                              "name": "renewalFee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61172,
                              "src": "11990:10:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                                "typeString": "struct INSDomainPrice.RenewalFee memory"
                              }
                            },
                            "id": 61209,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12001:3:90",
                            "memberName": "fee",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 64928,
                            "src": "11990:14:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11957:47:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 61211,
                        "nodeType": "ExpressionStatement",
                        "src": "11957:47:90"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 61213,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61166,
                              "src": "12043:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 61214,
                                "name": "renewalFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61172,
                                "src": "12053:10:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                                  "typeString": "struct INSDomainPrice.RenewalFee memory"
                                }
                              },
                              "id": 61215,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "12064:11:90",
                              "memberName": "labelLength",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 64926,
                              "src": "12053:22:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 61216,
                                "name": "renewalFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61172,
                                "src": "12077:10:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RenewalFee_$64929_memory_ptr",
                                  "typeString": "struct INSDomainPrice.RenewalFee memory"
                                }
                              },
                              "id": 61217,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "12088:3:90",
                              "memberName": "fee",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 64928,
                              "src": "12077:14:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 61212,
                            "name": "RenewalFeeByLengthUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64957,
                            "src": "12017:25:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 61218,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12017:75:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 61219,
                        "nodeType": "EmitStatement",
                        "src": "12012:80:90"
                      },
                      {
                        "id": 61223,
                        "nodeType": "UncheckedBlock",
                        "src": "12101:32:90",
                        "statements": [
                          {
                            "expression": {
                              "id": 61221,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "12121:3:90",
                              "subExpression": {
                                "id": 61220,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61184,
                                "src": "12123:1:90",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 61222,
                            "nodeType": "ExpressionStatement",
                            "src": "12121:3:90"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 61188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 61186,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61184,
                      "src": "11818:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 61187,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61175,
                      "src": "11822:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11818:10:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 61225,
                  "initializationExpression": {
                    "assignments": [
                      61184
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 61184,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "11815:1:90",
                        "nodeType": "VariableDeclaration",
                        "scope": 61225,
                        "src": "11807:9:90",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 61183,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11807:7:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 61185,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "11807:9:90"
                  },
                  "nodeType": "ForStatement",
                  "src": "11802:337:90"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 61228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 61226,
                      "name": "maxRenewalFeeLength",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61180,
                      "src": "12149:19:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 61227,
                      "name": "_rnfMaxLength",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60231,
                      "src": "12172:13:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12149:36:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 61239,
                  "nodeType": "IfStatement",
                  "src": "12145:162:90",
                  "trueBody": {
                    "id": 61238,
                    "nodeType": "Block",
                    "src": "12187:120:90",
                    "statements": [
                      {
                        "expression": {
                          "id": 61231,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 61229,
                            "name": "_rnfMaxLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60231,
                            "src": "12195:13:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 61230,
                            "name": "maxRenewalFeeLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61180,
                            "src": "12211:19:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12195:35:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 61232,
                        "nodeType": "ExpressionStatement",
                        "src": "12195:35:90"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 61234,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61166,
                              "src": "12270:8:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 61235,
                              "name": "maxRenewalFeeLength",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61180,
                              "src": "12280:19:90",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 61233,
                            "name": "MaxRenewalFeeLengthUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64948,
                            "src": "12243:26:90",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 61236,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12243:57:90",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 61237,
                        "nodeType": "EmitStatement",
                        "src": "12238:62:90"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 61158,
              "nodeType": "StructuredDocumentation",
              "src": "11404:150:90",
              "text": " @dev Sets renewal fee.\n Emits events {RenewalFeeByLengthUpdated}.\n Emits an event {MaxRenewalFeeLengthUpdated} optionally."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setRenewalFeeByLengths",
            "nameLocation": "11566:23:90",
            "parameters": {
              "id": 61163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61162,
                  "mutability": "mutable",
                  "name": "renewalFees",
                  "nameLocation": "11612:11:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61241,
                  "src": "11590:33:90",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct INSDomainPrice.RenewalFee[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61160,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 61159,
                        "name": "RenewalFee",
                        "nameLocations": [
                          "11590:10:90"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 64929,
                        "src": "11590:10:90"
                      },
                      "referencedDeclaration": 64929,
                      "src": "11590:10:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_RenewalFee_$64929_storage_ptr",
                        "typeString": "struct INSDomainPrice.RenewalFee"
                      }
                    },
                    "id": 61161,
                    "nodeType": "ArrayTypeName",
                    "src": "11590:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_RenewalFee_$64929_storage_$dyn_storage_ptr",
                      "typeString": "struct INSDomainPrice.RenewalFee[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11589:35:90"
            },
            "returnParameters": {
              "id": 61164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11634:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 61273,
            "nodeType": "FunctionDefinition",
            "src": "12412:296:90",
            "nodes": [],
            "body": {
              "id": 61272,
              "nodeType": "Block",
              "src": "12514:194:90",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 61254,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61252,
                      "name": "_pyth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60221,
                      "src": "12520:5:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IPyth_$54836",
                        "typeString": "contract IPyth"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61253,
                      "name": "pyth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61245,
                      "src": "12528:4:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IPyth_$54836",
                        "typeString": "contract IPyth"
                      }
                    },
                    "src": "12520:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPyth_$54836",
                      "typeString": "contract IPyth"
                    }
                  },
                  "id": 61255,
                  "nodeType": "ExpressionStatement",
                  "src": "12520:12:90"
                },
                {
                  "expression": {
                    "id": 61258,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61256,
                      "name": "_maxAcceptableAge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60234,
                      "src": "12538:17:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61257,
                      "name": "maxAcceptableAge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61247,
                      "src": "12558:16:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12538:36:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 61259,
                  "nodeType": "ExpressionStatement",
                  "src": "12538:36:90"
                },
                {
                  "expression": {
                    "id": 61262,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61260,
                      "name": "_pythIdForRONUSD",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60237,
                      "src": "12580:16:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61261,
                      "name": "pythIdForRONUSD",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61249,
                      "src": "12599:15:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "12580:34:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 61263,
                  "nodeType": "ExpressionStatement",
                  "src": "12580:34:90"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 61265,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 52298,
                          "src": "12649:10:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 61266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12649:12:90",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 61267,
                        "name": "pyth",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61245,
                        "src": "12663:4:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPyth_$54836",
                          "typeString": "contract IPyth"
                        }
                      },
                      {
                        "id": 61268,
                        "name": "maxAcceptableAge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61247,
                        "src": "12669:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 61269,
                        "name": "pythIdForRONUSD",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61249,
                        "src": "12687:15:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_contract$_IPyth_$54836",
                          "typeString": "contract IPyth"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 61264,
                      "name": "PythOracleConfigUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65000,
                      "src": "12625:23:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_contract$_IPyth_$54836_$_t_uint256_$_t_bytes32_$returns$__$",
                        "typeString": "function (address,contract IPyth,uint256,bytes32)"
                      }
                    },
                    "id": 61270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12625:78:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 61271,
                  "nodeType": "EmitStatement",
                  "src": "12620:83:90"
                }
              ]
            },
            "documentation": {
              "id": 61242,
              "nodeType": "StructuredDocumentation",
              "src": "12315:94:90",
              "text": " @dev Sets Pyth Oracle config.\n Emits events {PythOracleConfigUpdated}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setPythOracleConfig",
            "nameLocation": "12421:20:90",
            "parameters": {
              "id": 61250,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61245,
                  "mutability": "mutable",
                  "name": "pyth",
                  "nameLocation": "12448:4:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61273,
                  "src": "12442:10:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPyth_$54836",
                    "typeString": "contract IPyth"
                  },
                  "typeName": {
                    "id": 61244,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61243,
                      "name": "IPyth",
                      "nameLocations": [
                        "12442:5:90"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54836,
                      "src": "12442:5:90"
                    },
                    "referencedDeclaration": 54836,
                    "src": "12442:5:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPyth_$54836",
                      "typeString": "contract IPyth"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61247,
                  "mutability": "mutable",
                  "name": "maxAcceptableAge",
                  "nameLocation": "12462:16:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61273,
                  "src": "12454:24:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61246,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12454:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61249,
                  "mutability": "mutable",
                  "name": "pythIdForRONUSD",
                  "nameLocation": "12488:15:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61273,
                  "src": "12480:23:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 61248,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12480:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12441:63:90"
            },
            "returnParameters": {
              "id": 61251,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12514:0:90"
            },
            "scope": 61316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 61315,
            "nodeType": "FunctionDefinition",
            "src": "12821:361:90",
            "nodes": [],
            "body": {
              "id": 61314,
              "nodeType": "Block",
              "src": "12894:288:90",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    61283
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61283,
                      "mutability": "mutable",
                      "name": "dp",
                      "nameLocation": "12925:2:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61314,
                      "src": "12900:27:90",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                        "typeString": "struct TimestampWrapper"
                      },
                      "typeName": {
                        "id": 61282,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 61281,
                          "name": "TimestampWrapper",
                          "nameLocations": [
                            "12900:16:90"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 67100,
                          "src": "12900:16:90"
                        },
                        "referencedDeclaration": 67100,
                        "src": "12900:16:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                          "typeString": "struct TimestampWrapper"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61287,
                  "initialValue": {
                    "baseExpression": {
                      "id": 61284,
                      "name": "_dp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60252,
                      "src": "12930:3:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TimestampWrapper_$67100_storage_$",
                        "typeString": "mapping(bytes32 => struct TimestampWrapper storage ref)"
                      }
                    },
                    "id": 61286,
                    "indexExpression": {
                      "id": 61285,
                      "name": "lbHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61276,
                      "src": "12934:6:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "12930:11:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage",
                      "typeString": "struct TimestampWrapper storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12900:41:90"
                },
                {
                  "assignments": [
                    61289
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61289,
                      "mutability": "mutable",
                      "name": "lastSyncedAt",
                      "nameLocation": "12955:12:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61314,
                      "src": "12947:20:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 61288,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12947:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61292,
                  "initialValue": {
                    "expression": {
                      "id": 61290,
                      "name": "dp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61283,
                      "src": "12970:2:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                        "typeString": "struct TimestampWrapper storage pointer"
                      }
                    },
                    "id": 61291,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "12973:9:90",
                    "memberName": "timestamp",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 67099,
                    "src": "12970:12:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12947:35:90"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 61295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 61293,
                      "name": "lastSyncedAt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61289,
                      "src": "12992:12:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 61294,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "13008:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12992:17:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 61298,
                  "nodeType": "IfStatement",
                  "src": "12988:31:90",
                  "trueBody": {
                    "expression": {
                      "hexValue": "30",
                      "id": 61296,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "13018:1:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "functionReturnParameters": 61280,
                    "id": 61297,
                    "nodeType": "Return",
                    "src": "13011:8:90"
                  }
                },
                {
                  "assignments": [
                    61300
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 61300,
                      "mutability": "mutable",
                      "name": "passedDuration",
                      "nameLocation": "13034:14:90",
                      "nodeType": "VariableDeclaration",
                      "scope": 61314,
                      "src": "13026:22:90",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 61299,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13026:7:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 61305,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 61304,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 61301,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "13051:5:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 61302,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "13057:9:90",
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "13051:15:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 61303,
                      "name": "lastSyncedAt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61289,
                      "src": "13069:12:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13051:30:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13026:55:90"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 61308,
                          "name": "dp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61283,
                          "src": "13123:2:90",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TimestampWrapper_$67100_storage_ptr",
                            "typeString": "struct TimestampWrapper storage pointer"
                          }
                        },
                        "id": 61309,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "13126:5:90",
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 67097,
                        "src": "13123:8:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 61310,
                        "name": "MAX_PERCENTAGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60200,
                        "src": "13139:14:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 61311,
                        "name": "passedDuration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61300,
                        "src": "13160:14:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 61306,
                        "name": "_dpDownScaler",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60241,
                        "src": "13094:13:90",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PeriodScaler_$67177_storage",
                          "typeString": "struct PeriodScaler storage ref"
                        }
                      },
                      "id": 61307,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "13108:9:90",
                      "memberName": "scaleDown",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 67267,
                      "src": "13094:23:90",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_PeriodScaler_$67177_memory_ptr_$_t_uint256_$_t_uint64_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_PeriodScaler_$67177_memory_ptr_$",
                        "typeString": "function (struct PeriodScaler memory,uint256,uint64,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 61312,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [
                      "13120:1:90",
                      "13133:4:90",
                      "13155:3:90"
                    ],
                    "names": [
                      "v",
                      "maxR",
                      "dur"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "13094:83:90",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 61280,
                  "id": 61313,
                  "nodeType": "Return",
                  "src": "13087:90:90"
                }
              ]
            },
            "documentation": {
              "id": 61274,
              "nodeType": "StructuredDocumentation",
              "src": "12712:106:90",
              "text": " @dev Returns the current domain price applied the business rule: deduced x% each y seconds."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getDomainPrice",
            "nameLocation": "12830:15:90",
            "parameters": {
              "id": 61277,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61276,
                  "mutability": "mutable",
                  "name": "lbHash",
                  "nameLocation": "12854:6:90",
                  "nodeType": "VariableDeclaration",
                  "scope": 61315,
                  "src": "12846:14:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 61275,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12846:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12845:16:90"
            },
            "returnParameters": {
              "id": 61280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61279,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 61315,
                  "src": "12885:7:90",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61278,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12885:7:90",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12884:9:90"
            },
            "scope": 61316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 60174,
              "name": "Initializable",
              "nameLocations": [
                "1005:13:90"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 50240,
              "src": "1005:13:90"
            },
            "id": 60175,
            "nodeType": "InheritanceSpecifier",
            "src": "1005:13:90"
          },
          {
            "baseName": {
              "id": 60176,
              "name": "AccessControlEnumerable",
              "nameLocations": [
                "1020:23:90"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48967,
              "src": "1020:23:90"
            },
            "id": 60177,
            "nodeType": "InheritanceSpecifier",
            "src": "1020:23:90"
          },
          {
            "baseName": {
              "id": 60178,
              "name": "INSDomainPrice",
              "nameLocations": [
                "1045:14:90"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 65182,
              "src": "1045:14:90"
            },
            "id": 60179,
            "nodeType": "InheritanceSpecifier",
            "src": "1045:14:90"
          }
        ],
        "canonicalName": "RNSDomainPrice",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          61316,
          65182,
          48967,
          48842,
          52671,
          52683,
          49065,
          49040,
          52308,
          50240
        ],
        "name": "RNSDomainPrice",
        "nameLocation": "987:14:90",
        "scope": 61317,
        "usedErrors": [
          64920,
          64922,
          64924,
          67184,
          67799,
          67807
        ],
        "usedEvents": [
          48979,
          48988,
          48997,
          50086,
          64941,
          64948,
          64957,
          64966,
          64979,
          64988,
          65000
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 21479653,
  "bytecode": "0x60806040526200000e62000014565b620000d5565b600054610100900460ff1615620000815760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000d3576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61316780620000e56000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80635ef32e2c11610104578063ca15c873116100a2578063e229a67011610071578063e229a670146104b2578063f4651f49146104c5578063f5b541a6146104e6578063fe303ebf1461050d57600080fd5b8063ca15c87314610466578063d40ed58c14610479578063d547741f1461048c578063dd28776d1461049f57600080fd5b80637174026e116100de5780637174026e1461040d5780639010d07c1461042057806391d148541461044b578063a217fddf1461045e57600080fd5b80635ef32e2c146103b6578063700213c8146103be578063713a69a7146103e557600080fd5b80632f6ee6951161017c5780634c255c971161014b5780634c255c971461034f57806353faf90914610370578063599eaabf146103905780635c68c830146103a357600080fd5b80632f6ee695146102b757806335feb741146102d157806336568abe146102e457806339e47da7146102f757600080fd5b8063248a9ca3116101b8578063248a9ca31461023d57806328dd3065146102615780632be09ecc146102765780632f2ff15d146102a457600080fd5b806301ffc9a7146101df578063037f1769146102075780630a44f51f14610228575b600080fd5b6101f26101ed36600461236d565b610520565b60405190151581526020015b60405180910390f35b61021a610215366004612397565b61054b565b6040519081526020016101fe565b6102306105dd565b6040516101fe91906123b0565b61021a61024b366004612397565b6000908152600160208190526040909120015490565b61027461026f366004612427565b6106ba565b005b603554603954603a54604080516001600160a01b0390941684526020840192909252908201526060016101fe565b6102746102b236600461245c565b6106d6565b6102bf601281565b60405160ff90911681526020016101fe565b6102746102df3660046124d0565b610701565b6102746102f236600461245c565b610716565b604080518082018252600080825260209182015281518083018352603b546001600160c01b0381168083526001600160401b03600160c01b9092048216928401928352845190815291511691810191909152016101fe565b61035861271081565b6040516001600160401b0390911681526020016101fe565b61038361037e366004612555565b610799565b6040516101fe9190612618565b61027461039e366004612555565b6108d2565b61021a6103b136600461265e565b6109a2565b60375461021a565b61021a7f033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad81565b6103f86103f33660046127fe565b610a20565b604080519283526020830191909152016101fe565b61021a61041b366004612397565b610a4c565b61043361042e366004612832565b610adf565b6040516001600160a01b0390911681526020016101fe565b6101f261045936600461245c565b610afe565b61021a600081565b61021a610474366004612397565b610b29565b61027461048736600461286c565b610b40565b61027461049a36600461245c565b610d08565b6102746104ad366004612945565b610d2e565b6102746104c03660046129b0565b610e4c565b6104d86104d33660046129cc565b610e60565b6040516101fe929190612a10565b61021a7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b61027461051b366004612397565b611216565b60006001600160e01b03198216635a05180f60e01b148061054557506105458261122a565b92915050565b603554603a5460395460405163052571af60e51b815260009361054593869360129384936001600160a01b03169263a4ae35e09261059492600401918252602082015260400190565b608060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190612a4b565b92919061125f565b603854606090806001600160401b038111156105fb576105fb6126cf565b60405190808252806020026020018201604052801561064057816020015b60408051808201909152600080825260208201528152602001906001900390816106195790505b5091506000805b828110156106b4578060010191508184828151811061066857610668612ab8565b60200260200101516000018181525050603c60008381526020019081526020016000205484828151811061069e5761069e612ab8565b6020908102919091018101510152600101610647565b50505090565b60006106c5816112a0565b6106d08484846112ad565b50505050565b600082815260016020819052604090912001546106f2816112a0565b6106fc838361131f565b505050565b600061070c816112a0565b6106fc8383611341565b6001600160a01b038116331461078b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610795828261145a565b5050565b60607f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9296107c5816112a0565b60006107d78b8b8b8b8b8b8b8b61147c565b905033816001600160401b038111156107f2576107f26126cf565b60405190808252806020026020018201604052801561081b578160200160208202803683370190505b50935060005b828110156108c257610898828e8e8481811061083f5761083f612ab8565b905060200201358d8d8581811061085857610858612ab8565b905060200201358c8c8681811061087157610871612ab8565b905060200201358b8b8781811061088a5761088a612ab8565b9050602002013560006114ca565b8582815181106108aa576108aa612ab8565b91151560209283029190910190910152600101610821565b5050505098975050505050505050565b7f033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad6108fc816112a0565b600061090e8a8a8a8a8a8a8a8a61147c565b90503360005b828110156109945761098b828d8d8481811061093257610932612ab8565b905060200201358c8c8581811061094b5761094b612ab8565b905060200201358b8b8681811061096457610964612ab8565b905060200201358a8a8781811061097d5761097d612ab8565b9050602002013560016114ca565b50600101610914565b505050505050505050505050565b6000603e60006109e785858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155992505050565b815260200190815260200160002054905080600003610a1957604051635421761560e11b815260040160405180910390fd5b1992915050565b600080610a3a610a3584805160209091012090565b611564565b9150610a4582610a4c565b9050915091565b603554603a5460395460405163052571af60e51b81526004810192909252602482015260009161054591849160129182916105d591601119916001600160a01b03169063a4ae35e090604401608060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190612a4b565b906115de565b6000828152600260205260408120610af79083611738565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081815260026020526040812061054590611744565b600054610100900460ff1615808015610b605750600054600160ff909116105b80610b7a5750303b158015610b7a575060005460ff166001145b610bdd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610782565b6000805460ff191660011790558015610c00576000805461ff0019166101001790555b897f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92960005b82811015610c6557610c5d828f8f84818110610c4357610c43612ab8565b9050602002016020810190610c589190612ace565b61174e565b600101610c25565b50603680546001600160a01b0319166001600160a01b038816179055610c8c60008f61174e565b610c968b8b611341565b610c9f89611758565b610ca88861178d565b610cb38786866112ad565b50508015610994576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050505050505050565b60008281526001602081905260409091200154610d24816112a0565b6106fc838361145a565b7f033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad610d58816112a0565b83801580610d665750808314155b15610d8457604051634ec4810560e11b815260040160405180910390fd5b600033815b83811015610e4157868682818110610da357610da3612ab8565b9050602002013519925082603e60008b8b85818110610dc457610dc4612ab8565b90506020020135815260200190815260200160002081905550888882818110610def57610def612ab8565b90506020020135826001600160a01b03167fb52d278cb3ef3b003bdfb385ce2eb23a83eb6d713724abfba1acaa16ccf6621485604051610e3191815260200190565b60405180910390a3600101610d89565b505050505050505050565b6000610e57816112a0565b6107958261178d565b604080518082019091526000808252602082015260408051808201909152600080825260208201526000610e9385611809565b855160208701209091506000906000818152603e60205260409020549091508015610eca57610ec3811987612b01565b85526111e9565b6000603c6000610edc866038546118f7565b81526020019081526020016000205490508087610ef99190612b01565b86526000610f387fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d6888a6000918252805160209182012090526040902090565b6036546040516329fc8caf60e11b8152600481018390529192506001600160a01b03169081906353f9195e90602401602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190612b28565b156111e5576000816001600160a01b0316638c8433146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190612b43565b905060006110ac826001600160a01b03166303e9e609866040518263ffffffff1660e01b815260040161104691815260200190565b600060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108b9190810190612bea565b60200151604001516001600160401b03168c6001600160401b03801661190d565b6040516378bd793560e01b8152600481018690529091506000906001600160a01b038516906378bd79359060240160e060405180830381865afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b9190612cf1565b5060408101516060015190915080158015906111a95750846001600160a01b0316630afe1bb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190612d8e565b6001600160401b03166111a78285612dab565b115b156111c757604051631bb03f9d60e01b815260040160405180910390fd5b6111de6037546111d68b611564565b612710611943565b8b52505050505b5050505b83516111f490610a4c565b6020850152845161120490610a4c565b60208601525092959194509092505050565b6000611221816112a0565b61079582611758565b60006001600160e01b03198216637965db0b60e01b148061054557506301ffc9a760e01b6001600160e01b0319831614610545565b600061129584611285876000015160070b8860400151866112809190612dbe565b611a2d565b611290600187611a2d565b611943565b90505b949350505050565b6112aa8133611a87565b50565b603580546001600160a01b0319166001600160a01b0385169081179091556039839055603a8290558190336001600160a01b03167f671083457675651266070f50f1438ef8190b7da64d38f16f5117246236b7dd5b8560405161131291815260200190565b60405180910390a4505050565b6113298282611ae0565b60008281526002602052604090206106fc9082611b4b565b60408051808201909152600080825260208201523390603854839060005b8281101561140c5786868281811061137957611379612ab8565b90506040020180360381019061138f9190612de5565b935061139f828560000151611b60565b6020808601805187516000908152603c90935260409283902055865190519151929450916001600160a01b038816917f85211e946be6d537cd1b22a183d04151d4e5d0818e1ce75d2e5ebaecba0a5a77916113fc91815260200190565b60405180910390a360010161135f565b50603854811461145257603881905560405181906001600160a01b038616907f7e7c3a4273ac1af351af63a82e91a8335bcb389ba681375a32dbe4455d0d474b90600090a35b505050505050565b6114648282611b6f565b60008281526002602052604090206106fc9082611bd6565b8680158061148a5750858114155b806114955750838114155b806114a05750818114155b156114be57604051634ec4810560e11b815260040160405180910390fd5b98975050505050505050565b6000806114d68661054b565b6000888152603d6020526040902090915083806114f35750805482115b9250821561154d57818155426001820155604080518381526020810187905287918a916001600160a01b038d16917f60d5fd6d2284807447aae62f93c05517a647b8e8479c3af2c27ee1d1c85b540f910160405180910390a45b50509695505050505050565b805160209091012090565b6000818152603d602052604081206001810154808303611588575060009392505050565b60006115948242612dab565b835460408051808201909152603b546001600160c01b0381168252600160c01b90046001600160401b031660208201529192506115d5919061271084611beb565b95945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915260006116176001856040015161128090612e17565b90506001600160ff1b0381111561164d576040808501519051633e87ca5d60e11b815260039190910b6004820152602401610782565b600061165d600161128086612e17565b90506001600160ff1b0381111561168d57604051633e87ca5d60e11b8152600385900b6004820152602401610782565b845160009060070b61169f8385612e3a565b6116a99190612e80565b9050677fffffffffffffff8113156116f557604086810151875191516329b2fb5560e11b8152600391820b60048201529087900b602482015260079190910b6044820152606401610782565b60405180608001604052808260070b815260200187602001516001600160401b031681526020018660030b81526020018760600151815250935050505092915050565b6000610af78383611cc1565b6000610545825490565b610795828261131f565b6037819055604051819033907f1e97e29c863545fad1ce79512b4deb3f0b7d30c3356bc7bbbd6588c9e68cf07390600090a350565b80603b61179a8282612ec3565b503390507fa7f38b74141f9a2ac1b02640ded2b98431ef77f8cf2e3ade85c71d6c8420dc646117cc6020840184612f05565b6117dc6040850160208601612f22565b604080516001600160c01b0390931683526001600160401b0390911660208301520160405180910390a250565b600080600080845190505b808310156118ef57600085848151811061183057611830612ab8565b01602001516001600160f81b0319169050600160ff1b811015611858576001840193506118e3565b600760fd1b6001600160f81b031982161015611879576002840193506118e3565b600f60fc1b6001600160f81b03198216101561189a576003840193506118e3565b601f60fb1b6001600160f81b0319821610156118bb576004840193506118e3565b603f60fa1b6001600160f81b0319821610156118dc576005840193506118e3565b6006840193505b50600190910190611814565b509392505050565b60008183106119065781610af7565b5090919050565b60008184118061191c57508183115b15611928575080610af7565b6119328484611ceb565b905081811115610af7575092915050565b600080806000198587098587029250828110838203039150508060000361197d5783828161197357611973612e6a565b0492505050610af7565b8084116119c45760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610782565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000808260030b1215611a5f57611a4382612e17565b611a4e90600a613023565b611a589084613035565b9050610545565b60008260030b1315611a8057611a7682600a613023565b611a589084612b01565b5081610545565b611a918282610afe565b61079557611a9e81611cff565b611aa9836020611d11565b604051602001611aba929190613049565b60408051601f198184030181529082905262461bcd60e51b8252610782916004016130be565b611aea8282610afe565b6107955760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610af7836001600160a01b038416611eac565b60008183116119065781610af7565b611b798282610afe565b156107955760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610af7836001600160a01b038416611efb565b60008085602001516001600160401b031683611c079190613035565b9050801580611c1e575085516001600160c01b0316155b15611c2c5784915050611298565b85516001600160c01b03166001600160401b03851603611c50576000915050611298565b61ffff811115611c7657604051637359f25f60e01b815260048101829052602401610782565b6000611ca68760000151866001600160401b0316036001600160c01b0316612710876001600160401b0316611943565b9050611cb6868261271085611fee565b979650505050505050565b6000826000018281548110611cd857611cd8612ab8565b9060005260206000200154905092915050565b818101828110156105455750600019610545565b60606105456001600160a01b03831660145b60606000611d20836002612b01565b611d2b9060026130f1565b6001600160401b03811115611d4257611d426126cf565b6040519080825280601f01601f191660200182016040528015611d6c576020820181803683370190505b509050600360fc1b81600081518110611d8757611d87612ab8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611db657611db6612ab8565b60200101906001600160f81b031916908160001a9053506000611dda846002612b01565b611de59060016130f1565b90505b6001811115611e5d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e1957611e19612ab8565b1a60f81b828281518110611e2f57611e2f612ab8565b60200101906001600160f81b031916908160001a90535060049490941c93611e5681613104565b9050611de8565b508315610af75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610782565b6000818152600183016020526040812054611ef357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610545565b506000610545565b60008181526001830160205260408120548015611fe4576000611f1f600183612dab565b8554909150600090611f3390600190612dab565b9050818114611f98576000866000018281548110611f5357611f53612ab8565b9060005260206000200154905080876000018481548110611f7657611f76612ab8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fa957611fa961311b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610545565b6000915050610545565b600082841480612000575061ffff8216155b1561200c575083611298565b5083600080808061202d61ffff87166120248a612151565b61ffff166118f7565b90505b61ffff8116156120835761204a8561ffff83168a0a612322565b9094509250831561206357829450808603955080820191505b61207c600261ffff83160461ffff168761ffff166118f7565b9050612030565b505b61ffff8516156120f6576120998488612322565b909350915082156120b857600019909401939092508290600101612085565b61ffff8116156120dd578584816120d1576120d1612e6a565b04935060001901612085565b6120e8848888611943565b600019909501949350612085565b600061210187612151565b90505b61ffff8216156121455760006121228261ffff168461ffff166118f7565b90508061ffff16880a868161213957612139612e6a565b04955090910390612104565b50505050949350505050565b60006003821015612164575060ff919050565b600482101561217557506080919050565b601082101561218657506040919050565b61010082101561219857506020919050565b611bdc8210156121aa57506014919050565b612c708210156121bc57506013919050565b614aa98210156121ce57506012919050565b6185548210156121e057506011919050565b620100008210156121f357506010919050565b620218378210156122065750600f919050565b6204e0468210156122195750600e919050565b620ced4c82101561222c5750600d919050565b6228514682101561223f5750600c919050565b629aa2ad8210156122525750600b919050565b6303080c018210156122665750600a919050565b6315c5cbbd82101561227a57506009919050565b64010000000082101561228f57506008919050565b6417c6a1f29f8210156122a457506007919050565b6506597fa94f5c8210156122ba57506006919050565b66093088c35d733b8210156122d157506005919050565b680100000000000000008210156122ea57506004919050565b6a285145f31ae515c447bb5782101561230557506003919050565b600160801b82101561231957506002919050565b5060015b919050565b600080836000036123395750600190506000612366565b8383028385828161234c5761234c612e6a565b041461235f576000809250925050612366565b6001925090505b9250929050565b60006020828403121561237f57600080fd5b81356001600160e01b031981168114610af757600080fd5b6000602082840312156123a957600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b828110156123fa576123ea84835180518252602090810151910152565b92840192908501906001016123cd565b5091979650505050505050565b6001600160a01b03811681146112aa57600080fd5b803561231d81612407565b60008060006060848603121561243c57600080fd5b833561244781612407565b95602085013595506040909401359392505050565b6000806040838503121561246f57600080fd5b82359150602083013561248181612407565b809150509250929050565b60008083601f84011261249e57600080fd5b5081356001600160401b038111156124b557600080fd5b6020830191508360208260061b850101111561236657600080fd5b600080602083850312156124e357600080fd5b82356001600160401b038111156124f957600080fd5b6125058582860161248c565b90969095509350505050565b60008083601f84011261252357600080fd5b5081356001600160401b0381111561253a57600080fd5b6020830191508360208260051b850101111561236657600080fd5b6000806000806000806000806080898b03121561257157600080fd5b88356001600160401b038082111561258857600080fd5b6125948c838d01612511565b909a50985060208b01359150808211156125ad57600080fd5b6125b98c838d01612511565b909850965060408b01359150808211156125d257600080fd5b6125de8c838d01612511565b909650945060608b01359150808211156125f757600080fd5b506126048b828c01612511565b999c989b5096995094979396929594505050565b6020808252825182820181905260009190848201906040850190845b81811015612652578351151583529284019291840191600101612634565b50909695505050505050565b6000806020838503121561267157600080fd5b82356001600160401b038082111561268857600080fd5b818501915085601f83011261269c57600080fd5b8135818111156126ab57600080fd5b8660208285010111156126bd57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715612707576127076126cf565b60405290565b604080519081016001600160401b0381118282101715612707576127076126cf565b604051606081016001600160401b0381118282101715612707576127076126cf565b604051601f8201601f191681016001600160401b0381118282101715612779576127796126cf565b604052919050565b60006001600160401b0382111561279a5761279a6126cf565b50601f01601f191660200190565b600082601f8301126127b957600080fd5b81356127cc6127c782612781565b612751565b8181528460208386010111156127e157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561281057600080fd5b81356001600160401b0381111561282657600080fd5b611298848285016127a8565b6000806040838503121561284557600080fd5b50508035926020909101359150565b60006040828403121561286657600080fd5b50919050565b60008060008060008060008060008060006101408c8e03121561288e57600080fd5b6128988c35612407565b8b359a506001600160401b038060208e013511156128b557600080fd5b6128c58e60208f01358f01612511565b909b50995060408d01358110156128db57600080fd5b506128ec8d60408e01358e0161248c565b909850965060608c013595506129058d60808e01612854565b945060c08c013561291581612407565b935061292360e08d0161241c565b92506101008c013591506101208c013590509295989b509295989b9093969950565b6000806000806040858703121561295b57600080fd5b84356001600160401b038082111561297257600080fd5b61297e88838901612511565b9096509450602087013591508082111561299757600080fd5b506129a487828801612511565b95989497509550505050565b6000604082840312156129c257600080fd5b610af78383612854565b600080604083850312156129df57600080fd5b82356001600160401b038111156129f557600080fd5b612a01858286016127a8565b95602094909401359450505050565b825181526020808401518183015282516040830152820151606082015260808101610af7565b6001600160401b03811681146112aa57600080fd5b600060808284031215612a5d57600080fd5b612a656126e5565b82518060070b8114612a7657600080fd5b81526020830151612a8681612a36565b60208201526040830151600381900b8114612aa057600080fd5b60408201526060928301519281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ae057600080fd5b8135610af781612407565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761054557610545612aeb565b8051801515811461231d57600080fd5b600060208284031215612b3a57600080fd5b610af782612b18565b600060208284031215612b5557600080fd5b8151610af781612407565b60005b83811015612b7b578181015183820152602001612b63565b50506000910152565b600060808284031215612b9657600080fd5b612b9e6126e5565b90508151612bab81612407565b81526020820151612bbb81612407565b60208201526040820151612bce81612a36565b6040820152612bdf60608301612b18565b606082015292915050565b60006020808385031215612bfd57600080fd5b82516001600160401b0380821115612c1457600080fd5b9084019060a08287031215612c2857600080fd5b612c3061270d565b825182811115612c3f57600080fd5b830160608189031215612c5157600080fd5b612c5961272f565b815160ff81168114612c6a57600080fd5b81528186015186820152604082015184811115612c8657600080fd5b82019350601f84018913612c9957600080fd5b83519150612ca96127c783612781565b8281528987848701011115612cbd57600080fd5b612ccc83888301898801612b60565b6040820152825250612ce087848601612b84565b848201528094505050505092915050565b60008082840360e0811215612d0557600080fd5b60c0811215612d1357600080fd5b612d1b61272f565b84518152602085015160208201526080603f1983011215612d3b57600080fd5b612d436126e5565b91506040850151612d5381612407565b80835250606085015160208301526080850151604083015260a08501516060830152816040820152809350505060c083015190509250929050565b600060208284031215612da057600080fd5b8151610af781612a36565b8181038181111561054557610545612aeb565b600381810b9083900b01637fffffff8113637fffffff198212171561054557610545612aeb565b600060408284031215612df757600080fd5b612dff61270d565b82358152602083013560208201528091505092915050565b60008160030b637fffffff198103612e3157612e31612aeb565b60000392915050565b80820260008212600160ff1b84141615612e5657612e56612aeb565b818105831482151761054557610545612aeb565b634e487b7160e01b600052601260045260246000fd5b600082612e8f57612e8f612e6a565b600160ff1b821460001984141615612ea957612ea9612aeb565b500590565b6001600160c01b03811681146112aa57600080fd5b8135612ece81612eae565b81546001600160c01b03199081166001600160c01b039290921691821783556020840135612efb81612a36565b60c01b1617905550565b600060208284031215612f1757600080fd5b8135610af781612eae565b600060208284031215612f3457600080fd5b8135610af781612a36565b600181815b80851115612f7a578160001904821115612f6057612f60612aeb565b80851615612f6d57918102915b93841c9390800290612f44565b509250929050565b600082612f9157506001610545565b81612f9e57506000610545565b8160018114612fb45760028114612fbe57612fda565b6001915050610545565b60ff841115612fcf57612fcf612aeb565b50506001821b610545565b5060208310610133831016604e8410600b8410161715612ffd575081810a610545565b6130078383612f3f565b806000190482111561301b5761301b612aeb565b029392505050565b6000610af763ffffffff841683612f82565b60008261304457613044612e6a565b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613081816017850160208801612b60565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516130b2816028840160208801612b60565b01602801949350505050565b60208152600082518060208401526130dd816040850160208701612b60565b601f01601f19169190910160400192915050565b8082018082111561054557610545612aeb565b60008161311357613113612aeb565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d0496611adae861791435296e0aae2099af9499031b6826466a4fe91423b08e564736f6c63430008150033",
  "chainId": 2021,
  "contractName": "RNSDomainPrice",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80635ef32e2c11610104578063ca15c873116100a2578063e229a67011610071578063e229a670146104b2578063f4651f49146104c5578063f5b541a6146104e6578063fe303ebf1461050d57600080fd5b8063ca15c87314610466578063d40ed58c14610479578063d547741f1461048c578063dd28776d1461049f57600080fd5b80637174026e116100de5780637174026e1461040d5780639010d07c1461042057806391d148541461044b578063a217fddf1461045e57600080fd5b80635ef32e2c146103b6578063700213c8146103be578063713a69a7146103e557600080fd5b80632f6ee6951161017c5780634c255c971161014b5780634c255c971461034f57806353faf90914610370578063599eaabf146103905780635c68c830146103a357600080fd5b80632f6ee695146102b757806335feb741146102d157806336568abe146102e457806339e47da7146102f757600080fd5b8063248a9ca3116101b8578063248a9ca31461023d57806328dd3065146102615780632be09ecc146102765780632f2ff15d146102a457600080fd5b806301ffc9a7146101df578063037f1769146102075780630a44f51f14610228575b600080fd5b6101f26101ed36600461236d565b610520565b60405190151581526020015b60405180910390f35b61021a610215366004612397565b61054b565b6040519081526020016101fe565b6102306105dd565b6040516101fe91906123b0565b61021a61024b366004612397565b6000908152600160208190526040909120015490565b61027461026f366004612427565b6106ba565b005b603554603954603a54604080516001600160a01b0390941684526020840192909252908201526060016101fe565b6102746102b236600461245c565b6106d6565b6102bf601281565b60405160ff90911681526020016101fe565b6102746102df3660046124d0565b610701565b6102746102f236600461245c565b610716565b604080518082018252600080825260209182015281518083018352603b546001600160c01b0381168083526001600160401b03600160c01b9092048216928401928352845190815291511691810191909152016101fe565b61035861271081565b6040516001600160401b0390911681526020016101fe565b61038361037e366004612555565b610799565b6040516101fe9190612618565b61027461039e366004612555565b6108d2565b61021a6103b136600461265e565b6109a2565b60375461021a565b61021a7f033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad81565b6103f86103f33660046127fe565b610a20565b604080519283526020830191909152016101fe565b61021a61041b366004612397565b610a4c565b61043361042e366004612832565b610adf565b6040516001600160a01b0390911681526020016101fe565b6101f261045936600461245c565b610afe565b61021a600081565b61021a610474366004612397565b610b29565b61027461048736600461286c565b610b40565b61027461049a36600461245c565b610d08565b6102746104ad366004612945565b610d2e565b6102746104c03660046129b0565b610e4c565b6104d86104d33660046129cc565b610e60565b6040516101fe929190612a10565b61021a7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b61027461051b366004612397565b611216565b60006001600160e01b03198216635a05180f60e01b148061054557506105458261122a565b92915050565b603554603a5460395460405163052571af60e51b815260009361054593869360129384936001600160a01b03169263a4ae35e09261059492600401918252602082015260400190565b608060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190612a4b565b92919061125f565b603854606090806001600160401b038111156105fb576105fb6126cf565b60405190808252806020026020018201604052801561064057816020015b60408051808201909152600080825260208201528152602001906001900390816106195790505b5091506000805b828110156106b4578060010191508184828151811061066857610668612ab8565b60200260200101516000018181525050603c60008381526020019081526020016000205484828151811061069e5761069e612ab8565b6020908102919091018101510152600101610647565b50505090565b60006106c5816112a0565b6106d08484846112ad565b50505050565b600082815260016020819052604090912001546106f2816112a0565b6106fc838361131f565b505050565b600061070c816112a0565b6106fc8383611341565b6001600160a01b038116331461078b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610795828261145a565b5050565b60607f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9296107c5816112a0565b60006107d78b8b8b8b8b8b8b8b61147c565b905033816001600160401b038111156107f2576107f26126cf565b60405190808252806020026020018201604052801561081b578160200160208202803683370190505b50935060005b828110156108c257610898828e8e8481811061083f5761083f612ab8565b905060200201358d8d8581811061085857610858612ab8565b905060200201358c8c8681811061087157610871612ab8565b905060200201358b8b8781811061088a5761088a612ab8565b9050602002013560006114ca565b8582815181106108aa576108aa612ab8565b91151560209283029190910190910152600101610821565b5050505098975050505050505050565b7f033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad6108fc816112a0565b600061090e8a8a8a8a8a8a8a8a61147c565b90503360005b828110156109945761098b828d8d8481811061093257610932612ab8565b905060200201358c8c8581811061094b5761094b612ab8565b905060200201358b8b8681811061096457610964612ab8565b905060200201358a8a8781811061097d5761097d612ab8565b9050602002013560016114ca565b50600101610914565b505050505050505050505050565b6000603e60006109e785858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155992505050565b815260200190815260200160002054905080600003610a1957604051635421761560e11b815260040160405180910390fd5b1992915050565b600080610a3a610a3584805160209091012090565b611564565b9150610a4582610a4c565b9050915091565b603554603a5460395460405163052571af60e51b81526004810192909252602482015260009161054591849160129182916105d591601119916001600160a01b03169063a4ae35e090604401608060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190612a4b565b906115de565b6000828152600260205260408120610af79083611738565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081815260026020526040812061054590611744565b600054610100900460ff1615808015610b605750600054600160ff909116105b80610b7a5750303b158015610b7a575060005460ff166001145b610bdd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610782565b6000805460ff191660011790558015610c00576000805461ff0019166101001790555b897f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92960005b82811015610c6557610c5d828f8f84818110610c4357610c43612ab8565b9050602002016020810190610c589190612ace565b61174e565b600101610c25565b50603680546001600160a01b0319166001600160a01b038816179055610c8c60008f61174e565b610c968b8b611341565b610c9f89611758565b610ca88861178d565b610cb38786866112ad565b50508015610994576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050505050505050565b60008281526001602081905260409091200154610d24816112a0565b6106fc838361145a565b7f033a42b04fa8bdb42a28dc41fe890f4b8409d5af5d3ed16a96b5fb479b0d3fad610d58816112a0565b83801580610d665750808314155b15610d8457604051634ec4810560e11b815260040160405180910390fd5b600033815b83811015610e4157868682818110610da357610da3612ab8565b9050602002013519925082603e60008b8b85818110610dc457610dc4612ab8565b90506020020135815260200190815260200160002081905550888882818110610def57610def612ab8565b90506020020135826001600160a01b03167fb52d278cb3ef3b003bdfb385ce2eb23a83eb6d713724abfba1acaa16ccf6621485604051610e3191815260200190565b60405180910390a3600101610d89565b505050505050505050565b6000610e57816112a0565b6107958261178d565b604080518082019091526000808252602082015260408051808201909152600080825260208201526000610e9385611809565b855160208701209091506000906000818152603e60205260409020549091508015610eca57610ec3811987612b01565b85526111e9565b6000603c6000610edc866038546118f7565b81526020019081526020016000205490508087610ef99190612b01565b86526000610f387fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d6888a6000918252805160209182012090526040902090565b6036546040516329fc8caf60e11b8152600481018390529192506001600160a01b03169081906353f9195e90602401602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190612b28565b156111e5576000816001600160a01b0316638c8433146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190612b43565b905060006110ac826001600160a01b03166303e9e609866040518263ffffffff1660e01b815260040161104691815260200190565b600060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108b9190810190612bea565b60200151604001516001600160401b03168c6001600160401b03801661190d565b6040516378bd793560e01b8152600481018690529091506000906001600160a01b038516906378bd79359060240160e060405180830381865afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b9190612cf1565b5060408101516060015190915080158015906111a95750846001600160a01b0316630afe1bb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190612d8e565b6001600160401b03166111a78285612dab565b115b156111c757604051631bb03f9d60e01b815260040160405180910390fd5b6111de6037546111d68b611564565b612710611943565b8b52505050505b5050505b83516111f490610a4c565b6020850152845161120490610a4c565b60208601525092959194509092505050565b6000611221816112a0565b61079582611758565b60006001600160e01b03198216637965db0b60e01b148061054557506301ffc9a760e01b6001600160e01b0319831614610545565b600061129584611285876000015160070b8860400151866112809190612dbe565b611a2d565b611290600187611a2d565b611943565b90505b949350505050565b6112aa8133611a87565b50565b603580546001600160a01b0319166001600160a01b0385169081179091556039839055603a8290558190336001600160a01b03167f671083457675651266070f50f1438ef8190b7da64d38f16f5117246236b7dd5b8560405161131291815260200190565b60405180910390a4505050565b6113298282611ae0565b60008281526002602052604090206106fc9082611b4b565b60408051808201909152600080825260208201523390603854839060005b8281101561140c5786868281811061137957611379612ab8565b90506040020180360381019061138f9190612de5565b935061139f828560000151611b60565b6020808601805187516000908152603c90935260409283902055865190519151929450916001600160a01b038816917f85211e946be6d537cd1b22a183d04151d4e5d0818e1ce75d2e5ebaecba0a5a77916113fc91815260200190565b60405180910390a360010161135f565b50603854811461145257603881905560405181906001600160a01b038616907f7e7c3a4273ac1af351af63a82e91a8335bcb389ba681375a32dbe4455d0d474b90600090a35b505050505050565b6114648282611b6f565b60008281526002602052604090206106fc9082611bd6565b8680158061148a5750858114155b806114955750838114155b806114a05750818114155b156114be57604051634ec4810560e11b815260040160405180910390fd5b98975050505050505050565b6000806114d68661054b565b6000888152603d6020526040902090915083806114f35750805482115b9250821561154d57818155426001820155604080518381526020810187905287918a916001600160a01b038d16917f60d5fd6d2284807447aae62f93c05517a647b8e8479c3af2c27ee1d1c85b540f910160405180910390a45b50509695505050505050565b805160209091012090565b6000818152603d602052604081206001810154808303611588575060009392505050565b60006115948242612dab565b835460408051808201909152603b546001600160c01b0381168252600160c01b90046001600160401b031660208201529192506115d5919061271084611beb565b95945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915260006116176001856040015161128090612e17565b90506001600160ff1b0381111561164d576040808501519051633e87ca5d60e11b815260039190910b6004820152602401610782565b600061165d600161128086612e17565b90506001600160ff1b0381111561168d57604051633e87ca5d60e11b8152600385900b6004820152602401610782565b845160009060070b61169f8385612e3a565b6116a99190612e80565b9050677fffffffffffffff8113156116f557604086810151875191516329b2fb5560e11b8152600391820b60048201529087900b602482015260079190910b6044820152606401610782565b60405180608001604052808260070b815260200187602001516001600160401b031681526020018660030b81526020018760600151815250935050505092915050565b6000610af78383611cc1565b6000610545825490565b610795828261131f565b6037819055604051819033907f1e97e29c863545fad1ce79512b4deb3f0b7d30c3356bc7bbbd6588c9e68cf07390600090a350565b80603b61179a8282612ec3565b503390507fa7f38b74141f9a2ac1b02640ded2b98431ef77f8cf2e3ade85c71d6c8420dc646117cc6020840184612f05565b6117dc6040850160208601612f22565b604080516001600160c01b0390931683526001600160401b0390911660208301520160405180910390a250565b600080600080845190505b808310156118ef57600085848151811061183057611830612ab8565b01602001516001600160f81b0319169050600160ff1b811015611858576001840193506118e3565b600760fd1b6001600160f81b031982161015611879576002840193506118e3565b600f60fc1b6001600160f81b03198216101561189a576003840193506118e3565b601f60fb1b6001600160f81b0319821610156118bb576004840193506118e3565b603f60fa1b6001600160f81b0319821610156118dc576005840193506118e3565b6006840193505b50600190910190611814565b509392505050565b60008183106119065781610af7565b5090919050565b60008184118061191c57508183115b15611928575080610af7565b6119328484611ceb565b905081811115610af7575092915050565b600080806000198587098587029250828110838203039150508060000361197d5783828161197357611973612e6a565b0492505050610af7565b8084116119c45760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610782565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000808260030b1215611a5f57611a4382612e17565b611a4e90600a613023565b611a589084613035565b9050610545565b60008260030b1315611a8057611a7682600a613023565b611a589084612b01565b5081610545565b611a918282610afe565b61079557611a9e81611cff565b611aa9836020611d11565b604051602001611aba929190613049565b60408051601f198184030181529082905262461bcd60e51b8252610782916004016130be565b611aea8282610afe565b6107955760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610af7836001600160a01b038416611eac565b60008183116119065781610af7565b611b798282610afe565b156107955760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610af7836001600160a01b038416611efb565b60008085602001516001600160401b031683611c079190613035565b9050801580611c1e575085516001600160c01b0316155b15611c2c5784915050611298565b85516001600160c01b03166001600160401b03851603611c50576000915050611298565b61ffff811115611c7657604051637359f25f60e01b815260048101829052602401610782565b6000611ca68760000151866001600160401b0316036001600160c01b0316612710876001600160401b0316611943565b9050611cb6868261271085611fee565b979650505050505050565b6000826000018281548110611cd857611cd8612ab8565b9060005260206000200154905092915050565b818101828110156105455750600019610545565b60606105456001600160a01b03831660145b60606000611d20836002612b01565b611d2b9060026130f1565b6001600160401b03811115611d4257611d426126cf565b6040519080825280601f01601f191660200182016040528015611d6c576020820181803683370190505b509050600360fc1b81600081518110611d8757611d87612ab8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611db657611db6612ab8565b60200101906001600160f81b031916908160001a9053506000611dda846002612b01565b611de59060016130f1565b90505b6001811115611e5d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e1957611e19612ab8565b1a60f81b828281518110611e2f57611e2f612ab8565b60200101906001600160f81b031916908160001a90535060049490941c93611e5681613104565b9050611de8565b508315610af75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610782565b6000818152600183016020526040812054611ef357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610545565b506000610545565b60008181526001830160205260408120548015611fe4576000611f1f600183612dab565b8554909150600090611f3390600190612dab565b9050818114611f98576000866000018281548110611f5357611f53612ab8565b9060005260206000200154905080876000018481548110611f7657611f76612ab8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fa957611fa961311b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610545565b6000915050610545565b600082841480612000575061ffff8216155b1561200c575083611298565b5083600080808061202d61ffff87166120248a612151565b61ffff166118f7565b90505b61ffff8116156120835761204a8561ffff83168a0a612322565b9094509250831561206357829450808603955080820191505b61207c600261ffff83160461ffff168761ffff166118f7565b9050612030565b505b61ffff8516156120f6576120998488612322565b909350915082156120b857600019909401939092508290600101612085565b61ffff8116156120dd578584816120d1576120d1612e6a565b04935060001901612085565b6120e8848888611943565b600019909501949350612085565b600061210187612151565b90505b61ffff8216156121455760006121228261ffff168461ffff166118f7565b90508061ffff16880a868161213957612139612e6a565b04955090910390612104565b50505050949350505050565b60006003821015612164575060ff919050565b600482101561217557506080919050565b601082101561218657506040919050565b61010082101561219857506020919050565b611bdc8210156121aa57506014919050565b612c708210156121bc57506013919050565b614aa98210156121ce57506012919050565b6185548210156121e057506011919050565b620100008210156121f357506010919050565b620218378210156122065750600f919050565b6204e0468210156122195750600e919050565b620ced4c82101561222c5750600d919050565b6228514682101561223f5750600c919050565b629aa2ad8210156122525750600b919050565b6303080c018210156122665750600a919050565b6315c5cbbd82101561227a57506009919050565b64010000000082101561228f57506008919050565b6417c6a1f29f8210156122a457506007919050565b6506597fa94f5c8210156122ba57506006919050565b66093088c35d733b8210156122d157506005919050565b680100000000000000008210156122ea57506004919050565b6a285145f31ae515c447bb5782101561230557506003919050565b600160801b82101561231957506002919050565b5060015b919050565b600080836000036123395750600190506000612366565b8383028385828161234c5761234c612e6a565b041461235f576000809250925050612366565b6001925090505b9250929050565b60006020828403121561237f57600080fd5b81356001600160e01b031981168114610af757600080fd5b6000602082840312156123a957600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b828110156123fa576123ea84835180518252602090810151910152565b92840192908501906001016123cd565b5091979650505050505050565b6001600160a01b03811681146112aa57600080fd5b803561231d81612407565b60008060006060848603121561243c57600080fd5b833561244781612407565b95602085013595506040909401359392505050565b6000806040838503121561246f57600080fd5b82359150602083013561248181612407565b809150509250929050565b60008083601f84011261249e57600080fd5b5081356001600160401b038111156124b557600080fd5b6020830191508360208260061b850101111561236657600080fd5b600080602083850312156124e357600080fd5b82356001600160401b038111156124f957600080fd5b6125058582860161248c565b90969095509350505050565b60008083601f84011261252357600080fd5b5081356001600160401b0381111561253a57600080fd5b6020830191508360208260051b850101111561236657600080fd5b6000806000806000806000806080898b03121561257157600080fd5b88356001600160401b038082111561258857600080fd5b6125948c838d01612511565b909a50985060208b01359150808211156125ad57600080fd5b6125b98c838d01612511565b909850965060408b01359150808211156125d257600080fd5b6125de8c838d01612511565b909650945060608b01359150808211156125f757600080fd5b506126048b828c01612511565b999c989b5096995094979396929594505050565b6020808252825182820181905260009190848201906040850190845b81811015612652578351151583529284019291840191600101612634565b50909695505050505050565b6000806020838503121561267157600080fd5b82356001600160401b038082111561268857600080fd5b818501915085601f83011261269c57600080fd5b8135818111156126ab57600080fd5b8660208285010111156126bd57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715612707576127076126cf565b60405290565b604080519081016001600160401b0381118282101715612707576127076126cf565b604051606081016001600160401b0381118282101715612707576127076126cf565b604051601f8201601f191681016001600160401b0381118282101715612779576127796126cf565b604052919050565b60006001600160401b0382111561279a5761279a6126cf565b50601f01601f191660200190565b600082601f8301126127b957600080fd5b81356127cc6127c782612781565b612751565b8181528460208386010111156127e157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561281057600080fd5b81356001600160401b0381111561282657600080fd5b611298848285016127a8565b6000806040838503121561284557600080fd5b50508035926020909101359150565b60006040828403121561286657600080fd5b50919050565b60008060008060008060008060008060006101408c8e03121561288e57600080fd5b6128988c35612407565b8b359a506001600160401b038060208e013511156128b557600080fd5b6128c58e60208f01358f01612511565b909b50995060408d01358110156128db57600080fd5b506128ec8d60408e01358e0161248c565b909850965060608c013595506129058d60808e01612854565b945060c08c013561291581612407565b935061292360e08d0161241c565b92506101008c013591506101208c013590509295989b509295989b9093969950565b6000806000806040858703121561295b57600080fd5b84356001600160401b038082111561297257600080fd5b61297e88838901612511565b9096509450602087013591508082111561299757600080fd5b506129a487828801612511565b95989497509550505050565b6000604082840312156129c257600080fd5b610af78383612854565b600080604083850312156129df57600080fd5b82356001600160401b038111156129f557600080fd5b612a01858286016127a8565b95602094909401359450505050565b825181526020808401518183015282516040830152820151606082015260808101610af7565b6001600160401b03811681146112aa57600080fd5b600060808284031215612a5d57600080fd5b612a656126e5565b82518060070b8114612a7657600080fd5b81526020830151612a8681612a36565b60208201526040830151600381900b8114612aa057600080fd5b60408201526060928301519281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ae057600080fd5b8135610af781612407565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761054557610545612aeb565b8051801515811461231d57600080fd5b600060208284031215612b3a57600080fd5b610af782612b18565b600060208284031215612b5557600080fd5b8151610af781612407565b60005b83811015612b7b578181015183820152602001612b63565b50506000910152565b600060808284031215612b9657600080fd5b612b9e6126e5565b90508151612bab81612407565b81526020820151612bbb81612407565b60208201526040820151612bce81612a36565b6040820152612bdf60608301612b18565b606082015292915050565b60006020808385031215612bfd57600080fd5b82516001600160401b0380821115612c1457600080fd5b9084019060a08287031215612c2857600080fd5b612c3061270d565b825182811115612c3f57600080fd5b830160608189031215612c5157600080fd5b612c5961272f565b815160ff81168114612c6a57600080fd5b81528186015186820152604082015184811115612c8657600080fd5b82019350601f84018913612c9957600080fd5b83519150612ca96127c783612781565b8281528987848701011115612cbd57600080fd5b612ccc83888301898801612b60565b6040820152825250612ce087848601612b84565b848201528094505050505092915050565b60008082840360e0811215612d0557600080fd5b60c0811215612d1357600080fd5b612d1b61272f565b84518152602085015160208201526080603f1983011215612d3b57600080fd5b612d436126e5565b91506040850151612d5381612407565b80835250606085015160208301526080850151604083015260a08501516060830152816040820152809350505060c083015190509250929050565b600060208284031215612da057600080fd5b8151610af781612a36565b8181038181111561054557610545612aeb565b600381810b9083900b01637fffffff8113637fffffff198212171561054557610545612aeb565b600060408284031215612df757600080fd5b612dff61270d565b82358152602083013560208201528091505092915050565b60008160030b637fffffff198103612e3157612e31612aeb565b60000392915050565b80820260008212600160ff1b84141615612e5657612e56612aeb565b818105831482151761054557610545612aeb565b634e487b7160e01b600052601260045260246000fd5b600082612e8f57612e8f612e6a565b600160ff1b821460001984141615612ea957612ea9612aeb565b500590565b6001600160c01b03811681146112aa57600080fd5b8135612ece81612eae565b81546001600160c01b03199081166001600160c01b039290921691821783556020840135612efb81612a36565b60c01b1617905550565b600060208284031215612f1757600080fd5b8135610af781612eae565b600060208284031215612f3457600080fd5b8135610af781612a36565b600181815b80851115612f7a578160001904821115612f6057612f60612aeb565b80851615612f6d57918102915b93841c9390800290612f44565b509250929050565b600082612f9157506001610545565b81612f9e57506000610545565b8160018114612fb45760028114612fbe57612fda565b6001915050610545565b60ff841115612fcf57612fcf612aeb565b50506001821b610545565b5060208310610133831016604e8410600b8410161715612ffd575081810a610545565b6130078383612f3f565b806000190482111561301b5761301b612aeb565b029392505050565b6000610af763ffffffff841683612f82565b60008261304457613044612e6a565b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613081816017850160208801612b60565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516130b2816028840160208801612b60565b01602801949350505050565b60208152600082518060208401526130dd816040850160208701612b60565b601f01601f19169190910160400192915050565b8082018082111561054557610545612aeb565b60008161311357613113612aeb565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d0496611adae861791435296e0aae2099af9499031b6826466a4fe91423b08e564736f6c63430008150033",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "bulkOverrideRenewalFees(bytes32[],uint256[])": {
        "details": "Bulk override renewal fees. Requirements: - The method caller is operator. - The input array lengths must be larger than 0 and the same. Emits events {RenewalFeeOverridingUpdated}.",
        "params": {
          "lbHashes": "Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')",
          "usdPrices": "Array of prices in USD. Leave 2^256 - 1 to remove overriding."
        }
      },
      "bulkSetDomainPrice(bytes32[],uint256[],bytes32[],uint256[])": {
        "details": "Bulk override domain prices. Requirements: - The method caller is operator. - The input array lengths must be larger than 0 and the same. Emits events {DomainPriceUpdated}.",
        "params": {
          "lbHashes": "Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')",
          "proofHashes": "Array of proof hashes.",
          "ronPrices": "Array of prices in (W)RON token.",
          "setTypes": "Array of update types from the operator service."
        }
      },
      "bulkTrySetDomainPrice(bytes32[],uint256[],bytes32[],uint256[])": {
        "details": "Bulk try to set domain prices. Returns a boolean array indicating whether domain prices at the corresponding indexes if set or not. Requirements: - The method caller is operator. - The input array lengths must be larger than 0 and the same. - The price should be larger than current domain price or it will not be updated. Emits events {DomainPriceUpdated} optionally.",
        "params": {
          "lbHashes": "Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')",
          "proofHashes": "Array of proof hashes.",
          "ronPrices": "Array of prices in (W)RON token.",
          "setTypes": "Array of update types from the operator service."
        }
      },
      "convertRONToUSD(uint256)": {
        "details": "Returns the converted amount from RON to USD."
      },
      "convertUSDToRON(uint256)": {
        "details": "Returns the converted amount from USD to RON."
      },
      "getDomainPrice(string)": {
        "details": "Return the domain price.",
        "params": {
          "label": "The domain label to register (Eg, 'foo' for 'foo.ron')."
        }
      },
      "getOverriddenRenewalFee(string)": {
        "details": "Returns the renewal fee of a label. Reverts if not overridden."
      },
      "getPythOracleConfig()": {
        "details": "Returns the Pyth oracle config."
      },
      "getRenewalFee(string,uint256)": {
        "details": "Returns the renewal fee in USD and RON.",
        "params": {
          "duration": "Amount of second(s).",
          "label": "The domain label to register (Eg, 'foo' for 'foo.ron')."
        }
      },
      "getRenewalFeeByLengths()": {
        "details": "Returns the renewal fee by lengths."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getScaleDownRuleForDomainPrice()": {
        "details": "Returns the percentage to scale from domain price each period."
      },
      "getTaxRatio()": {
        "details": "Returns tax ratio."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setPythOracleConfig(address,uint256,bytes32)": {
        "details": "Sets the Pyth oracle config. Requirements: - The method caller is admin. Emits events {PythOracleConfigUpdated}."
      },
      "setRenewalFeeByLengths((uint256,uint256)[])": {
        "details": "Sets the renewal fee by lengths Requirements: - The method caller is admin. Emits events {RenewalFeeByLengthUpdated}. Emits an event {MaxRenewalFeeLengthUpdated} optionally."
      },
      "setScaleDownRuleForDomainPrice((uint192,uint64))": {
        "details": "Sets the percentage to scale from domain price each period. Requirements: - The method caller is admin. Emits events {DomainPriceScaleRuleUpdated}."
      },
      "setTaxRatio(uint256)": {
        "details": "Sets renewal reservation ratio. Requirements: - The method caller is admin. Emits an event {TaxRatioUpdated}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "events": {
      "DomainPriceScaleRuleUpdated(address,uint192,uint64)": {
        "details": "Emitted when the rule to rescale domain price is updated."
      },
      "DomainPriceUpdated(address,bytes32,uint256,bytes32,uint256)": {
        "details": "Emitted when the domain price is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxRenewalFeeLengthUpdated(address,uint256)": {
        "details": "Emitted when the maximum length of renewal fee is updated."
      },
      "PythOracleConfigUpdated(address,address,uint256,bytes32)": {
        "details": "Emitted when the Pyth Oracle config is updated."
      },
      "RenewalFeeByLengthUpdated(address,uint256,uint256)": {
        "details": "Emitted when the renew fee is updated."
      },
      "RenewalFeeOverridingUpdated(address,bytes32,uint256)": {
        "details": "Emitted when the renew fee of a domain is overridden. Value of `inverseRenewalFee` is 0 when not overridden."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TaxRatioUpdated(address,uint256)": {
        "details": "Emitted when the renewal reservation ratio is updated."
      }
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"expo1\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"expo2\",\"type\":\"int32\"},{\"internalType\":\"int64\",\"name\":\"price1\",\"type\":\"int64\"}],\"name\":\"ErrComputedPriceTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"}],\"name\":\"ErrExponentTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedAuctionDomainExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"PeriodNumOverflowedUint16\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenewalFeeIsNotOverriden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"ratio\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"}],\"name\":\"DomainPriceScaleRuleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setType\",\"type\":\"uint256\"}],\"name\":\"DomainPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxLength\",\"type\":\"uint256\"}],\"name\":\"MaxRenewalFeeLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPyth\",\"name\":\"pyth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAcceptableAge\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pythIdForRONUSD\",\"type\":\"bytes32\"}],\"name\":\"PythOracleConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"labelLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"renewalFee\",\"type\":\"uint256\"}],\"name\":\"RenewalFeeByLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inverseRenewalFee\",\"type\":\"uint256\"}],\"name\":\"RenewalFeeOverridingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"TaxRatioUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OVERRIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"lbHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usdPrices\",\"type\":\"uint256[]\"}],\"name\":\"bulkOverrideRenewalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"lbHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ronPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setTypes\",\"type\":\"uint256[]\"}],\"name\":\"bulkSetDomainPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"lbHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ronPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setTypes\",\"type\":\"uint256[]\"}],\"name\":\"bulkTrySetDomainPrice\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"updated\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ronWei\",\"type\":\"uint256\"}],\"name\":\"convertRONToUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdWei\",\"type\":\"uint256\"}],\"name\":\"convertUSDToRON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ronWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"getDomainPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ronPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"getOverriddenRenewalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPythOracleConfig\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"pyth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAcceptableAge\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"pythIdForRONUSD\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getRenewalFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ron\",\"type\":\"uint256\"}],\"internalType\":\"struct INSDomainPrice.UnitPrice\",\"name\":\"basePrice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ron\",\"type\":\"uint256\"}],\"internalType\":\"struct INSDomainPrice.UnitPrice\",\"name\":\"tax\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRenewalFeeByLengths\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"labelLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct INSDomainPrice.RenewalFee[]\",\"name\":\"renewalFees\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScaleDownRuleForDomainPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"ratio\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"}],\"internalType\":\"struct PeriodScaler\",\"name\":\"scaleRule\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"labelLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct INSDomainPrice.RenewalFee[]\",\"name\":\"renewalFees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"taxRatio\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint192\",\"name\":\"ratio\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"}],\"internalType\":\"struct PeriodScaler\",\"name\":\"domainPriceScaleRule\",\"type\":\"tuple\"},{\"internalType\":\"contract IPyth\",\"name\":\"pyth\",\"type\":\"address\"},{\"internalType\":\"contract INSAuction\",\"name\":\"auction\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAcceptableAge\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"pythIdForRONUSD\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"pyth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAcceptableAge\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"pythIdForRONUSD\",\"type\":\"bytes32\"}],\"name\":\"setPythOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"labelLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct INSDomainPrice.RenewalFee[]\",\"name\":\"renewalFees\",\"type\":\"tuple[]\"}],\"name\":\"setRenewalFeeByLengths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"ratio\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"}],\"internalType\":\"struct PeriodScaler\",\"name\":\"scaleRule\",\"type\":\"tuple\"}],\"name\":\"setScaleDownRuleForDomainPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setTaxRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DomainPriceScaleRuleUpdated(address,uint192,uint64)\":{\"details\":\"Emitted when the rule to rescale domain price is updated.\"},\"DomainPriceUpdated(address,bytes32,uint256,bytes32,uint256)\":{\"details\":\"Emitted when the domain price is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaxRenewalFeeLengthUpdated(address,uint256)\":{\"details\":\"Emitted when the maximum length of renewal fee is updated.\"},\"PythOracleConfigUpdated(address,address,uint256,bytes32)\":{\"details\":\"Emitted when the Pyth Oracle config is updated.\"},\"RenewalFeeByLengthUpdated(address,uint256,uint256)\":{\"details\":\"Emitted when the renew fee is updated.\"},\"RenewalFeeOverridingUpdated(address,bytes32,uint256)\":{\"details\":\"Emitted when the renew fee of a domain is overridden. Value of `inverseRenewalFee` is 0 when not overridden.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TaxRatioUpdated(address,uint256)\":{\"details\":\"Emitted when the renewal reservation ratio is updated.\"}},\"kind\":\"dev\",\"methods\":{\"bulkOverrideRenewalFees(bytes32[],uint256[])\":{\"details\":\"Bulk override renewal fees. Requirements: - The method caller is operator. - The input array lengths must be larger than 0 and the same. Emits events {RenewalFeeOverridingUpdated}.\",\"params\":{\"lbHashes\":\"Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\",\"usdPrices\":\"Array of prices in USD. Leave 2^256 - 1 to remove overriding.\"}},\"bulkSetDomainPrice(bytes32[],uint256[],bytes32[],uint256[])\":{\"details\":\"Bulk override domain prices. Requirements: - The method caller is operator. - The input array lengths must be larger than 0 and the same. Emits events {DomainPriceUpdated}.\",\"params\":{\"lbHashes\":\"Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\",\"proofHashes\":\"Array of proof hashes.\",\"ronPrices\":\"Array of prices in (W)RON token.\",\"setTypes\":\"Array of update types from the operator service.\"}},\"bulkTrySetDomainPrice(bytes32[],uint256[],bytes32[],uint256[])\":{\"details\":\"Bulk try to set domain prices. Returns a boolean array indicating whether domain prices at the corresponding indexes if set or not. Requirements: - The method caller is operator. - The input array lengths must be larger than 0 and the same. - The price should be larger than current domain price or it will not be updated. Emits events {DomainPriceUpdated} optionally.\",\"params\":{\"lbHashes\":\"Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\",\"proofHashes\":\"Array of proof hashes.\",\"ronPrices\":\"Array of prices in (W)RON token.\",\"setTypes\":\"Array of update types from the operator service.\"}},\"convertRONToUSD(uint256)\":{\"details\":\"Returns the converted amount from RON to USD.\"},\"convertUSDToRON(uint256)\":{\"details\":\"Returns the converted amount from USD to RON.\"},\"getDomainPrice(string)\":{\"details\":\"Return the domain price.\",\"params\":{\"label\":\"The domain label to register (Eg, 'foo' for 'foo.ron').\"}},\"getOverriddenRenewalFee(string)\":{\"details\":\"Returns the renewal fee of a label. Reverts if not overridden.\"},\"getPythOracleConfig()\":{\"details\":\"Returns the Pyth oracle config.\"},\"getRenewalFee(string,uint256)\":{\"details\":\"Returns the renewal fee in USD and RON.\",\"params\":{\"duration\":\"Amount of second(s).\",\"label\":\"The domain label to register (Eg, 'foo' for 'foo.ron').\"}},\"getRenewalFeeByLengths()\":{\"details\":\"Returns the renewal fee by lengths.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getScaleDownRuleForDomainPrice()\":{\"details\":\"Returns the percentage to scale from domain price each period.\"},\"getTaxRatio()\":{\"details\":\"Returns tax ratio.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setPythOracleConfig(address,uint256,bytes32)\":{\"details\":\"Sets the Pyth oracle config. Requirements: - The method caller is admin. Emits events {PythOracleConfigUpdated}.\"},\"setRenewalFeeByLengths((uint256,uint256)[])\":{\"details\":\"Sets the renewal fee by lengths Requirements: - The method caller is admin. Emits events {RenewalFeeByLengthUpdated}. Emits an event {MaxRenewalFeeLengthUpdated} optionally.\"},\"setScaleDownRuleForDomainPrice((uint192,uint64))\":{\"details\":\"Sets the percentage to scale from domain price each period. Requirements: - The method caller is admin. Emits events {DomainPriceScaleRuleUpdated}.\"},\"setTaxRatio(uint256)\":{\"details\":\"Sets renewal reservation ratio. Requirements: - The method caller is admin. Emits an event {TaxRatioUpdated}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"MAX_PERCENTAGE\":{\"details\":\"Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\"},\"OPERATOR_ROLE\":{\"details\":\"Value equals to keccak256(\\\"OPERATOR_ROLE\\\").\"},\"OVERRIDER_ROLE\":{\"details\":\"Returns the overrider role.\"},\"USD_DECIMALS\":{\"details\":\"Decimal for USD.\"},\"____gap\":{\"details\":\"Gap for upgradeability.\"},\"_auction\":{\"details\":\"RNSAuction contract\"},\"_dp\":{\"details\":\"Mapping from name => domain price in USD\"},\"_dpDownScaler\":{\"details\":\"The percentage scale from domain price each period\"},\"_maxAcceptableAge\":{\"details\":\"Max acceptable age of the price oracle request\"},\"_pyth\":{\"details\":\"Pyth oracle contract\"},\"_pythIdForRONUSD\":{\"details\":\"Price feed ID on Pyth for RON/USD\"},\"_rnFee\":{\"details\":\"Mapping from domain length => renewal fee in USD\"},\"_rnFeeOverriding\":{\"details\":\"Mapping from name => inverse bitwise of renewal fee overriding.\"},\"_rnfMaxLength\":{\"details\":\"Max length of the renewal fee\"},\"_taxRatio\":{\"details\":\"Extra fee for renewals based on the current domain price.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOverriddenRenewalFee(string)\":{\"notice\":\"This method is to help developers check the domain renewal fee overriding. Consider using method {getRenewalFee} instead for full handling of renewal fees.\"},\"setScaleDownRuleForDomainPrice((uint192,uint64))\":{\"notice\":\"Applies for the business rule: -x% each y seconds.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RNSDomainPrice.sol\":\"RNSDomainPrice\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/=lib/pyth-sdk-solidity/\",\":@rns-contracts/=src/\",\":buffer/=lib/buffer/contracts/\",\":contract-template/=lib/contract-template/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"},\"src/RNSDomainPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { IPyth, PythStructs } from \\\"@pythnetwork/IPyth.sol\\\";\\nimport { INSUnified } from \\\"./interfaces/INSUnified.sol\\\";\\nimport { INSAuction } from \\\"./interfaces/INSAuction.sol\\\";\\nimport { INSDomainPrice } from \\\"./interfaces/INSDomainPrice.sol\\\";\\nimport { PeriodScaler, LibPeriodScaler, Math } from \\\"./libraries/math/PeriodScalingUtils.sol\\\";\\nimport { TimestampWrapper } from \\\"./libraries/TimestampWrapperUtils.sol\\\";\\nimport { LibSafeRange } from \\\"./libraries/math/LibSafeRange.sol\\\";\\nimport { LibString } from \\\"./libraries/LibString.sol\\\";\\nimport { LibRNSDomain } from \\\"./libraries/LibRNSDomain.sol\\\";\\nimport { PythConverter } from \\\"./libraries/pyth/PythConverter.sol\\\";\\n\\ncontract RNSDomainPrice is Initializable, AccessControlEnumerable, INSDomainPrice {\\n  using LibString for *;\\n  using LibRNSDomain for string;\\n  using LibPeriodScaler for PeriodScaler;\\n  using PythConverter for PythStructs.Price;\\n\\n  /// @inheritdoc INSDomainPrice\\n  uint8 public constant USD_DECIMALS = 18;\\n  /// @inheritdoc INSDomainPrice\\n  uint64 public constant MAX_PERCENTAGE = 100_00;\\n  /// @inheritdoc INSDomainPrice\\n  bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n  /// @inheritdoc INSDomainPrice\\n  bytes32 public constant OVERRIDER_ROLE = keccak256(\\\"OVERRIDER_ROLE\\\");\\n\\n  /// @dev Gap for upgradeability.\\n  uint256[50] private ____gap;\\n\\n  /// @dev Pyth oracle contract\\n  IPyth internal _pyth;\\n  /// @dev RNSAuction contract\\n  INSAuction internal _auction;\\n  /// @dev Extra fee for renewals based on the current domain price.\\n  uint256 internal _taxRatio;\\n  /// @dev Max length of the renewal fee\\n  uint256 internal _rnfMaxLength;\\n  /// @dev Max acceptable age of the price oracle request\\n  uint256 internal _maxAcceptableAge;\\n  /// @dev Price feed ID on Pyth for RON/USD\\n  bytes32 internal _pythIdForRONUSD;\\n  /// @dev The percentage scale from domain price each period\\n  PeriodScaler internal _dpDownScaler;\\n\\n  /// @dev Mapping from domain length => renewal fee in USD\\n  mapping(uint256 length => uint256 usdPrice) internal _rnFee;\\n  /// @dev Mapping from name => domain price in USD\\n  mapping(bytes32 lbHash => TimestampWrapper usdPrice) internal _dp;\\n  /// @dev Mapping from name => inverse bitwise of renewal fee overriding.\\n  mapping(bytes32 lbHash => uint256 usdPrice) internal _rnFeeOverriding;\\n\\n  constructor() payable {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    address admin,\\n    address[] calldata operators,\\n    RenewalFee[] calldata renewalFees,\\n    uint256 taxRatio,\\n    PeriodScaler calldata domainPriceScaleRule,\\n    IPyth pyth,\\n    INSAuction auction,\\n    uint256 maxAcceptableAge,\\n    bytes32 pythIdForRONUSD\\n  ) external initializer {\\n    uint256 length = operators.length;\\n    bytes32 operatorRole = OPERATOR_ROLE;\\n\\n    for (uint256 i; i < length;) {\\n      _setupRole(operatorRole, operators[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    _auction = auction;\\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    _setRenewalFeeByLengths(renewalFees);\\n    _setTaxRatio(taxRatio);\\n    _setDomainPriceScaleRule(domainPriceScaleRule);\\n    _setPythOracleConfig(pyth, maxAcceptableAge, pythIdForRONUSD);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function getPythOracleConfig() external view returns (IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD) {\\n    return (_pyth, _maxAcceptableAge, _pythIdForRONUSD);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function setPythOracleConfig(IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD)\\n    external\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n  {\\n    _setPythOracleConfig(pyth, maxAcceptableAge, pythIdForRONUSD);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function getRenewalFeeByLengths() external view returns (RenewalFee[] memory renewalFees) {\\n    uint256 rnfMaxLength = _rnfMaxLength;\\n    renewalFees = new RenewalFee[](rnfMaxLength);\\n    uint256 len;\\n\\n    for (uint256 i; i < rnfMaxLength;) {\\n      unchecked {\\n        len = i + 1;\\n        renewalFees[i].labelLength = len;\\n        renewalFees[i].fee = _rnFee[len];\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function setRenewalFeeByLengths(RenewalFee[] calldata renewalFees) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setRenewalFeeByLengths(renewalFees);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function getTaxRatio() external view returns (uint256 ratio) {\\n    return _taxRatio;\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function setTaxRatio(uint256 ratio) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setTaxRatio(ratio);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function getScaleDownRuleForDomainPrice() external view returns (PeriodScaler memory scaleRule) {\\n    return _dpDownScaler;\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function setScaleDownRuleForDomainPrice(PeriodScaler calldata scaleRule) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setDomainPriceScaleRule(scaleRule);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function getOverriddenRenewalFee(string calldata label) external view returns (uint256 usdFee) {\\n    usdFee = _rnFeeOverriding[label.hashLabel()];\\n    if (usdFee == 0) revert RenewalFeeIsNotOverriden();\\n    return ~usdFee;\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function bulkOverrideRenewalFees(bytes32[] calldata lbHashes, uint256[] calldata usdPrices)\\n    external\\n    onlyRole(OVERRIDER_ROLE)\\n  {\\n    uint256 length = lbHashes.length;\\n    if (length == 0 || length != usdPrices.length) revert InvalidArrayLength();\\n    uint256 inverseBitwise;\\n    address operator = _msgSender();\\n\\n    for (uint256 i; i < length;) {\\n      inverseBitwise = ~usdPrices[i];\\n      _rnFeeOverriding[lbHashes[i]] = inverseBitwise;\\n      emit RenewalFeeOverridingUpdated(operator, lbHashes[i], inverseBitwise);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function bulkTrySetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external onlyRole(OPERATOR_ROLE) returns (bool[] memory updated) {\\n    uint256 length = _requireBulkSetDomainPriceArgumentsValid(lbHashes, ronPrices, proofHashes, setTypes);\\n    address operator = _msgSender();\\n    updated = new bool[](length);\\n\\n    for (uint256 i; i < length;) {\\n      updated[i] = _setDomainPrice(operator, lbHashes[i], ronPrices[i], proofHashes[i], setTypes[i], false);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function bulkSetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external onlyRole(OVERRIDER_ROLE) {\\n    uint256 length = _requireBulkSetDomainPriceArgumentsValid(lbHashes, ronPrices, proofHashes, setTypes);\\n    address operator = _msgSender();\\n\\n    for (uint256 i; i < length;) {\\n      _setDomainPrice(operator, lbHashes[i], ronPrices[i], proofHashes[i], setTypes[i], true);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function getDomainPrice(string memory label) public view returns (uint256 usdPrice, uint256 ronPrice) {\\n    usdPrice = _getDomainPrice(label.hashLabel());\\n    ronPrice = convertUSDToRON(usdPrice);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function getRenewalFee(string memory label, uint256 duration)\\n    public\\n    view\\n    returns (UnitPrice memory basePrice, UnitPrice memory tax)\\n  {\\n    uint256 nameLen = label.strlen();\\n    bytes32 lbHash = label.hashLabel();\\n    uint256 overriddenRenewalFee = _rnFeeOverriding[lbHash];\\n\\n    if (overriddenRenewalFee != 0) {\\n      basePrice.usd = duration * ~overriddenRenewalFee;\\n    } else {\\n      uint256 renewalFeeByLength = _rnFee[Math.min(nameLen, _rnfMaxLength)];\\n      basePrice.usd = duration * renewalFeeByLength;\\n      uint256 id = LibRNSDomain.toId(LibRNSDomain.RON_ID, label);\\n      INSAuction auction = _auction;\\n      if (auction.reserved(id)) {\\n        INSUnified rns = auction.getRNSUnified();\\n        uint256 expiry = LibSafeRange.addWithUpperbound(rns.getRecord(id).mut.expiry, duration, type(uint64).max);\\n        (INSAuction.DomainAuction memory domainAuction,) = auction.getAuction(id);\\n        uint256 claimedAt = domainAuction.bid.claimedAt;\\n        if (claimedAt != 0 && expiry - claimedAt > auction.MAX_AUCTION_DOMAIN_EXPIRY()) {\\n          revert ExceedAuctionDomainExpiry();\\n        }\\n        // Tax is added to the name reserved for the auction\\n        tax.usd = Math.mulDiv(_taxRatio, _getDomainPrice(lbHash), MAX_PERCENTAGE);\\n      }\\n    }\\n\\n    tax.ron = convertUSDToRON(tax.usd);\\n    basePrice.ron = convertUSDToRON(basePrice.usd);\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function convertUSDToRON(uint256 usdWei) public view returns (uint256 ronWei) {\\n    return _pyth.getPriceNoOlderThan(_pythIdForRONUSD, _maxAcceptableAge).inverse({ expo: -18 }).mul({\\n      inpWei: usdWei,\\n      inpDecimals: int32(uint32(USD_DECIMALS)),\\n      outDecimals: 18\\n    });\\n  }\\n\\n  /**\\n   * @inheritdoc INSDomainPrice\\n   */\\n  function convertRONToUSD(uint256 ronWei) public view returns (uint256 usdWei) {\\n    return _pyth.getPriceNoOlderThan(_pythIdForRONUSD, _maxAcceptableAge).mul({\\n      inpWei: ronWei,\\n      inpDecimals: 18,\\n      outDecimals: int32(uint32(USD_DECIMALS))\\n    });\\n  }\\n\\n  /**\\n   * @dev Reverts if the arguments of the method {bulkSetDomainPrice} is invalid.\\n   */\\n  function _requireBulkSetDomainPriceArgumentsValid(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) internal pure returns (uint256 length) {\\n    length = lbHashes.length;\\n    if (length == 0 || ronPrices.length != length || proofHashes.length != length || setTypes.length != length) {\\n      revert InvalidArrayLength();\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper method to set domain price.\\n   *\\n   * Emits an event {DomainPriceUpdated} optionally.\\n   */\\n  function _setDomainPrice(\\n    address operator,\\n    bytes32 lbHash,\\n    uint256 ronPrice,\\n    bytes32 proofHash,\\n    uint256 setType,\\n    bool forced\\n  ) internal returns (bool updated) {\\n    uint256 usdPrice = convertRONToUSD(ronPrice);\\n    TimestampWrapper storage dp = _dp[lbHash];\\n    updated = forced || dp.value < usdPrice;\\n\\n    if (updated) {\\n      dp.value = usdPrice;\\n      dp.timestamp = block.timestamp;\\n      emit DomainPriceUpdated(operator, lbHash, usdPrice, proofHash, setType);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets renewal reservation ratio.\\n   *\\n   * Emits an event {TaxRatioUpdated}.\\n   */\\n  function _setTaxRatio(uint256 ratio) internal {\\n    _taxRatio = ratio;\\n    emit TaxRatioUpdated(_msgSender(), ratio);\\n  }\\n\\n  /**\\n   * @dev Sets domain price scale rule.\\n   *\\n   * Emits events {DomainPriceScaleRuleUpdated}.\\n   */\\n  function _setDomainPriceScaleRule(PeriodScaler calldata domainPriceScaleRule) internal {\\n    _dpDownScaler = domainPriceScaleRule;\\n    emit DomainPriceScaleRuleUpdated(_msgSender(), domainPriceScaleRule.ratio, domainPriceScaleRule.period);\\n  }\\n\\n  /**\\n   * @dev Sets renewal fee.\\n   *\\n   * Emits events {RenewalFeeByLengthUpdated}.\\n   * Emits an event {MaxRenewalFeeLengthUpdated} optionally.\\n   */\\n  function _setRenewalFeeByLengths(RenewalFee[] calldata renewalFees) internal {\\n    address operator = _msgSender();\\n    RenewalFee memory renewalFee;\\n    uint256 length = renewalFees.length;\\n    uint256 maxRenewalFeeLength = _rnfMaxLength;\\n\\n    for (uint256 i; i < length;) {\\n      renewalFee = renewalFees[i];\\n      maxRenewalFeeLength = Math.max(maxRenewalFeeLength, renewalFee.labelLength);\\n      _rnFee[renewalFee.labelLength] = renewalFee.fee;\\n      emit RenewalFeeByLengthUpdated(operator, renewalFee.labelLength, renewalFee.fee);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    if (maxRenewalFeeLength != _rnfMaxLength) {\\n      _rnfMaxLength = maxRenewalFeeLength;\\n      emit MaxRenewalFeeLengthUpdated(operator, maxRenewalFeeLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets Pyth Oracle config.\\n   *\\n   * Emits events {PythOracleConfigUpdated}.\\n   */\\n  function _setPythOracleConfig(IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD) internal {\\n    _pyth = pyth;\\n    _maxAcceptableAge = maxAcceptableAge;\\n    _pythIdForRONUSD = pythIdForRONUSD;\\n    emit PythOracleConfigUpdated(_msgSender(), pyth, maxAcceptableAge, pythIdForRONUSD);\\n  }\\n\\n  /**\\n   * @dev Returns the current domain price applied the business rule: deduced x% each y seconds.\\n   */\\n  function _getDomainPrice(bytes32 lbHash) internal view returns (uint256) {\\n    TimestampWrapper storage dp = _dp[lbHash];\\n    uint256 lastSyncedAt = dp.timestamp;\\n    if (lastSyncedAt == 0) return 0;\\n\\n    uint256 passedDuration = block.timestamp - lastSyncedAt;\\n    return _dpDownScaler.scaleDown({ v: dp.value, maxR: MAX_PERCENTAGE, dur: passedDuration });\\n  }\\n}\\n\",\"keccak256\":\"0xb317170571c1e6fbb5504f6348a4a713133a3e457b8cfdb4a225ed075e455f16\",\"license\":\"MIT\"},\"src/interfaces/INSAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { INSUnified } from \\\"./INSUnified.sol\\\";\\nimport { EventRange } from \\\"../libraries/LibEventRange.sol\\\";\\n\\ninterface INSAuction {\\n  error NotYetEnded();\\n  error NoOneBidded();\\n  error NullAssignment();\\n  error AlreadyBidding();\\n  error RatioIsTooLarge();\\n  error NameNotReserved();\\n  error InvalidEventRange();\\n  error QueryIsNotInPeriod();\\n  error InsufficientAmount();\\n  error InvalidArrayLength();\\n  error BidderCannotReceiveRON();\\n  error EventIsNotCreatedOrAlreadyStarted();\\n\\n  struct Bid {\\n    address payable bidder;\\n    uint256 price;\\n    uint256 timestamp;\\n    uint256 claimedAt;\\n  }\\n\\n  struct DomainAuction {\\n    bytes32 auctionId;\\n    uint256 startingPrice;\\n    Bid bid;\\n  }\\n\\n  /// @dev Emitted when an auction is set.\\n  event AuctionEventSet(bytes32 indexed auctionId, EventRange range);\\n  /// @dev Emitted when the labels are listed for auction.\\n  event LabelsListed(bytes32 indexed auctionId, uint256[] ids, uint256[] startingPrices);\\n  /// @dev Emitted when a bid is placed for a name.\\n  event BidPlaced(\\n    bytes32 indexed auctionId,\\n    uint256 indexed id,\\n    uint256 price,\\n    address payable bidder,\\n    uint256 previousPrice,\\n    address previousBidder\\n  );\\n  /// @dev Emitted when the treasury is updated.\\n  event TreasuryUpdated(address indexed addr);\\n  /// @dev Emitted when bid gap ratio is updated.\\n  event BidGapRatioUpdated(uint256 ratio);\\n\\n  /**\\n   * @dev The maximum expiry duration\\n   */\\n  function MAX_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev The maximum expiry duration of a domain after transferring to bidder.\\n   */\\n  function MAX_AUCTION_DOMAIN_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev Returns the operator role.\\n   */\\n  function OPERATOR_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\\n   */\\n  function MAX_PERCENTAGE() external pure returns (uint256);\\n\\n  /**\\n   * @dev The expiry duration of a domain after transferring to bidder.\\n   */\\n  function DOMAIN_EXPIRY_DURATION() external pure returns (uint64);\\n\\n  /**\\n   * @dev Claims domain names for auction.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   *\\n   * @param labels The domain names. Eg, ['foo'] for 'foo.ron'\\n   * @return ids The id corresponding for namehash of domain names.\\n   */\\n  function bulkRegister(string[] calldata labels) external returns (uint256[] memory ids);\\n\\n  /**\\n   * @dev Checks whether a domain name is currently reserved for auction or not.\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function reserved(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @dev Creates a new auction to sale with a specific time period.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin.\\n   *\\n   * Emits an event {AuctionEventSet}.\\n   *\\n   * @return auctionId The auction id\\n   * @notice Please use the method `setAuctionNames` to list all the reserved names.\\n   */\\n  function createAuctionEvent(EventRange calldata range) external returns (bytes32 auctionId);\\n\\n  /**\\n   * @dev Updates the auction details.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin.\\n   *\\n   * Emits an event {AuctionEventSet}.\\n   */\\n  function setAuctionEvent(bytes32 auctionId, EventRange calldata range) external;\\n\\n  /**\\n   * @dev Returns the event range of an auction.\\n   */\\n  function getAuctionEvent(bytes32 auctionId) external view returns (EventRange memory);\\n\\n  /**\\n   * @dev Lists reserved names to sale in a specified auction.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   * - Array length are matched and larger than 0.\\n   * - Only allow to set when the domain is:\\n   *   + Not in any auction.\\n   *   + Or, in the current auction.\\n   *   + Or, this name is not bided.\\n   *\\n   * Emits an event {LabelsListed}.\\n   *\\n   * Note: If the name is already listed, this method replaces with a new input value.\\n   *\\n   * @param ids The namehashes id of domain names. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function listNamesForAuction(bytes32 auctionId, uint256[] calldata ids, uint256[] calldata startingPrices) external;\\n\\n  /**\\n   * @dev Places a bid for a domain name.\\n   *\\n   * Requirements:\\n   * - The name is listed, or the auction is happening.\\n   * - The msg.value is larger than the current bid price or the auction starting price.\\n   *\\n   * Emits an event {BidPlaced}.\\n   *\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function placeBid(uint256 id) external payable;\\n\\n  /**\\n   * @dev Returns the highest bid and address of the bidder.\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function getAuction(uint256 id) external view returns (DomainAuction memory, uint256 beatPrice);\\n\\n  /**\\n   * @dev Bulk claims the bid name.\\n   *\\n   * Requirements:\\n   * - Must be called after ended time.\\n   * - The method caller can be anyone.\\n   *\\n   * @param ids The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function bulkClaimBidNames(uint256[] calldata ids) external returns (uint256[] memory claimedAts);\\n\\n  /**\\n   * @dev Returns the treasury.\\n   */\\n  function getTreasury() external view returns (address);\\n\\n  /**\\n   * @dev Returns the gap ratio between 2 bids with the starting price. Value in range [0;100_00] is 0%-100%.\\n   */\\n  function getBidGapRatio() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the treasury.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin\\n   *\\n   * Emits an event {TreasuryUpdated}.\\n   */\\n  function setTreasury(address payable) external;\\n\\n  /**\\n   * @dev Sets commission ratio. Value in range [0;100_00] is 0%-100%.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin\\n   *\\n   * Emits an event {BidGapRatioUpdated}.\\n   */\\n  function setBidGapRatio(uint256) external;\\n\\n  /**\\n   * @dev Returns RNSUnified contract.\\n   */\\n  function getRNSUnified() external view returns (INSUnified);\\n}\\n\",\"keccak256\":\"0x135ec8837e89471cc437e90897896264b2bb4ba36ff332f7d30485c397888e03\",\"license\":\"MIT\"},\"src/interfaces/INSDomainPrice.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PeriodScaler } from \\\"../libraries/math/PeriodScalingUtils.sol\\\";\\nimport { IPyth } from \\\"@pythnetwork/IPyth.sol\\\";\\n\\ninterface INSDomainPrice {\\n  error InvalidArrayLength();\\n  error RenewalFeeIsNotOverriden();\\n  error ExceedAuctionDomainExpiry();\\n\\n  struct RenewalFee {\\n    uint256 labelLength;\\n    uint256 fee;\\n  }\\n\\n  struct UnitPrice {\\n    uint256 usd;\\n    uint256 ron;\\n  }\\n\\n  /// @dev Emitted when the renewal reservation ratio is updated.\\n  event TaxRatioUpdated(address indexed operator, uint256 indexed ratio);\\n  /// @dev Emitted when the maximum length of renewal fee is updated.\\n  event MaxRenewalFeeLengthUpdated(address indexed operator, uint256 indexed maxLength);\\n  /// @dev Emitted when the renew fee is updated.\\n  event RenewalFeeByLengthUpdated(address indexed operator, uint256 indexed labelLength, uint256 renewalFee);\\n  /// @dev Emitted when the renew fee of a domain is overridden. Value of `inverseRenewalFee` is 0 when not overridden.\\n  event RenewalFeeOverridingUpdated(address indexed operator, bytes32 indexed labelHash, uint256 inverseRenewalFee);\\n\\n  /// @dev Emitted when the domain price is updated.\\n  event DomainPriceUpdated(\\n    address indexed operator, bytes32 indexed labelHash, uint256 price, bytes32 indexed proofHash, uint256 setType\\n  );\\n  /// @dev Emitted when the rule to rescale domain price is updated.\\n  event DomainPriceScaleRuleUpdated(address indexed operator, uint192 ratio, uint64 period);\\n\\n  /// @dev Emitted when the Pyth Oracle config is updated.\\n  event PythOracleConfigUpdated(\\n    address indexed operator, IPyth indexed pyth, uint256 maxAcceptableAge, bytes32 indexed pythIdForRONUSD\\n  );\\n\\n  /**\\n   * @dev Returns the Pyth oracle config.\\n   */\\n  function getPythOracleConfig() external view returns (IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD);\\n\\n  /**\\n   * @dev Sets the Pyth oracle config.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {PythOracleConfigUpdated}.\\n   */\\n  function setPythOracleConfig(IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD) external;\\n\\n  /**\\n   * @dev Returns the percentage to scale from domain price each period.\\n   */\\n  function getScaleDownRuleForDomainPrice() external view returns (PeriodScaler memory dpScaleRule);\\n\\n  /**\\n   * @dev Sets the percentage to scale from domain price each period.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {DomainPriceScaleRuleUpdated}.\\n   *\\n   * @notice Applies for the business rule: -x% each y seconds.\\n   */\\n  function setScaleDownRuleForDomainPrice(PeriodScaler calldata scaleRule) external;\\n\\n  /**\\n   * @dev Returns the renewal fee by lengths.\\n   */\\n  function getRenewalFeeByLengths() external view returns (RenewalFee[] memory renewalFees);\\n\\n  /**\\n   * @dev Sets the renewal fee by lengths\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {RenewalFeeByLengthUpdated}.\\n   * Emits an event {MaxRenewalFeeLengthUpdated} optionally.\\n   */\\n  function setRenewalFeeByLengths(RenewalFee[] calldata renewalFees) external;\\n\\n  /**\\n   * @dev Returns tax ratio.\\n   */\\n  function getTaxRatio() external view returns (uint256 taxRatio);\\n\\n  /**\\n   * @dev Sets renewal reservation ratio.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits an event {TaxRatioUpdated}.\\n   */\\n  function setTaxRatio(uint256 ratio) external;\\n\\n  /**\\n   * @dev Return the domain price.\\n   * @param label The domain label to register (Eg, 'foo' for 'foo.ron').\\n   */\\n  function getDomainPrice(string memory label) external view returns (uint256 usdPrice, uint256 ronPrice);\\n\\n  /**\\n   * @dev Returns the renewal fee in USD and RON.\\n   * @param label The domain label to register (Eg, 'foo' for 'foo.ron').\\n   * @param duration Amount of second(s).\\n   */\\n  function getRenewalFee(string calldata label, uint256 duration)\\n    external\\n    view\\n    returns (UnitPrice memory basePrice, UnitPrice memory tax);\\n\\n  /**\\n   * @dev Returns the renewal fee of a label. Reverts if not overridden.\\n   * @notice This method is to help developers check the domain renewal fee overriding. Consider using method\\n   * {getRenewalFee} instead for full handling of renewal fees.\\n   */\\n  function getOverriddenRenewalFee(string memory label) external view returns (uint256 usdFee);\\n\\n  /**\\n   * @dev Bulk override renewal fees.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   *\\n   * Emits events {RenewalFeeOverridingUpdated}.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param usdPrices Array of prices in USD. Leave 2^256 - 1 to remove overriding.\\n   */\\n  function bulkOverrideRenewalFees(bytes32[] calldata lbHashes, uint256[] calldata usdPrices) external;\\n\\n  /**\\n   * @dev Bulk try to set domain prices. Returns a boolean array indicating whether domain prices at the corresponding\\n   * indexes if set or not.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   * - The price should be larger than current domain price or it will not be updated.\\n   *\\n   * Emits events {DomainPriceUpdated} optionally.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param ronPrices Array of prices in (W)RON token.\\n   * @param proofHashes Array of proof hashes.\\n   * @param setTypes Array of update types from the operator service.\\n   */\\n  function bulkTrySetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external returns (bool[] memory updated);\\n\\n  /**\\n   * @dev Bulk override domain prices.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   *\\n   * Emits events {DomainPriceUpdated}.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param ronPrices Array of prices in (W)RON token.\\n   * @param proofHashes Array of proof hashes.\\n   * @param setTypes Array of update types from the operator service.\\n   */\\n  function bulkSetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external;\\n\\n  /**\\n   * @dev Returns the converted amount from USD to RON.\\n   */\\n  function convertUSDToRON(uint256 usdAmount) external view returns (uint256 ronAmount);\\n\\n  /**\\n   * @dev Returns the converted amount from RON to USD.\\n   */\\n  function convertRONToUSD(uint256 ronAmount) external view returns (uint256 usdAmount);\\n\\n  /**\\n   * @dev Value equals to keccak256(\\\"OPERATOR_ROLE\\\").\\n   */\\n  function OPERATOR_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the overrider role.\\n   */\\n  function OVERRIDER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\\n   */\\n  function MAX_PERCENTAGE() external pure returns (uint64);\\n\\n  /**\\n   * @dev Decimal for USD.\\n   */\\n  function USD_DECIMALS() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0xcb57a6120bbe131d1c2a2ae72ce6a33ab95f5da4cae85e9cd1731496e26db7b1\",\"license\":\"MIT\"},\"src/interfaces/INSUnified.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport { IAccessControlEnumerable } from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport { ModifyingIndicator } from \\\"../types/ModifyingIndicator.sol\\\";\\n\\ninterface INSUnified is IAccessControlEnumerable, IERC721Metadata {\\n  /// @dev Error: The provided token id is expired.\\n  error Expired();\\n  /// @dev Error: The provided token id is unexists.\\n  error Unexists();\\n  /// @dev Error: The provided id expiry is greater than parent id expiry.\\n  error ExceedParentExpiry();\\n  /// @dev Error: The provided name is unavailable for registration.\\n  error Unavailable();\\n  /// @dev Error: The sender lacks the necessary permissions.\\n  error Unauthorized();\\n  /// @dev Error: Missing controller role required for modification.\\n  error MissingControllerRole();\\n  /// @dev Error: Attempting to set an immutable field, which cannot be modified.\\n  error CannotSetImmutableField();\\n  /// @dev Error: Missing protected settler role required for modification.\\n  error MissingProtectedSettlerRole();\\n  /// @dev Error: Attempting to set an expiry time that is not larger than the previous one.\\n  error ExpiryTimeMustBeLargerThanTheOldOne();\\n  /// @dev Error: The provided name must be registered or is in a grace period.\\n  error NameMustBeRegisteredOrInGracePeriod();\\n\\n  /**\\n   * | Fields\\\\Idc | Modifying Indicator |\\n   * | ---------- | ------------------- |\\n   * | depth      | 0b00000001          |\\n   * | parentId   | 0b00000010          |\\n   * | label      | 0b00000100          |\\n   */\\n  struct ImmutableRecord {\\n    // The level-th of a domain.\\n    uint8 depth;\\n    // The node of parent token. Eg, parent node of vip.duke.ron equals to namehash('duke.ron')\\n    uint256 parentId;\\n    // The label of a domain. Eg, label is vip for domain vip.duke.ron\\n    string label;\\n  }\\n\\n  /**\\n   * | Fields\\\\Idc,Roles | Modifying Indicator | Controller | Protected setter | (Parent) Owner/Spender |\\n   * | ---------------- | ------------------- | ---------- | ---------------- | ---------------------- |\\n   * | resolver         | 0b00001000          | x          |                  | x                      |\\n   * | owner            | 0b00010000          | x          |                  | x                      |\\n   * | expiry           | 0b00100000          | x          |                  |                        |\\n   * | protected        | 0b01000000          |            | x                |                        |\\n   * Note: (Parent) Owner/Spender means parent owner or current owner or current token spender.\\n   */\\n  struct MutableRecord {\\n    // The resolver address.\\n    address resolver;\\n    // The record owner. This field must equal to the owner of token.\\n    address owner;\\n    // Expiry timestamp.\\n    uint64 expiry;\\n    // Flag indicating whether the token is protected or not.\\n    bool protected;\\n  }\\n\\n  struct Record {\\n    ImmutableRecord immut;\\n    MutableRecord mut;\\n  }\\n\\n  /// @dev Emitted when a base URI is updated.\\n  event BaseURIUpdated(address indexed operator, string newURI);\\n  /// @dev Emitted when the grace period for all domain is updated.\\n  event GracePeriodUpdated(address indexed operator, uint64 newGracePeriod);\\n\\n  /**\\n   * @dev Emitted when the record of node is updated.\\n   * @param indicator The binary index of updated fields. Eg, 0b10101011 means fields at position 1, 2, 4, 6, 8 (right\\n   * to left) needs to be updated.\\n   * @param record The updated fields.\\n   */\\n  event RecordUpdated(uint256 indexed node, ModifyingIndicator indicator, Record record);\\n\\n  /**\\n   * @dev Returns the controller role.\\n   * @notice Can set all fields {Record.mut} in token record, excepting {Record.mut.protected}.\\n   */\\n  function CONTROLLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the protected setter role.\\n   * @notice Can set field {Record.mut.protected} in token record by using method `bulkSetProtected`.\\n   */\\n  function PROTECTED_SETTLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the reservation role.\\n   * @notice Never expire for token owner has this role.\\n   */\\n  function RESERVATION_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the max expiry value.\\n   */\\n  function MAX_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev Returns the name hash output of a domain.\\n   */\\n  function namehash(string memory domain) external pure returns (bytes32 node);\\n\\n  /**\\n   * @dev Returns true if the specified name is available for registration.\\n   * Note: Only available after passing the grace period.\\n   */\\n  function available(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the grace period in second(s).\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function getGracePeriod() external view returns (uint64);\\n\\n  /**\\n   * @dev Returns the total minted ids.\\n   * Note: Burning id will not affect `totalMinted`.\\n   */\\n  function totalMinted() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the grace period in second(s).\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function setGracePeriod(uint64) external;\\n\\n  /**\\n   * @dev Sets the base uri.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract owner.\\n   *\\n   */\\n  function setBaseURI(string calldata baseTokenURI) external;\\n\\n  /**\\n   * @dev Mints token for subnode.\\n   *\\n   * Requirements:\\n   * - The token must be available.\\n   * - The method caller must be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   *\\n   * @param parentId The parent node to mint or create subnode.\\n   * @param label The domain label. Eg, label is duke for domain duke.ron.\\n   * @param resolver The resolver address.\\n   * @param owner The token owner.\\n   * @param duration Duration in second(s) to expire. Leave 0 to set as parent.\\n   */\\n  function mint(uint256 parentId, string calldata label, address resolver, address owner, uint64 duration)\\n    external\\n    returns (uint64 expiryTime, uint256 id);\\n\\n  /**\\n   * @dev Returns all record of a domain.\\n   * Reverts if the token is non existent.\\n   */\\n  function getRecord(uint256 id) external view returns (Record memory record);\\n\\n  /**\\n   * @dev Returns the domain name of id.\\n   */\\n  function getDomain(uint256 id) external view returns (string memory domain);\\n\\n  /**\\n   * @dev Returns whether the requester is able to modify the record based on the updated index.\\n   * Note: This method strictly follows the permission of struct {MutableRecord}.\\n   */\\n  function canSetRecord(address requester, uint256 id, ModifyingIndicator indicator)\\n    external\\n    view\\n    returns (bool, bytes4 error);\\n\\n  /**\\n   * @dev Sets record of existing token. Update operation for {Record.mut}.\\n   *\\n   * Requirements:\\n   * - The method caller must have role based on the corresponding `indicator`. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setRecord(uint256 id, ModifyingIndicator indicator, MutableRecord calldata record) external;\\n\\n  /**\\n   * @dev Reclaims ownership. Update operation for {Record.mut.owner}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   * - The method caller should be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function reclaim(uint256 id, address owner) external;\\n\\n  /**\\n   * @dev Renews token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function renew(uint256 id, uint64 duration) external returns (uint64 expiry);\\n\\n  /**\\n   * @dev Sets expiry time for a token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setExpiry(uint256 id, uint64 expiry) external;\\n\\n  /**\\n   * @dev Sets the protected status of a list of ids. Update operation for {Record.mut.protected}.\\n   *\\n   * Requirements:\\n   * - The method caller must have protected setter role.\\n   *\\n   * Emits events {RecordUpdated}.\\n   */\\n  function bulkSetProtected(uint256[] calldata ids, bool protected) external;\\n}\\n\",\"keccak256\":\"0xaef1c58bb7c8688d6677a1c2739c0dc9e645ca5c64dd875be2f2b7a318a11406\",\"license\":\"MIT\"},\"src/libraries/LibEventRange.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct EventRange {\\n  uint256 startedAt;\\n  uint256 endedAt;\\n}\\n\\nlibrary LibEventRange {\\n  /**\\n   * @dev Checks whether the event range is valid.\\n   */\\n  function valid(EventRange calldata range) internal pure returns (bool) {\\n    return range.startedAt <= range.endedAt;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current range is not yet started.\\n   */\\n  function isNotYetStarted(EventRange memory range) internal view returns (bool) {\\n    return block.timestamp < range.startedAt;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current range is ended or not.\\n   */\\n  function isEnded(EventRange memory range) internal view returns (bool) {\\n    return range.endedAt <= block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current block is in period.\\n   */\\n  function isInPeriod(EventRange memory range) internal view returns (bool) {\\n    return range.startedAt <= block.timestamp && block.timestamp < range.endedAt;\\n  }\\n}\\n\",\"keccak256\":\"0x95bf015c4245919cbcbcd810dd597fdb23eb4e58b62df8ef74b1c8c60a969bea\",\"license\":\"MIT\"},\"src/libraries/LibRNSDomain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LibRNSDomain {\\n  /// @dev Value equals to namehash('ron')\\n  uint256 internal constant RON_ID = 0xba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d688;\\n  /// @dev Value equals to namehash('addr.reverse')\\n  uint256 internal constant ADDR_REVERSE_ID = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n  /**\\n   * @dev Calculate the corresponding id given parentId and label.\\n   */\\n  function toId(uint256 parentId, string memory label) internal pure returns (uint256 id) {\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(0x0, parentId)\\n      mstore(0x20, keccak256(add(label, 32), mload(label)))\\n      id := keccak256(0x0, 64)\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the hash of the label.\\n   */\\n  function hashLabel(string memory label) internal pure returns (bytes32 hashed) {\\n    assembly (\\\"memory-safe\\\") {\\n      hashed := keccak256(add(label, 32), mload(label))\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculate the RNS namehash of a str.\\n   */\\n  function namehash(string memory str) internal pure returns (bytes32 hashed) {\\n    // notice: this method is case-sensitive, ensure the string is lowercased before calling this method\\n    assembly (\\\"memory-safe\\\") {\\n      // load str length\\n      let len := mload(str)\\n      // returns bytes32(0x0) if length is zero\\n      if iszero(iszero(len)) {\\n        let hashedLen\\n        // compute pointer to str[0]\\n        let head := add(str, 32)\\n        // compute pointer to str[length - 1]\\n        let tail := add(head, sub(len, 1))\\n        // cleanup dirty bytes if contains any\\n        mstore(0x0, 0)\\n        // loop backwards from `tail` to `head`\\n        for { let i := tail } iszero(lt(i, head)) { i := sub(i, 1) } {\\n          // check if `i` is `head`\\n          let isHead := eq(i, head)\\n          // check if `str[i-1]` is \\\".\\\"\\n          // `0x2e` == bytes1(\\\".\\\")\\n          let isDotNext := eq(shr(248, mload(sub(i, 1))), 0x2e)\\n          if or(isHead, isDotNext) {\\n            // size = distance(length, i) - hashedLength + 1\\n            let size := add(sub(sub(tail, i), hashedLen), 1)\\n            mstore(0x20, keccak256(i, size))\\n            mstore(0x0, keccak256(0x0, 64))\\n            // skip \\\".\\\" thereby + 1\\n            hashedLen := add(hashedLen, add(size, 1))\\n          }\\n        }\\n      }\\n      hashed := mload(0x0)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x715029b2b420c6ec00bc1f939b837acf45d247fde8426089575b0e7b5e84518b\",\"license\":\"MIT\"},\"src/libraries/LibString.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibString {\\n  error InvalidStringLength();\\n  error InvalidCharacter(bytes1 char);\\n\\n  /// @dev Lookup constant for method. See more detail at https://eips.ethereum.org/EIPS/eip-181\\n  bytes32 private constant LOOKUP = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\n  /**\\n   * @dev Returns the length of a given string\\n   *\\n   * @param s The string to measure the length of\\n   * @return The length of the input string\\n   */\\n  function strlen(string memory s) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 i;\\n      uint256 len;\\n      uint256 bytelength = bytes(s).length;\\n      for (len; i < bytelength; len++) {\\n        bytes1 b = bytes(s)[i];\\n        if (b < 0x80) {\\n          i += 1;\\n        } else if (b < 0xE0) {\\n          i += 2;\\n        } else if (b < 0xF0) {\\n          i += 3;\\n        } else if (b < 0xF8) {\\n          i += 4;\\n        } else if (b < 0xFC) {\\n          i += 5;\\n        } else {\\n          i += 6;\\n        }\\n      }\\n      return len;\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an address to string.\\n   */\\n  function toString(address addr) internal pure returns (string memory stringifiedAddr) {\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(stringifiedAddr, 40)\\n      let ptr := add(stringifiedAddr, 0x20)\\n      for { let i := 40 } gt(i, 0) { } {\\n        i := sub(i, 1)\\n        mstore8(add(i, ptr), byte(and(addr, 0xf), LOOKUP))\\n        addr := div(addr, 0x10)\\n\\n        i := sub(i, 1)\\n        mstore8(add(i, ptr), byte(and(addr, 0xf), LOOKUP))\\n        addr := div(addr, 0x10)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts string to address.\\n   * Reverts if the string length is not equal to 40.\\n   */\\n  function parseAddr(string memory stringifiedAddr) internal pure returns (address) {\\n    unchecked {\\n      if (bytes(stringifiedAddr).length != 40) revert InvalidStringLength();\\n      uint160 addr;\\n      for (uint256 i = 0; i < 40; i += 2) {\\n        addr *= 0x100;\\n        addr += uint160(hexCharToDec(bytes(stringifiedAddr)[i])) * 0x10;\\n        addr += hexCharToDec(bytes(stringifiedAddr)[i + 1]);\\n      }\\n      return address(addr);\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a hex char (0-9, a-f, A-F) to decimal number.\\n   * Reverts if the char is invalid.\\n   */\\n  function hexCharToDec(bytes1 c) private pure returns (uint8 r) {\\n    unchecked {\\n      if ((bytes1(\\\"a\\\") <= c) && (c <= bytes1(\\\"f\\\"))) r = uint8(c) - 87;\\n      else if ((bytes1(\\\"A\\\") <= c) && (c <= bytes1(\\\"F\\\"))) r = uint8(c) - 55;\\n      else if ((bytes1(\\\"0\\\") <= c) && (c <= bytes1(\\\"9\\\"))) r = uint8(c) - 48;\\n      else revert InvalidCharacter(c);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9d456b294f0e44ccaabded43a3d96db6270761a167535155a762fe41e968b905\",\"license\":\"MIT\"},\"src/libraries/TimestampWrapperUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct TimestampWrapper {\\n  uint256 value;\\n  uint256 timestamp;\\n}\\n\",\"keccak256\":\"0x18488d153ebc8579907a85cb7e0be828d0de7c571c9f3368a6d200574b012018\",\"license\":\"MIT\"},\"src/libraries/math/LibSafeRange.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibSafeRange {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    unchecked {\\n      c = a + b;\\n      if (c < a) return type(uint256).max;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 ceil) internal pure returns (uint256 c) {\\n    if (a > ceil || b > ceil) return ceil;\\n    c = add(a, b);\\n    if (c > ceil) return ceil;\\n  }\\n}\\n\",\"keccak256\":\"0x12cf5f592a2d80b9c1b0ea11b8fe2b3ed42fc6d62303ba667edc56464baa8810\",\"license\":\"MIT\"},\"src/libraries/math/PeriodScalingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { PowMath } from \\\"./PowMath.sol\\\";\\n\\nstruct PeriodScaler {\\n  uint192 ratio;\\n  uint64 period;\\n}\\n\\nlibrary LibPeriodScaler {\\n  using PowMath for uint256;\\n\\n  error PeriodNumOverflowedUint16(uint256 n);\\n\\n  /// @dev The precision number of calculation is 2\\n  uint256 public constant MAX_PERCENTAGE = 100_00;\\n\\n  /**\\n   * @dev Scales down the input value `v` for a percentage of `self.ratio` each period `self.period`.\\n   * Reverts if the passed period is larger than 2^16 - 1.\\n   *\\n   * @param self The period scaler with specific period and ratio\\n   * @param v The original value to scale based on the rule `self`\\n   * @param maxR The maximum value of 100%. Eg, if the `self.ratio` in range of [0;100_00] reflexes 0-100%, this param\\n   * must be 100_00\\n   * @param dur The passed duration in the same uint with `self.period`\\n   */\\n  function scaleDown(PeriodScaler memory self, uint256 v, uint64 maxR, uint256 dur) internal pure returns (uint256 rs) {\\n    uint256 n = dur / uint256(self.period);\\n    if (n == 0 || self.ratio == 0) return v;\\n    if (maxR == self.ratio) return 0;\\n    if (n > type(uint16).max) revert PeriodNumOverflowedUint16(n);\\n\\n    unchecked {\\n      // Normalizes the input ratios to be in range of [0;MAX_PERCENTAGE]\\n      uint256 p = Math.mulDiv(maxR - self.ratio, MAX_PERCENTAGE, maxR);\\n      return v.mulDiv({ y: p, d: MAX_PERCENTAGE, n: uint16(n) });\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x502d004fbd130a99f3f1e6685aebff9f47300565fbc5a65b4912824ea5eb5b78\",\"license\":\"MIT\"},\"src/libraries/math/PowMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PowMath {\\n  using Math for uint256;\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev Negative exponent n for x*10^n.\\n   */\\n  function exp10(uint256 x, int32 n) internal pure returns (uint256) {\\n    if (n < 0) {\\n      return x / 10 ** uint32(-n);\\n    } else if (n > 0) {\\n      return x * 10 ** uint32(n);\\n    } else {\\n      return x;\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates floor(x * (y / d)**n) with full precision.\\n   */\\n  function mulDiv(uint256 x, uint256 y, uint256 d, uint16 n) internal pure returns (uint256 r) {\\n    unchecked {\\n      if (y == d || n == 0) return x;\\n      r = x;\\n\\n      bool ok;\\n      uint256 r_;\\n      uint16 nd_;\\n\\n      {\\n        uint16 ye = uint16(Math.min(n, findMaxExponent(y)));\\n        while (ye > 0) {\\n          (ok, r_) = r.tryMul(y ** ye);\\n          if (ok) {\\n            r = r_;\\n            n -= ye;\\n            nd_ += ye;\\n          }\\n          ye = uint16(Math.min(ye / 2, n));\\n        }\\n      }\\n\\n      while (n > 0) {\\n        (ok, r_) = r.tryMul(y);\\n        if (ok) {\\n          r = r_;\\n          n--;\\n          nd_++;\\n        } else if (nd_ > 0) {\\n          r /= d;\\n          nd_--;\\n        } else {\\n          r = r.mulDiv(y, d);\\n          n--;\\n        }\\n      }\\n\\n      uint16 de = findMaxExponent(d);\\n      while (nd_ > 0) {\\n        uint16 e = uint16(Math.min(de, nd_));\\n        r /= d ** e;\\n        nd_ -= e;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates floor(x * (y / d)**n) with low precision.\\n   */\\n  function mulDivLowPrecision(uint256 x, uint256 y, uint256 d, uint16 n) internal pure returns (uint256) {\\n    return uncheckedMulDiv(x, y, d, n, findMaxExponent(Math.max(y, d)));\\n  }\\n\\n  /**\\n   * @dev Aggregated calculate multiplications.\\n   * ```\\n   * r = x*(y/d)^k\\n   *   = \\\\prod(x*(y/d)^{k_i}) \\\\ where \\\\ sum(k_i) = k\\n   * ```\\n   */\\n  function uncheckedMulDiv(uint256 x, uint256 y, uint256 d, uint16 n, uint16 maxE) internal pure returns (uint256 r) {\\n    unchecked {\\n      r = x;\\n      uint16 e;\\n      while (n > 0) {\\n        e = uint16(Math.min(n, maxE));\\n        r = r.mulDiv(y ** e, d ** e);\\n        n -= e;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest exponent `k` where, x^k <= 2^256-1\\n   * Note: n = Surd[2^256-1,k]\\n   *         = 10^( log2(2^256-1) / k * log10(2) )\\n   */\\n  function findMaxExponent(uint256 x) internal pure returns (uint16 k) {\\n    if (x < 3) k = 255;\\n    else if (x < 4) k = 128;\\n    else if (x < 16) k = 64;\\n    else if (x < 256) k = 32;\\n    else if (x < 7132) k = 20;\\n    else if (x < 11376) k = 19;\\n    else if (x < 19113) k = 18;\\n    else if (x < 34132) k = 17;\\n    else if (x < 65536) k = 16;\\n    else if (x < 137271) k = 15;\\n    else if (x < 319558) k = 14;\\n    else if (x < 847180) k = 13;\\n    else if (x < 2642246) k = 12;\\n    else if (x < 10134189) k = 11;\\n    else if (x < 50859009) k = 10;\\n    else if (x < 365284285) k = 9;\\n    else if (x < 4294967296) k = 8;\\n    else if (x < 102116749983) k = 7;\\n    else if (x < 6981463658332) k = 6;\\n    else if (x < 2586638741762875) k = 5;\\n    else if (x < 18446744073709551616) k = 4;\\n    else if (x < 48740834812604276470692695) k = 3;\\n    else if (x < 340282366920938463463374607431768211456) k = 2;\\n    else k = 1;\\n  }\\n}\\n\",\"keccak256\":\"0x29f943cf7c61149bc9a624244901720fc3a349adb418555db1db2a045fcdfb70\",\"license\":\"MIT\"},\"src/libraries/pyth/PythConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { PythStructs } from \\\"@pythnetwork/PythStructs.sol\\\";\\nimport { PowMath } from \\\"../math/PowMath.sol\\\";\\n\\nlibrary PythConverter {\\n  error ErrExponentTooLarge(int32 expo);\\n  error ErrComputedPriceTooLarge(int32 expo1, int32 expo2, int64 price1);\\n\\n  /**\\n   * @dev Multiples and converts the price into token wei with decimals `outDecimals`.\\n   */\\n  function mul(PythStructs.Price memory self, uint256 inpWei, int32 inpDecimals, int32 outDecimals)\\n    internal\\n    pure\\n    returns (uint256 outWei)\\n  {\\n    return Math.mulDiv(\\n      inpWei, PowMath.exp10(uint256(int256(self.price)), outDecimals + self.expo), PowMath.exp10(1, inpDecimals)\\n    );\\n  }\\n\\n  /**\\n   * @dev Inverses token price of tokenA/tokenB to tokenB/tokenA.\\n   */\\n  function inverse(PythStructs.Price memory self, int32 expo) internal pure returns (PythStructs.Price memory outPrice) {\\n    uint256 exp10p1 = PowMath.exp10(1, -self.expo);\\n    if (exp10p1 > uint256(type(int256).max)) revert ErrExponentTooLarge(self.expo);\\n    uint256 exp10p2 = PowMath.exp10(1, -expo);\\n    if (exp10p2 > uint256(type(int256).max)) revert ErrExponentTooLarge(expo);\\n    int256 price = (int256(exp10p1) * int256(exp10p2)) / self.price;\\n    if (price > type(int64).max) revert ErrComputedPriceTooLarge(self.expo, expo, self.price);\\n\\n    return PythStructs.Price({ price: int64(price), conf: self.conf, expo: expo, publishTime: self.publishTime });\\n  }\\n}\\n\",\"keccak256\":\"0x87ade16f6e931f6a3ead7706b0e550ee2c2cdee0be2f218488df93588e787f06\",\"license\":\"MIT\"},\"src/types/ModifyingIndicator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype ModifyingIndicator is uint256;\\n\\nusing { hasAny } for ModifyingIndicator global;\\nusing { or as | } for ModifyingIndicator global;\\nusing { and as & } for ModifyingIndicator global;\\nusing { eq as == } for ModifyingIndicator global;\\nusing { not as ~ } for ModifyingIndicator global;\\nusing { xor as ^ } for ModifyingIndicator global;\\nusing { neq as != } for ModifyingIndicator global;\\n\\n/// @dev Indicator for modifying immutable fields: Depth, ParentId, Label. See struct {INSUnified.ImmutableRecord}.\\nModifyingIndicator constant IMMUTABLE_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x7);\\n\\n/// @dev Indicator for modifying user fields: Resolver, Owner. See struct {INSUnified.MutableRecord}.\\nModifyingIndicator constant USER_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x18);\\n\\n/// @dev Indicator when modifying all of the fields in {ModifyingField}.\\nModifyingIndicator constant ALL_FIELDS_INDICATOR = ModifyingIndicator.wrap(type(uint256).max);\\n\\nfunction eq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return ModifyingIndicator.unwrap(self) == ModifyingIndicator.unwrap(other);\\n}\\n\\nfunction neq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return !eq(self, other);\\n}\\n\\nfunction xor(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) ^ ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction not(ModifyingIndicator self) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(~ModifyingIndicator.unwrap(self));\\n}\\n\\nfunction or(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) | ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction and(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) & ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction hasAny(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return self & other != ModifyingIndicator.wrap(0);\\n}\\n\",\"keccak256\":\"0x2e42fbba358c470ff6b57268367d248f0e2fcf8d7142d762688f7aef5efae7ee\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 182602,
  "numDeployments": 3,
  "storageLayout": {
    "storage": [
      {
        "astId": 50078,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 50081,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 48551,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)48546_storage)"
      },
      {
        "astId": 48861,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)54430_storage)"
      },
      {
        "astId": 60217,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "____gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 60221,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_pyth",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IPyth)54836"
      },
      {
        "astId": 60225,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_auction",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(INSAuction)64912"
      },
      {
        "astId": 60228,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_taxRatio",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 60231,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_rnfMaxLength",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 60234,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_maxAcceptableAge",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 60237,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_pythIdForRONUSD",
        "offset": 0,
        "slot": "58",
        "type": "t_bytes32"
      },
      {
        "astId": 60241,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_dpDownScaler",
        "offset": 0,
        "slot": "59",
        "type": "t_struct(PeriodScaler)67177_storage"
      },
      {
        "astId": 60246,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_rnFee",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 60252,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_dp",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_bytes32,t_struct(TimestampWrapper)67100_storage)"
      },
      {
        "astId": 60257,
        "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
        "label": "_rnFeeOverriding",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(INSAuction)64912": {
        "encoding": "inplace",
        "label": "contract INSAuction",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)54836": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)54430_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)54430_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)48546_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)48546_storage"
      },
      "t_mapping(t_bytes32,t_struct(TimestampWrapper)67100_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TimestampWrapper)",
        "numberOfBytes": "32",
        "value": "t_struct(TimestampWrapper)67100_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)54430_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 54429,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)54115_storage"
          }
        ]
      },
      "t_struct(PeriodScaler)67177_storage": {
        "encoding": "inplace",
        "label": "struct PeriodScaler",
        "numberOfBytes": "32",
        "members": [
          {
            "astId": 67174,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "ratio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint192"
          },
          {
            "astId": 67176,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "period",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ]
      },
      "t_struct(RoleData)48546_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 48543,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 48545,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)54115_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 54110,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 54114,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_struct(TimestampWrapper)67100_storage": {
        "encoding": "inplace",
        "label": "struct TimestampWrapper",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 67097,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 67099,
            "contract": "src/RNSDomainPrice.sol:RNSDomainPrice",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1698139032,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "getOverriddenRenewalFee(string)": {
        "notice": "This method is to help developers check the domain renewal fee overriding. Consider using method {getRenewalFee} instead for full handling of renewal fees."
      },
      "setScaleDownRuleForDomainPrice((uint192,uint64))": {
        "notice": "Applies for the business rule: -x% each y seconds."
      }
    }
  }
}