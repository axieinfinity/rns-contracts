{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "CommitmentTooNew",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "CommitmentTooOld",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "DurationTooShort",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "requestOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "nameProtected",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "ownerWhitelisted",
          "type": "bool"
        }
      ],
      "name": "ErrInvalidRegisterProtectedName",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "ErrRequestedForProtectedName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxCommitmentAgeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxCommitmentAgeTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverRequiredWhenDataSupplied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "UnexpiredCommitmentExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minCommitmentAge",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCommitmentAge",
          "type": "uint256"
        }
      ],
      "name": "CommitmentAgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract INSDomainPrice",
          "name": "newDomainPrice",
          "type": "address"
        }
      ],
      "name": "DomainPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "MinRegistrationDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ronPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expires",
          "type": "uint64"
        }
      ],
      "name": "NameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expires",
          "type": "uint64"
        }
      ],
      "name": "NameRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ProtectedNamesWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_DOMAIN_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "bulkWhitelistProtectedNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "reverseRecord",
          "type": "bool"
        }
      ],
      "name": "computeCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "computeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommitmentAgeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCommitmentAge",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinRegistrationDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNameChecker",
      "outputs": [
        {
          "internalType": "contract INameChecker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOracle",
      "outputs": [
        {
          "internalType": "contract INSDomainPrice",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRNSUnified",
      "outputs": [
        {
          "internalType": "contract INSUnified",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReverseRegistrar",
      "outputs": [
        {
          "internalType": "contract INSReverseRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getWhitelistProtectedNameStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minRegistrationDuration",
          "type": "uint256"
        },
        {
          "internalType": "contract INSUnified",
          "name": "rnsUnified",
          "type": "address"
        },
        {
          "internalType": "contract INameChecker",
          "name": "nameChecker",
          "type": "address"
        },
        {
          "internalType": "contract INSDomainPrice",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract INSReverseRegistrar",
          "name": "reverseRegistrar",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "reverseRecord",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "reverseRecord",
          "type": "bool"
        }
      ],
      "name": "registerProtectedName",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "rentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ronPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCommitmentAge",
          "type": "uint256"
        }
      ],
      "name": "setCommitmentAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setMinRegistrationDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INSDomainPrice",
          "name": "priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "valid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "address": "0x942B2DC201bACF99fec1f877BDD30C394325F3Cc",
  "args": "0x",
  "blockNumber": 21224275,
  "bytecode": "0x60806040526000805460ff19169055600180556200001c62000022565b620000e9565b60005462010000900460ff1615620000905760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b600054610100900460ff90811614620000e7576000805461ff00191661ff0017905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612f2d80620000f96000396000f3fe6080604052600436106102255760003560e01c80638ca3d18311610123578063cb80fe2f116100ab578063f0f442601161006f578063f0f4426014610668578063f14fcbc814610688578063f5b541a6146106a8578063fb021939146106dc578063fca513a8146106fc57600080fd5b8063cb80fe2f146105d3578063d547741f146105e6578063db9bf5ed14610606578063e4214b4614610626578063e63ab1e91461064657600080fd5b8063a217fddf116100f2578063a217fddf1461053e578063aeb8ce9b14610553578063b24b17b014610573578063c078f16a14610593578063ca15c873146105b357600080fd5b80638ca3d183146104cb5780639010d07c146104de57806391d14854146104fe5780639791c0971461051e57600080fd5b80633b6c2ea3116101b15780635c975abb116101755780635c975abb1461044057806364c65705146104585780636df99353146104785780638456cb59146104985780638c843314146104ad57600080fd5b80633b6c2ea31461039d5780633f4ba83a146103e357806342c20288146103f8578063530e784f1461040d5780635a7051691461042d57600080fd5b8063248a9ca3116101f8578063248a9ca3146102d857806329aa4f51146103165780632f2ff15d1461033d57806336568abe1461035f5780633b19e84a1461037f57600080fd5b806301ffc9a71461022a5780631321889f1461025f578063224b04de14610288578063237a78fb146102ba575b600080fd5b34801561023657600080fd5b5061024a610245366004612041565b61071a565b60405190151581526020015b60405180910390f35b34801561026b57600080fd5b506036546037545b60408051928352602083019190915201610256565b34801561029457600080fd5b50603b546001600160a01b03165b6040516001600160a01b039091168152602001610256565b3480156102c657600080fd5b50603d546001600160a01b03166102a2565b3480156102e457600080fd5b506103086102f336600461206b565b60009081526002602052604090206001015490565b604051908152602001610256565b34801561032257600080fd5b5061032b600381565b60405160ff9091168152602001610256565b34801561034957600080fd5b5061035d610358366004612099565b610745565b005b34801561036b57600080fd5b5061035d61037a366004612099565b61076f565b34801561038b57600080fd5b506039546001600160a01b03166102a2565b3480156103a957600080fd5b5061024a6103b8366004612099565b6000918252603f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156103ef57600080fd5b5061035d6107f2565b34801561040457600080fd5b50603854610308565b34801561041957600080fd5b5061035d6104283660046120c9565b610815565b61035d61043b3660046120fb565b610829565b34801561044c57600080fd5b5060005460ff1661024a565b34801561046457600080fd5b5061035d61047336600461217d565b6109d8565b34801561048457600080fd5b5061035d610493366004612284565b610b84565b3480156104a457600080fd5b5061035d610cbd565b3480156104b957600080fd5b50603a546001600160a01b03166102a2565b61035d6104d9366004612414565b610cdd565b3480156104ea57600080fd5b506102a26104f93660046124cf565b610e0b565b34801561050a57600080fd5b5061024a610519366004612099565b610e2a565b34801561052a57600080fd5b5061024a6105393660046124f1565b610e55565b34801561054a57600080fd5b50610308600081565b34801561055f57600080fd5b5061024a61056e3660046124f1565b610ee3565b34801561057f57600080fd5b5061027361058e36600461252d565b610f6e565b34801561059f57600080fd5b5061035d6105ae36600461206b565b61101e565b3480156105bf57600080fd5b506103086105ce36600461206b565b611032565b61035d6105e1366004612573565b611049565b3480156105f257600080fd5b5061035d610601366004612099565b611156565b34801561061257600080fd5b50610308610621366004612573565b61117b565b34801561063257600080fd5b5061035d6106413660046124cf565b6111fc565b34801561065257600080fd5b50610308600080516020612ed883398151915281565b34801561067457600080fd5b5061035d6106833660046120c9565b611211565b34801561069457600080fd5b5061035d6106a336600461206b565b61123f565b3480156106b457600080fd5b506103087f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b3480156106e857600080fd5b506103086106f73660046124f1565b611298565b34801561070857600080fd5b50603c546001600160a01b03166102a2565b60006001600160e01b03198216635a05180f60e01b148061073f575061073f826112d5565b92915050565b6000828152600260205260409020600101546107608161130a565b61076a8383611314565b505050565b6001600160a01b03811633146107e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107ee8282611336565b5050565b600080516020612ed883398151915261080a8161130a565b610812611358565b50565b60006108208161130a565b6107ee826113aa565b610831611401565b610839611449565b600061087c84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250610f6e915050565b915050803410156108a05760405163044044a560e21b815260040160405180910390fd5b60006108ac823461264d565b905060006108ef86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061129892505050565b603a54604051635569f33d60e01b8152600481018390526001600160401b03871660248201529192506000916001600160a01b0390911690635569f33d906044016020604051808303816000875af115801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190612660565b9050817fda0eda2cd32a098c8b27ed6a56aeb5c332b8abb98491f4357ea58e118b724c6d888887856040516109ab94939291906126a6565b60405180910390a282156109c3576109c333846114a2565b6109cb611507565b5050505061076a60018055565b60005462010000900460ff16158080156109fd5750600054600161010090910460ff16105b80610a1d5750303b158015610a1d575060005460ff610100909104166001145b610a805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107db565b6000805461ff0019166101001790558015610aa7576000805462ff00001916620100001790555b610abf600080516020612ed88339815191528b61151d565b610aca60008c61151d565b610ad3836113aa565b610adc86611527565b610ae6878961155e565b603980546001600160a01b03808c166001600160a01b031992831617909255603a8054888416908316179055603b8054878416908316179055603d8054928516929091169190911790558015610b77576000805462ff000019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610bae8161130a565b84801580610bbc5750808414155b15610bda57604051634ec4810560e11b815260040160405180910390fd5b60005b81811015610c6a5783603f60008a8a85818110610bfc57610bfc6126da565b9050602002013581526020019081526020016000206000888885818110610c2557610c256126da565b9050602002016020810190610c3a91906120c9565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610bdd565b50336001600160a01b03167fb04cd4173c4030a0f2bf2acabc9484f9014ecf5654be55afb48f3694c0804e3b8888888888604051610cac9594939291906126f0565b60405180910390a250505050505050565b600080516020612ed8833981519152610cd58161130a565b6108126115e8565b610ce5611401565b610ced611449565b6000610cf888611298565b603a546040516303e9e60960e01b8152600481018390529192506000916001600160a01b03909116906303e9e60990602401600060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d6f9190810190612868565b602090810151606001516000848152603f835260408082206001600160a01b038d168352909352919091205490915060ff16811580610dac575080155b15610dd25789898383604051631fc5717160e01b81526004016107db9493929190612976565b600080610ddf8c8b611625565b91509150610df48c8c8c8c8c8c8c898961167d565b5050505050610e0260018055565b50505050505050565b6000828152600360205260408120610e2390836117a7565b9392505050565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006003610e62836117b3565b1015801561073f5750603b546040516303f6911960e21b81526001600160a01b0390911690630fda446490610e9b9085906004016129b0565b602060405180830381865afa158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc91906129c3565b1592915050565b6000610eee82610e55565b801561073f5750603a546001600160a01b03166396e494e8610f0f84611298565b6040518263ffffffff1660e01b8152600401610f2d91815260200190565b602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f91906129c3565b603c5460405163f4651f4960e01b81526000918291829182916001600160a01b039091169063f4651f4990610fa990899089906004016129e0565b608060405180830381865afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190612a3b565b80518251929450909250610ffd91612a70565b9350806020015182602001516110139190612a70565b925050509250929050565b60006110298161130a565b6107ee82611527565b600081815260036020526040812061073f906118a1565b611051611401565b611059611449565b600061106489611298565b603a546040516303e9e60960e01b8152600481018390529192506001600160a01b0316906303e9e60990602401600060405180830381865afa1580156110ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d69190810190612868565b6020015160600151156110fe57886040516331597a5760e21b81526004016107db91906129b0565b60006111108a8a8a8a8a8a8a8a61117b565b905061111d8a89836118ab565b60008061112a8c8b611625565b9150915061113f8c8c8c8b8b8b8b898961167d565b5050505061114c60018055565b5050505050505050565b6000828152600260205260409020600101546111718161130a565b61076a8383611336565b6000821580159061119357506001600160a01b038516155b156111b1576040516334fd817160e21b815260040160405180910390fd5b6111ba89611298565b888888888888886040516020016111d8989796959493929190612b14565b60405160208183030381529060405280519060200120905098975050505050505050565b60006112078161130a565b61076a838361155e565b600061121c8161130a565b50603980546001600160a01b0319166001600160a01b0392909216919091179055565b611247611401565b6037546000828152603e6020526040902054429161126491612a70565b1061128557604051630a059d7160e01b8152600481018290526024016107db565b6000908152603e60205260409020429055565b600061073f7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d688836000918252805160209182012090526040902090565b60006001600160e01b03198216637965db0b60e01b148061073f57506301ffc9a760e01b6001600160e01b031983161461073f565b6108128133611985565b61131e82826119b8565b600082815260036020526040902061076a9082611a3e565b6113408282611a53565b600082815260036020526040902061076a9082611aba565b611360611acf565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603c80546001600160a01b0319166001600160a01b03831690811790915560405190815233907fa0e5780c6b121c723ec81de517e849c838390affbdc0a70680a3065e47ff3655906020015b60405180910390a250565b60005460ff16156114475760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107db565b565b60026001540361149b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107db565b6002600155565b60006114ae8383611b18565b90508061076a576114c7836001600160a01b0316611b8e565b6114d083611ba4565b6040516020016114e1929190612b74565b60408051601f198184030181529082905262461bcd60e51b82526107db916004016129b0565b603954611447906001600160a01b0316476114a2565b6107ee8282611314565b603881905560405181815233907f59dadbf6542974405b3c262294675f8dd6fb933e6e6556b04b41aaac6e42352c906020016113f6565b4281111561157f57604051630b4319e560e21b815260040160405180910390fd5b81811161159f576040516307cb550760e31b815260040160405180910390fd5b60368290556037819055604080518381526020810183905233917f26a34e9441e83658dfe0e99d79186a1f7cb28c0867d3caddf5cd8b79844adf8f910160405180910390a25050565b6115f0611401565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861138d3390565b6000806116328484610f6e565b9092509050348111156116585760405163044044a560e21b815260040160405180910390fd5b3481810390821461166d5761166d33826114a2565b50611676611507565b9250929050565b600080603a60009054906101000a90046001600160a01b03166001600160a01b0316630570891f7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d6888d8b8e8e6040518663ffffffff1660e01b81526004016116e9959493929190612bf2565b60408051808303816000875af1158015611707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172b9190612c3d565b909250905085156117425761174288828989611bbb565b8415611752576117528b8b611c39565b896001600160a01b0316817f8b0e0cd1a643dbca06e60f7e03e5ff3c4e72b78e1c9842b5c3a29ad3ce8d384b8d8688876040516117929493929190612c6b565b60405180910390a35050505050505050505050565b6000610e238383611cd0565b600080600080845190505b808310156118995760008584815181106117da576117da6126da565b01602001516001600160f81b0319169050600160ff1b8110156118025760018401935061188d565b600760fd1b6001600160f81b0319821610156118235760028401935061188d565b600f60fc1b6001600160f81b0319821610156118445760038401935061188d565b601f60fb1b6001600160f81b0319821610156118655760048401935061188d565b603f60fa1b6001600160f81b0319821610156118865760058401935061188d565b6006840193505b506001909101906117be565b509392505050565b600061073f825490565b603854826001600160401b031610156118e2576040516378a3dfc160e11b81526001600160401b03831660048201526024016107db565b6118eb83610ee3565b61190a57826040516308eee0fd60e31b81526004016107db91906129b0565b6000818152603e6020526040812054611923904261264d565b905060365481101561194b57604051635320bcf960e01b8152600481018390526024016107db565b8060375410156119715760405163cb7690d760e01b8152600481018390526024016107db565b506000908152603e60205260408120555050565b61198f8282610e2a565b6107ee5761199c81611b8e565b6119a7836020611cfa565b6040516020016114e1929190612ca3565b6119c28282610e2a565b6107ee5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610e23836001600160a01b038416611e95565b611a5d8282610e2a565b156107ee5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610e23836001600160a01b038416611ee4565b60005460ff166114475760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107db565b604080516000808252602082019092526001600160a01b038416908390604051611b429190612d18565b60006040518083038185875af1925050503d8060008114611b7f576040519150601f19603f3d011682016040523d82523d6000602084013e611b84565b606091505b5090949350505050565b606061073f6001600160a01b0383166014611cfa565b606061073f82611bb384611fd7565b600101611cfa565b60405163e32954eb60e01b81526001600160a01b0385169063e32954eb90611beb90869086908690600401612d34565b6000604051808303816000875af1158015611c0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c329190810190612d57565b5050505050565b603d546040516001600160a01b039091169063c9119941908390611c61908690602001612e2e565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611c8d929190612e56565b6020604051808303816000875af1158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190612e7a565b6000826000018281548110611ce757611ce76126da565b9060005260206000200154905092915050565b60606000611d09836002612e93565b611d14906002612a70565b6001600160401b03811115611d2b57611d2b612307565b6040519080825280601f01601f191660200182016040528015611d55576020820181803683370190505b509050600360fc1b81600081518110611d7057611d706126da565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d9f57611d9f6126da565b60200101906001600160f81b031916908160001a9053506000611dc3846002612e93565b611dce906001612a70565b90505b6001811115611e46576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e0257611e026126da565b1a60f81b828281518110611e1857611e186126da565b60200101906001600160f81b031916908160001a90535060049490941c93611e3f81612eaa565b9050611dd1565b508315610e235760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107db565b6000818152600183016020526040812054611edc5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561073f565b50600061073f565b60008181526001830160205260408120548015611fcd576000611f0860018361264d565b8554909150600090611f1c9060019061264d565b9050818114611f81576000866000018281548110611f3c57611f3c6126da565b9060005260206000200154905080876000018481548110611f5f57611f5f6126da565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f9257611f92612ec1565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061073f565b600091505061073f565b600080608083901c15611fef5760809290921c916010015b604083901c156120045760409290921c916008015b602083901c156120195760209290921c916004015b601083901c1561202e5760109290921c916002015b600883901c1561073f5760010192915050565b60006020828403121561205357600080fd5b81356001600160e01b031981168114610e2357600080fd5b60006020828403121561207d57600080fd5b5035919050565b6001600160a01b038116811461081257600080fd5b600080604083850312156120ac57600080fd5b8235915060208301356120be81612084565b809150509250929050565b6000602082840312156120db57600080fd5b8135610e2381612084565b6001600160401b038116811461081257600080fd5b60008060006040848603121561211057600080fd5b83356001600160401b038082111561212757600080fd5b818601915086601f83011261213b57600080fd5b81358181111561214a57600080fd5b87602082850101111561215c57600080fd5b60209283019550935050840135612172816120e6565b809150509250925092565b6000806000806000806000806000806101408b8d03121561219d57600080fd5b8a356121a881612084565b995060208b01356121b881612084565b985060408b01356121c881612084565b975060608b0135965060808b0135955060a08b0135945060c08b01356121ed81612084565b935060e08b01356121fd81612084565b92506101008b013561220e81612084565b91506101208b013561221f81612084565b809150509295989b9194979a5092959850565b60008083601f84011261224457600080fd5b5081356001600160401b0381111561225b57600080fd5b6020830191508360208260051b850101111561167657600080fd5b801515811461081257600080fd5b60008060008060006060868803121561229c57600080fd5b85356001600160401b03808211156122b357600080fd5b6122bf89838a01612232565b909750955060208801359150808211156122d857600080fd5b506122e588828901612232565b90945092505060408601356122f981612276565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561233f5761233f612307565b60405290565b604051606081016001600160401b038111828210171561233f5761233f612307565b604051601f8201601f191681016001600160401b038111828210171561238f5761238f612307565b604052919050565b60006001600160401b038211156123b0576123b0612307565b50601f01601f191660200190565b600082601f8301126123cf57600080fd5b81356123e26123dd82612397565b612367565b8181528460208386010111156123f757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060c0888a03121561242f57600080fd5b87356001600160401b038082111561244657600080fd5b6124528b838c016123be565b985060208a0135915061246482612084565b909650604089013590612476826120e6565b90955060608901359061248882612084565b9094506080890135908082111561249e57600080fd5b506124ab8a828b01612232565b90945092505060a08801356124bf81612276565b8091505092959891949750929550565b600080604083850312156124e257600080fd5b50508035926020909101359150565b60006020828403121561250357600080fd5b81356001600160401b0381111561251957600080fd5b612525848285016123be565b949350505050565b6000806040838503121561254057600080fd5b82356001600160401b0381111561255657600080fd5b612562858286016123be565b92505060208301356120be816120e6565b60008060008060008060008060e0898b03121561258f57600080fd5b88356001600160401b03808211156125a657600080fd5b6125b28c838d016123be565b995060208b013591506125c482612084565b90975060408a0135906125d6826120e6565b90965060608a0135955060808a0135906125ef82612084565b90945060a08a0135908082111561260557600080fd5b506126128b828c01612232565b90945092505060c089013561262681612276565b809150509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8181038181111561073f5761073f612637565b60006020828403121561267257600080fd5b8151610e23816120e6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006126ba60608301868861267d565b90508360208301526001600160401b038316604083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b6060808252810185905260006001600160fb1b0386111561271057600080fd5b8560051b8088608085013760809083018381038201602080860191909152918101869052869160009160a0015b8783101561276d57833561275081612084565b6001600160a01b031681529281019260019290920191810161273d565b8615156040870152935061278092505050565b9695505050505050565b60005b838110156127a557818101518382015260200161278d565b50506000910152565b60006127bc6123dd84612397565b90508281528383830111156127d057600080fd5b610e2383602083018461278a565b6000608082840312156127f057600080fd5b604051608081018181106001600160401b038211171561281257612812612307565b8060405250809150825161282581612084565b8152602083015161283581612084565b60208201526040830151612848816120e6565b6040820152606083015161285b81612276565b6060919091015292915050565b6000602080838503121561287b57600080fd5b82516001600160401b038082111561289257600080fd5b9084019060a082870312156128a657600080fd5b6128ae61231d565b8251828111156128bd57600080fd5b8301606081890312156128cf57600080fd5b6128d7612345565b815160ff811681146128e857600080fd5b8152818601518682015260408201518481111561290457600080fd5b82019350601f8401891361291757600080fd5b6129258985518887016127ae565b6040820152825250612939878486016127de565b848201528094505050505092915050565b6000815180845261296281602086016020860161278a565b601f01601f19169290920160200192915050565b608081526000612989608083018761294a565b6001600160a01b039590951660208301525091151560408301521515606090910152919050565b602081526000610e23602083018461294a565b6000602082840312156129d557600080fd5b8151610e2381612276565b6040815260006129f3604083018561294a565b90506001600160401b03831660208301529392505050565b600060408284031215612a1d57600080fd5b612a2561231d565b9050815181526020820151602082015292915050565b60008060808385031215612a4e57600080fd5b612a588484612a0b565b9150612a678460408501612a0b565b90509250929050565b8082018082111561073f5761073f612637565b81835260006020808501808196508560051b810191508460005b87811015612b075782840389528135601e19883603018112612abe57600080fd5b870185810190356001600160401b03811115612ad957600080fd5b803603821315612ae857600080fd5b612af386828461267d565b9a87019a9550505090840190600101612a9d565b5091979650505050505050565b8881526001600160a01b0388811660208301526001600160401b0388166040830152606082018790528516608082015260e060a08201819052600090612b5d9083018587612a83565b905082151560c08301529998505050505050505050565b7f5472616e7366657248656c7065723a20636f756c64206e6f74207472616e7366815269032b9102927a7103a37960b51b602082015260008351612bbf81602a85016020880161278a565b660103b30b63ab2960cd1b602a918401918201528351612be681603184016020880161278a565b01603101949350505050565b85815260a060208201526000612c0b60a083018761294a565b6001600160a01b0395861660408401529390941660608201526001600160401b03919091166080909101529392505050565b60008060408385031215612c5057600080fd5b8251612c5b816120e6565b6020939093015192949293505050565b608081526000612c7e608083018761294a565b60208301959095525060408101929092526001600160401b0316606090910152919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612cdb81601785016020880161278a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d0c81602884016020880161278a565b01602801949350505050565b60008251612d2a81846020870161278a565b9190910192915050565b838152604060208201526000612d4e604083018486612a83565b95945050505050565b60006020808385031215612d6a57600080fd5b82516001600160401b0380821115612d8157600080fd5b818501915085601f830112612d9557600080fd5b815181811115612da757612da7612307565b8060051b612db6858201612367565b9182528381018501918581019089841115612dd057600080fd5b86860192505b83831015612e2157825185811115612dee5760008081fd5b8601603f81018b13612e005760008081fd5b612e118b89830151604084016127ae565b8352509186019190860190612dd6565b9998505050505050505050565b60008251612e4081846020870161278a565b63173937b760e11b920191825250600401919050565b6001600160a01b03831681526040602082018190526000906125259083018461294a565b600060208284031215612e8c57600080fd5b5051919050565b808202811582820484141761073f5761073f612637565b600081612eb957612eb9612637565b506000190190565b634e487b7160e01b600052603160045260246000fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212206a3d52d10991a468c57c6615bb62fcc62fde33eb734d4cc15addc19f2f75fb7b64736f6c63430008150033",
  "chainId": 2021,
  "contractName": "RONRegistrarController",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c80638ca3d18311610123578063cb80fe2f116100ab578063f0f442601161006f578063f0f4426014610668578063f14fcbc814610688578063f5b541a6146106a8578063fb021939146106dc578063fca513a8146106fc57600080fd5b8063cb80fe2f146105d3578063d547741f146105e6578063db9bf5ed14610606578063e4214b4614610626578063e63ab1e91461064657600080fd5b8063a217fddf116100f2578063a217fddf1461053e578063aeb8ce9b14610553578063b24b17b014610573578063c078f16a14610593578063ca15c873146105b357600080fd5b80638ca3d183146104cb5780639010d07c146104de57806391d14854146104fe5780639791c0971461051e57600080fd5b80633b6c2ea3116101b15780635c975abb116101755780635c975abb1461044057806364c65705146104585780636df99353146104785780638456cb59146104985780638c843314146104ad57600080fd5b80633b6c2ea31461039d5780633f4ba83a146103e357806342c20288146103f8578063530e784f1461040d5780635a7051691461042d57600080fd5b8063248a9ca3116101f8578063248a9ca3146102d857806329aa4f51146103165780632f2ff15d1461033d57806336568abe1461035f5780633b19e84a1461037f57600080fd5b806301ffc9a71461022a5780631321889f1461025f578063224b04de14610288578063237a78fb146102ba575b600080fd5b34801561023657600080fd5b5061024a610245366004612041565b61071a565b60405190151581526020015b60405180910390f35b34801561026b57600080fd5b506036546037545b60408051928352602083019190915201610256565b34801561029457600080fd5b50603b546001600160a01b03165b6040516001600160a01b039091168152602001610256565b3480156102c657600080fd5b50603d546001600160a01b03166102a2565b3480156102e457600080fd5b506103086102f336600461206b565b60009081526002602052604090206001015490565b604051908152602001610256565b34801561032257600080fd5b5061032b600381565b60405160ff9091168152602001610256565b34801561034957600080fd5b5061035d610358366004612099565b610745565b005b34801561036b57600080fd5b5061035d61037a366004612099565b61076f565b34801561038b57600080fd5b506039546001600160a01b03166102a2565b3480156103a957600080fd5b5061024a6103b8366004612099565b6000918252603f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156103ef57600080fd5b5061035d6107f2565b34801561040457600080fd5b50603854610308565b34801561041957600080fd5b5061035d6104283660046120c9565b610815565b61035d61043b3660046120fb565b610829565b34801561044c57600080fd5b5060005460ff1661024a565b34801561046457600080fd5b5061035d61047336600461217d565b6109d8565b34801561048457600080fd5b5061035d610493366004612284565b610b84565b3480156104a457600080fd5b5061035d610cbd565b3480156104b957600080fd5b50603a546001600160a01b03166102a2565b61035d6104d9366004612414565b610cdd565b3480156104ea57600080fd5b506102a26104f93660046124cf565b610e0b565b34801561050a57600080fd5b5061024a610519366004612099565b610e2a565b34801561052a57600080fd5b5061024a6105393660046124f1565b610e55565b34801561054a57600080fd5b50610308600081565b34801561055f57600080fd5b5061024a61056e3660046124f1565b610ee3565b34801561057f57600080fd5b5061027361058e36600461252d565b610f6e565b34801561059f57600080fd5b5061035d6105ae36600461206b565b61101e565b3480156105bf57600080fd5b506103086105ce36600461206b565b611032565b61035d6105e1366004612573565b611049565b3480156105f257600080fd5b5061035d610601366004612099565b611156565b34801561061257600080fd5b50610308610621366004612573565b61117b565b34801561063257600080fd5b5061035d6106413660046124cf565b6111fc565b34801561065257600080fd5b50610308600080516020612ed883398151915281565b34801561067457600080fd5b5061035d6106833660046120c9565b611211565b34801561069457600080fd5b5061035d6106a336600461206b565b61123f565b3480156106b457600080fd5b506103087f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b3480156106e857600080fd5b506103086106f73660046124f1565b611298565b34801561070857600080fd5b50603c546001600160a01b03166102a2565b60006001600160e01b03198216635a05180f60e01b148061073f575061073f826112d5565b92915050565b6000828152600260205260409020600101546107608161130a565b61076a8383611314565b505050565b6001600160a01b03811633146107e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107ee8282611336565b5050565b600080516020612ed883398151915261080a8161130a565b610812611358565b50565b60006108208161130a565b6107ee826113aa565b610831611401565b610839611449565b600061087c84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250610f6e915050565b915050803410156108a05760405163044044a560e21b815260040160405180910390fd5b60006108ac823461264d565b905060006108ef86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061129892505050565b603a54604051635569f33d60e01b8152600481018390526001600160401b03871660248201529192506000916001600160a01b0390911690635569f33d906044016020604051808303816000875af115801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190612660565b9050817fda0eda2cd32a098c8b27ed6a56aeb5c332b8abb98491f4357ea58e118b724c6d888887856040516109ab94939291906126a6565b60405180910390a282156109c3576109c333846114a2565b6109cb611507565b5050505061076a60018055565b60005462010000900460ff16158080156109fd5750600054600161010090910460ff16105b80610a1d5750303b158015610a1d575060005460ff610100909104166001145b610a805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107db565b6000805461ff0019166101001790558015610aa7576000805462ff00001916620100001790555b610abf600080516020612ed88339815191528b61151d565b610aca60008c61151d565b610ad3836113aa565b610adc86611527565b610ae6878961155e565b603980546001600160a01b03808c166001600160a01b031992831617909255603a8054888416908316179055603b8054878416908316179055603d8054928516929091169190911790558015610b77576000805462ff000019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610bae8161130a565b84801580610bbc5750808414155b15610bda57604051634ec4810560e11b815260040160405180910390fd5b60005b81811015610c6a5783603f60008a8a85818110610bfc57610bfc6126da565b9050602002013581526020019081526020016000206000888885818110610c2557610c256126da565b9050602002016020810190610c3a91906120c9565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610bdd565b50336001600160a01b03167fb04cd4173c4030a0f2bf2acabc9484f9014ecf5654be55afb48f3694c0804e3b8888888888604051610cac9594939291906126f0565b60405180910390a250505050505050565b600080516020612ed8833981519152610cd58161130a565b6108126115e8565b610ce5611401565b610ced611449565b6000610cf888611298565b603a546040516303e9e60960e01b8152600481018390529192506000916001600160a01b03909116906303e9e60990602401600060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d6f9190810190612868565b602090810151606001516000848152603f835260408082206001600160a01b038d168352909352919091205490915060ff16811580610dac575080155b15610dd25789898383604051631fc5717160e01b81526004016107db9493929190612976565b600080610ddf8c8b611625565b91509150610df48c8c8c8c8c8c8c898961167d565b5050505050610e0260018055565b50505050505050565b6000828152600360205260408120610e2390836117a7565b9392505050565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006003610e62836117b3565b1015801561073f5750603b546040516303f6911960e21b81526001600160a01b0390911690630fda446490610e9b9085906004016129b0565b602060405180830381865afa158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc91906129c3565b1592915050565b6000610eee82610e55565b801561073f5750603a546001600160a01b03166396e494e8610f0f84611298565b6040518263ffffffff1660e01b8152600401610f2d91815260200190565b602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f91906129c3565b603c5460405163f4651f4960e01b81526000918291829182916001600160a01b039091169063f4651f4990610fa990899089906004016129e0565b608060405180830381865afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190612a3b565b80518251929450909250610ffd91612a70565b9350806020015182602001516110139190612a70565b925050509250929050565b60006110298161130a565b6107ee82611527565b600081815260036020526040812061073f906118a1565b611051611401565b611059611449565b600061106489611298565b603a546040516303e9e60960e01b8152600481018390529192506001600160a01b0316906303e9e60990602401600060405180830381865afa1580156110ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d69190810190612868565b6020015160600151156110fe57886040516331597a5760e21b81526004016107db91906129b0565b60006111108a8a8a8a8a8a8a8a61117b565b905061111d8a89836118ab565b60008061112a8c8b611625565b9150915061113f8c8c8c8b8b8b8b898961167d565b5050505061114c60018055565b5050505050505050565b6000828152600260205260409020600101546111718161130a565b61076a8383611336565b6000821580159061119357506001600160a01b038516155b156111b1576040516334fd817160e21b815260040160405180910390fd5b6111ba89611298565b888888888888886040516020016111d8989796959493929190612b14565b60405160208183030381529060405280519060200120905098975050505050505050565b60006112078161130a565b61076a838361155e565b600061121c8161130a565b50603980546001600160a01b0319166001600160a01b0392909216919091179055565b611247611401565b6037546000828152603e6020526040902054429161126491612a70565b1061128557604051630a059d7160e01b8152600481018290526024016107db565b6000908152603e60205260409020429055565b600061073f7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d688836000918252805160209182012090526040902090565b60006001600160e01b03198216637965db0b60e01b148061073f57506301ffc9a760e01b6001600160e01b031983161461073f565b6108128133611985565b61131e82826119b8565b600082815260036020526040902061076a9082611a3e565b6113408282611a53565b600082815260036020526040902061076a9082611aba565b611360611acf565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603c80546001600160a01b0319166001600160a01b03831690811790915560405190815233907fa0e5780c6b121c723ec81de517e849c838390affbdc0a70680a3065e47ff3655906020015b60405180910390a250565b60005460ff16156114475760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107db565b565b60026001540361149b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107db565b6002600155565b60006114ae8383611b18565b90508061076a576114c7836001600160a01b0316611b8e565b6114d083611ba4565b6040516020016114e1929190612b74565b60408051601f198184030181529082905262461bcd60e51b82526107db916004016129b0565b603954611447906001600160a01b0316476114a2565b6107ee8282611314565b603881905560405181815233907f59dadbf6542974405b3c262294675f8dd6fb933e6e6556b04b41aaac6e42352c906020016113f6565b4281111561157f57604051630b4319e560e21b815260040160405180910390fd5b81811161159f576040516307cb550760e31b815260040160405180910390fd5b60368290556037819055604080518381526020810183905233917f26a34e9441e83658dfe0e99d79186a1f7cb28c0867d3caddf5cd8b79844adf8f910160405180910390a25050565b6115f0611401565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861138d3390565b6000806116328484610f6e565b9092509050348111156116585760405163044044a560e21b815260040160405180910390fd5b3481810390821461166d5761166d33826114a2565b50611676611507565b9250929050565b600080603a60009054906101000a90046001600160a01b03166001600160a01b0316630570891f7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d6888d8b8e8e6040518663ffffffff1660e01b81526004016116e9959493929190612bf2565b60408051808303816000875af1158015611707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172b9190612c3d565b909250905085156117425761174288828989611bbb565b8415611752576117528b8b611c39565b896001600160a01b0316817f8b0e0cd1a643dbca06e60f7e03e5ff3c4e72b78e1c9842b5c3a29ad3ce8d384b8d8688876040516117929493929190612c6b565b60405180910390a35050505050505050505050565b6000610e238383611cd0565b600080600080845190505b808310156118995760008584815181106117da576117da6126da565b01602001516001600160f81b0319169050600160ff1b8110156118025760018401935061188d565b600760fd1b6001600160f81b0319821610156118235760028401935061188d565b600f60fc1b6001600160f81b0319821610156118445760038401935061188d565b601f60fb1b6001600160f81b0319821610156118655760048401935061188d565b603f60fa1b6001600160f81b0319821610156118865760058401935061188d565b6006840193505b506001909101906117be565b509392505050565b600061073f825490565b603854826001600160401b031610156118e2576040516378a3dfc160e11b81526001600160401b03831660048201526024016107db565b6118eb83610ee3565b61190a57826040516308eee0fd60e31b81526004016107db91906129b0565b6000818152603e6020526040812054611923904261264d565b905060365481101561194b57604051635320bcf960e01b8152600481018390526024016107db565b8060375410156119715760405163cb7690d760e01b8152600481018390526024016107db565b506000908152603e60205260408120555050565b61198f8282610e2a565b6107ee5761199c81611b8e565b6119a7836020611cfa565b6040516020016114e1929190612ca3565b6119c28282610e2a565b6107ee5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610e23836001600160a01b038416611e95565b611a5d8282610e2a565b156107ee5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610e23836001600160a01b038416611ee4565b60005460ff166114475760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107db565b604080516000808252602082019092526001600160a01b038416908390604051611b429190612d18565b60006040518083038185875af1925050503d8060008114611b7f576040519150601f19603f3d011682016040523d82523d6000602084013e611b84565b606091505b5090949350505050565b606061073f6001600160a01b0383166014611cfa565b606061073f82611bb384611fd7565b600101611cfa565b60405163e32954eb60e01b81526001600160a01b0385169063e32954eb90611beb90869086908690600401612d34565b6000604051808303816000875af1158015611c0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c329190810190612d57565b5050505050565b603d546040516001600160a01b039091169063c9119941908390611c61908690602001612e2e565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611c8d929190612e56565b6020604051808303816000875af1158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190612e7a565b6000826000018281548110611ce757611ce76126da565b9060005260206000200154905092915050565b60606000611d09836002612e93565b611d14906002612a70565b6001600160401b03811115611d2b57611d2b612307565b6040519080825280601f01601f191660200182016040528015611d55576020820181803683370190505b509050600360fc1b81600081518110611d7057611d706126da565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d9f57611d9f6126da565b60200101906001600160f81b031916908160001a9053506000611dc3846002612e93565b611dce906001612a70565b90505b6001811115611e46576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e0257611e026126da565b1a60f81b828281518110611e1857611e186126da565b60200101906001600160f81b031916908160001a90535060049490941c93611e3f81612eaa565b9050611dd1565b508315610e235760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107db565b6000818152600183016020526040812054611edc5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561073f565b50600061073f565b60008181526001830160205260408120548015611fcd576000611f0860018361264d565b8554909150600090611f1c9060019061264d565b9050818114611f81576000866000018281548110611f3c57611f3c6126da565b9060005260206000200154905080876000018481548110611f5f57611f5f6126da565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f9257611f92612ec1565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061073f565b600091505061073f565b600080608083901c15611fef5760809290921c916010015b604083901c156120045760409290921c916008015b602083901c156120195760209290921c916004015b601083901c1561202e5760109290921c916002015b600883901c1561073f5760010192915050565b60006020828403121561205357600080fd5b81356001600160e01b031981168114610e2357600080fd5b60006020828403121561207d57600080fd5b5035919050565b6001600160a01b038116811461081257600080fd5b600080604083850312156120ac57600080fd5b8235915060208301356120be81612084565b809150509250929050565b6000602082840312156120db57600080fd5b8135610e2381612084565b6001600160401b038116811461081257600080fd5b60008060006040848603121561211057600080fd5b83356001600160401b038082111561212757600080fd5b818601915086601f83011261213b57600080fd5b81358181111561214a57600080fd5b87602082850101111561215c57600080fd5b60209283019550935050840135612172816120e6565b809150509250925092565b6000806000806000806000806000806101408b8d03121561219d57600080fd5b8a356121a881612084565b995060208b01356121b881612084565b985060408b01356121c881612084565b975060608b0135965060808b0135955060a08b0135945060c08b01356121ed81612084565b935060e08b01356121fd81612084565b92506101008b013561220e81612084565b91506101208b013561221f81612084565b809150509295989b9194979a5092959850565b60008083601f84011261224457600080fd5b5081356001600160401b0381111561225b57600080fd5b6020830191508360208260051b850101111561167657600080fd5b801515811461081257600080fd5b60008060008060006060868803121561229c57600080fd5b85356001600160401b03808211156122b357600080fd5b6122bf89838a01612232565b909750955060208801359150808211156122d857600080fd5b506122e588828901612232565b90945092505060408601356122f981612276565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561233f5761233f612307565b60405290565b604051606081016001600160401b038111828210171561233f5761233f612307565b604051601f8201601f191681016001600160401b038111828210171561238f5761238f612307565b604052919050565b60006001600160401b038211156123b0576123b0612307565b50601f01601f191660200190565b600082601f8301126123cf57600080fd5b81356123e26123dd82612397565b612367565b8181528460208386010111156123f757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060c0888a03121561242f57600080fd5b87356001600160401b038082111561244657600080fd5b6124528b838c016123be565b985060208a0135915061246482612084565b909650604089013590612476826120e6565b90955060608901359061248882612084565b9094506080890135908082111561249e57600080fd5b506124ab8a828b01612232565b90945092505060a08801356124bf81612276565b8091505092959891949750929550565b600080604083850312156124e257600080fd5b50508035926020909101359150565b60006020828403121561250357600080fd5b81356001600160401b0381111561251957600080fd5b612525848285016123be565b949350505050565b6000806040838503121561254057600080fd5b82356001600160401b0381111561255657600080fd5b612562858286016123be565b92505060208301356120be816120e6565b60008060008060008060008060e0898b03121561258f57600080fd5b88356001600160401b03808211156125a657600080fd5b6125b28c838d016123be565b995060208b013591506125c482612084565b90975060408a0135906125d6826120e6565b90965060608a0135955060808a0135906125ef82612084565b90945060a08a0135908082111561260557600080fd5b506126128b828c01612232565b90945092505060c089013561262681612276565b809150509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8181038181111561073f5761073f612637565b60006020828403121561267257600080fd5b8151610e23816120e6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006126ba60608301868861267d565b90508360208301526001600160401b038316604083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b6060808252810185905260006001600160fb1b0386111561271057600080fd5b8560051b8088608085013760809083018381038201602080860191909152918101869052869160009160a0015b8783101561276d57833561275081612084565b6001600160a01b031681529281019260019290920191810161273d565b8615156040870152935061278092505050565b9695505050505050565b60005b838110156127a557818101518382015260200161278d565b50506000910152565b60006127bc6123dd84612397565b90508281528383830111156127d057600080fd5b610e2383602083018461278a565b6000608082840312156127f057600080fd5b604051608081018181106001600160401b038211171561281257612812612307565b8060405250809150825161282581612084565b8152602083015161283581612084565b60208201526040830151612848816120e6565b6040820152606083015161285b81612276565b6060919091015292915050565b6000602080838503121561287b57600080fd5b82516001600160401b038082111561289257600080fd5b9084019060a082870312156128a657600080fd5b6128ae61231d565b8251828111156128bd57600080fd5b8301606081890312156128cf57600080fd5b6128d7612345565b815160ff811681146128e857600080fd5b8152818601518682015260408201518481111561290457600080fd5b82019350601f8401891361291757600080fd5b6129258985518887016127ae565b6040820152825250612939878486016127de565b848201528094505050505092915050565b6000815180845261296281602086016020860161278a565b601f01601f19169290920160200192915050565b608081526000612989608083018761294a565b6001600160a01b039590951660208301525091151560408301521515606090910152919050565b602081526000610e23602083018461294a565b6000602082840312156129d557600080fd5b8151610e2381612276565b6040815260006129f3604083018561294a565b90506001600160401b03831660208301529392505050565b600060408284031215612a1d57600080fd5b612a2561231d565b9050815181526020820151602082015292915050565b60008060808385031215612a4e57600080fd5b612a588484612a0b565b9150612a678460408501612a0b565b90509250929050565b8082018082111561073f5761073f612637565b81835260006020808501808196508560051b810191508460005b87811015612b075782840389528135601e19883603018112612abe57600080fd5b870185810190356001600160401b03811115612ad957600080fd5b803603821315612ae857600080fd5b612af386828461267d565b9a87019a9550505090840190600101612a9d565b5091979650505050505050565b8881526001600160a01b0388811660208301526001600160401b0388166040830152606082018790528516608082015260e060a08201819052600090612b5d9083018587612a83565b905082151560c08301529998505050505050505050565b7f5472616e7366657248656c7065723a20636f756c64206e6f74207472616e7366815269032b9102927a7103a37960b51b602082015260008351612bbf81602a85016020880161278a565b660103b30b63ab2960cd1b602a918401918201528351612be681603184016020880161278a565b01603101949350505050565b85815260a060208201526000612c0b60a083018761294a565b6001600160a01b0395861660408401529390941660608201526001600160401b03919091166080909101529392505050565b60008060408385031215612c5057600080fd5b8251612c5b816120e6565b6020939093015192949293505050565b608081526000612c7e608083018761294a565b60208301959095525060408101929092526001600160401b0316606090910152919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612cdb81601785016020880161278a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d0c81602884016020880161278a565b01602801949350505050565b60008251612d2a81846020870161278a565b9190910192915050565b838152604060208201526000612d4e604083018486612a83565b95945050505050565b60006020808385031215612d6a57600080fd5b82516001600160401b0380821115612d8157600080fd5b818501915085601f830112612d9557600080fd5b815181811115612da757612da7612307565b8060051b612db6858201612367565b9182528381018501918581019089841115612dd057600080fd5b86860192505b83831015612e2157825185811115612dee5760008081fd5b8601603f81018b13612e005760008081fd5b612e118b89830151604084016127ae565b8352509186019190860190612dd6565b9998505050505050505050565b60008251612e4081846020870161278a565b63173937b760e11b920191825250600401919050565b6001600160a01b03831681526040602082018190526000906125259083018461294a565b600060208284031215612e8c57600080fd5b5051919050565b808202811582820484141761073f5761073f612637565b600081612eb957612eb9612637565b506000190190565b634e487b7160e01b600052603160045260246000fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212206a3d52d10991a468c57c6615bb62fcc62fde33eb734d4cc15addc19f2f75fb7b64736f6c63430008150033",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "A registrar controller for registering and renewing names at fixed cost.",
    "methods": {
      "available(string)": {
        "details": "Checks if a name is available for registration.",
        "params": {
          "name": "The name to check availability for."
        },
        "returns": {
          "_0": "A boolean indicating whether the name is available."
        }
      },
      "bulkWhitelistProtectedNames(uint256[],address[],bool)": {
        "details": "Bulk (de)whitelist for buying protected names. Requirements: - The method caller is contract operator. Emits an event {ProtectedNamesWhitelisted}."
      },
      "commit(bytes32)": {
        "details": "Commits to a registration using the commitment hash.",
        "params": {
          "commitment": "The commitment hash."
        }
      },
      "computeCommitment(string,address,uint64,bytes32,address,bytes[],bool)": {
        "details": "Generates the commitment hash for a registration.",
        "params": {
          "data": "Additional data associated with the registration.",
          "duration": "The duration of the registration.",
          "name": "The name to be registered.",
          "owner": "The owner of the name.",
          "resolver": "The resolver contract address.",
          "reverseRecord": "Whether to use reverse record for additional data.",
          "secret": "The secret used for the commitment."
        },
        "returns": {
          "_0": "The commitment hash."
        }
      },
      "computeId(string)": {
        "details": "Calculate the corresponding id given RON_ID and name."
      },
      "getCommitmentAgeRange()": {
        "details": "Returns the range of commitment ages allowed."
      },
      "getMinRegistrationDuration()": {
        "details": "Returns the minimum registration duration."
      },
      "getNameChecker()": {
        "details": "Returns the INameChecker contract associated with this controller."
      },
      "getPriceOracle()": {
        "details": "Returns the INSDomainPrice contract associated with this controller."
      },
      "getRNSUnified()": {
        "details": "Returns the INSUnified contract associated with this controller."
      },
      "getReverseRegistrar()": {
        "details": "Returns the IReverseRegistrar contract associated with this controller."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTreasury()": {
        "details": "Returns the treasury address."
      },
      "getWhitelistProtectedNameStatus(uint256,address)": {
        "details": "Returns the whitelist status for registering protected name."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "Pauses the registrar controller's functionality. Requirements: - The caller must have the admin role."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "register(string,address,uint64,bytes32,address,bytes[],bool)": {
        "details": "Registers a new name.",
        "params": {
          "data": "Additional data associated with the registration.",
          "duration": "The duration of the registration.",
          "name": "The name to be registered.",
          "owner": "The owner of the name.",
          "resolver": "The resolver contract address.",
          "reverseRecord": "Whether to use reverse record for additional data.",
          "secret": "The secret used for the commitment."
        }
      },
      "registerProtectedName(string,address,uint64,address,bytes[],bool)": {
        "details": "Registers a protected name. Requirements: - The owner is whitelisted for registering."
      },
      "renew(string,uint64)": {
        "details": "Renews an existing name registration.",
        "params": {
          "duration": "The duration of the renewal.",
          "name": "The name to be renewed."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "rentPrice(string,uint64)": {
        "details": "Retrieves the rent price for a given name and duration.",
        "params": {
          "duration": "The duration of the rent.",
          "name": "The name for which to calculate the rent price."
        },
        "returns": {
          "ronPrice": "rent price in ron.",
          "usdPrice": "rent price in usd."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setCommitmentAge(uint256,uint256)": {
        "details": "Sets the minimum and maximum commitment ages. Requirements: - Caller must have the DEFAULT_ADMIN_ROLE. - The `maxCommitmentAge` must be less than or equal to the current block timestamp. - The `maxCommitmentAge` must be greater than the `minCommitmentAge`. Emits a {CommitmentAgeUpdated} event indicating the successful update of the age range.",
        "params": {
          "maxCommitmentAge": "The maximum commitment age in seconds.",
          "minCommitmentAge": "The minimum commitment age in seconds."
        }
      },
      "setMinRegistrationDuration(uint256)": {
        "details": "Updates min registration duration. Requirements: - The caller must have the admin role."
      },
      "setPriceOracle(address)": {
        "details": "Updates price oracle address. Requirements: - The caller must have the admin role."
      },
      "setTreasury(address)": {
        "details": "Updates treasury address. Requirements: - The caller must have the admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses the registrar controller's functionality. Requirements: - The caller must have the admin role."
      },
      "valid(string)": {
        "details": "Checks if a name is valid.",
        "params": {
          "name": "The name to check validity for."
        },
        "returns": {
          "_0": "A boolean indicating whether the name is available."
        }
      }
    },
    "events": {
      "CommitmentAgeUpdated(address,uint256,uint256)": {
        "details": "Emitted when the commitment age range is updated.",
        "params": {
          "maxCommitmentAge": "The new maximum commitment age in seconds.",
          "minCommitmentAge": "The new minimum commitment age in seconds.",
          "operator": "The address of the operator who triggered the update."
        }
      },
      "DomainPriceUpdated(address,address)": {
        "details": "Emitted when RNSDomainPrice contract is updated.",
        "params": {
          "newDomainPrice": "The new duration domain price contract.",
          "operator": "The address of the operator who triggered the update."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MinRegistrationDurationUpdated(address,uint256)": {
        "details": "Emitted when the min registration duration is updated.",
        "params": {
          "duration": "The new duration in seconds.",
          "operator": "The address of the operator who triggered the update."
        }
      },
      "NameRegistered(string,uint256,address,uint256,uint256,uint64)": {
        "details": "Emitted when a new name is successfully registered.",
        "params": {
          "expires": "The expiration timestamp of the registration.",
          "id": "The namehash of the registered name.",
          "name": "The registered name.",
          "owner": "The owner of the registered name.",
          "ronPrice": "The cost of the registration in RON.",
          "usdPrice": "The cost of the registration in USD."
        }
      },
      "NameRenewed(string,uint256,uint256,uint64)": {
        "details": "Emitted when a name is renewed.",
        "params": {
          "cost": "The cost of renewal.",
          "expires": "The new expiration timestamp after renewal.",
          "id": "The namehash of the registered name.",
          "name": "The renewed name."
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "ProtectedNamesWhitelisted(address,uint256[],address[],bool)": {
        "details": "Emitted the whitelist status is updated for the owners of the protected names.",
        "params": {
          "operator": "The address of the operator who triggered the update."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "errors": {
      "CommitmentTooNew(bytes32)": [
        {
          "details": "Error: The provided commitment timestamp is too new for registration."
        }
      ],
      "CommitmentTooOld(bytes32)": [
        {
          "details": "Error: The provided commitment timestamp is too old for registration."
        }
      ],
      "DurationTooShort(uint64)": [
        {
          "details": "Error: The requested duration for registration is too short."
        }
      ],
      "ErrInvalidRegisterProtectedName(string,address,bool,bool)": [
        {
          "details": "Thrown when received invalid params for registering protected name"
        }
      ],
      "ErrRequestedForProtectedName(string)": [
        {
          "details": "Thrown when some one requests for protected names"
        }
      ],
      "InsufficientValue()": [
        {
          "details": "Error: Insufficient value (RON) provided for registration."
        }
      ],
      "InvalidArrayLength()": [
        {
          "details": "Thrown when received invalid array length"
        }
      ],
      "MaxCommitmentAgeTooHigh()": [
        {
          "details": "Error: The maximum commitment age is set too high."
        }
      ],
      "MaxCommitmentAgeTooLow()": [
        {
          "details": "Error: The maximum commitment age is set too low."
        }
      ],
      "NameNotAvailable(string)": [
        {
          "details": "Error: The requested name is not available for registration."
        }
      ],
      "ResolverRequiredWhenDataSupplied()": [
        {
          "details": "Error: A resolver is required when additional data is supplied during registration."
        }
      ],
      "Unauthorized(bytes32)": [
        {
          "details": "Error: The sender is not authorized for the given RNS node."
        }
      ],
      "UnexpiredCommitmentExists(bytes32)": [
        {
          "details": "Error: An unexpired commitment already exists for the given commitment."
        }
      ]
    },
    "title": "RONRegistrarController"
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"CommitmentTooNew\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"CommitmentTooOld\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"DurationTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"requestOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"nameProtected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ownerWhitelisted\",\"type\":\"bool\"}],\"name\":\"ErrInvalidRegisterProtectedName\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ErrRequestedForProtectedName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCommitmentAgeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCommitmentAgeTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverRequiredWhenDataSupplied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"UnexpiredCommitmentExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCommitmentAge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCommitmentAge\",\"type\":\"uint256\"}],\"name\":\"CommitmentAgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract INSDomainPrice\",\"name\":\"newDomainPrice\",\"type\":\"address\"}],\"name\":\"DomainPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"MinRegistrationDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ronPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ProtectedNamesWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DOMAIN_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"bulkWhitelistProtectedNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"reverseRecord\",\"type\":\"bool\"}],\"name\":\"computeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"computeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitmentAgeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCommitmentAge\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinRegistrationDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNameChecker\",\"outputs\":[{\"internalType\":\"contract INameChecker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"contract INSDomainPrice\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRNSUnified\",\"outputs\":[{\"internalType\":\"contract INSUnified\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReverseRegistrar\",\"outputs\":[{\"internalType\":\"contract INSReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getWhitelistProtectedNameStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRegistrationDuration\",\"type\":\"uint256\"},{\"internalType\":\"contract INSUnified\",\"name\":\"rnsUnified\",\"type\":\"address\"},{\"internalType\":\"contract INameChecker\",\"name\":\"nameChecker\",\"type\":\"address\"},{\"internalType\":\"contract INSDomainPrice\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract INSReverseRegistrar\",\"name\":\"reverseRegistrar\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"reverseRecord\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"reverseRecord\",\"type\":\"bool\"}],\"name\":\"registerProtectedName\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ronPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCommitmentAge\",\"type\":\"uint256\"}],\"name\":\"setCommitmentAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setMinRegistrationDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INSDomainPrice\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A registrar controller for registering and renewing names at fixed cost.\",\"errors\":{\"CommitmentTooNew(bytes32)\":[{\"details\":\"Error: The provided commitment timestamp is too new for registration.\"}],\"CommitmentTooOld(bytes32)\":[{\"details\":\"Error: The provided commitment timestamp is too old for registration.\"}],\"DurationTooShort(uint64)\":[{\"details\":\"Error: The requested duration for registration is too short.\"}],\"ErrInvalidRegisterProtectedName(string,address,bool,bool)\":[{\"details\":\"Thrown when received invalid params for registering protected name\"}],\"ErrRequestedForProtectedName(string)\":[{\"details\":\"Thrown when some one requests for protected names\"}],\"InsufficientValue()\":[{\"details\":\"Error: Insufficient value (RON) provided for registration.\"}],\"InvalidArrayLength()\":[{\"details\":\"Thrown when received invalid array length\"}],\"MaxCommitmentAgeTooHigh()\":[{\"details\":\"Error: The maximum commitment age is set too high.\"}],\"MaxCommitmentAgeTooLow()\":[{\"details\":\"Error: The maximum commitment age is set too low.\"}],\"NameNotAvailable(string)\":[{\"details\":\"Error: The requested name is not available for registration.\"}],\"ResolverRequiredWhenDataSupplied()\":[{\"details\":\"Error: A resolver is required when additional data is supplied during registration.\"}],\"Unauthorized(bytes32)\":[{\"details\":\"Error: The sender is not authorized for the given RNS node.\"}],\"UnexpiredCommitmentExists(bytes32)\":[{\"details\":\"Error: An unexpired commitment already exists for the given commitment.\"}]},\"events\":{\"CommitmentAgeUpdated(address,uint256,uint256)\":{\"details\":\"Emitted when the commitment age range is updated.\",\"params\":{\"maxCommitmentAge\":\"The new maximum commitment age in seconds.\",\"minCommitmentAge\":\"The new minimum commitment age in seconds.\",\"operator\":\"The address of the operator who triggered the update.\"}},\"DomainPriceUpdated(address,address)\":{\"details\":\"Emitted when RNSDomainPrice contract is updated.\",\"params\":{\"newDomainPrice\":\"The new duration domain price contract.\",\"operator\":\"The address of the operator who triggered the update.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MinRegistrationDurationUpdated(address,uint256)\":{\"details\":\"Emitted when the min registration duration is updated.\",\"params\":{\"duration\":\"The new duration in seconds.\",\"operator\":\"The address of the operator who triggered the update.\"}},\"NameRegistered(string,uint256,address,uint256,uint256,uint64)\":{\"details\":\"Emitted when a new name is successfully registered.\",\"params\":{\"expires\":\"The expiration timestamp of the registration.\",\"id\":\"The namehash of the registered name.\",\"name\":\"The registered name.\",\"owner\":\"The owner of the registered name.\",\"ronPrice\":\"The cost of the registration in RON.\",\"usdPrice\":\"The cost of the registration in USD.\"}},\"NameRenewed(string,uint256,uint256,uint64)\":{\"details\":\"Emitted when a name is renewed.\",\"params\":{\"cost\":\"The cost of renewal.\",\"expires\":\"The new expiration timestamp after renewal.\",\"id\":\"The namehash of the registered name.\",\"name\":\"The renewed name.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"ProtectedNamesWhitelisted(address,uint256[],address[],bool)\":{\"details\":\"Emitted the whitelist status is updated for the owners of the protected names.\",\"params\":{\"operator\":\"The address of the operator who triggered the update.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"available(string)\":{\"details\":\"Checks if a name is available for registration.\",\"params\":{\"name\":\"The name to check availability for.\"},\"returns\":{\"_0\":\"A boolean indicating whether the name is available.\"}},\"bulkWhitelistProtectedNames(uint256[],address[],bool)\":{\"details\":\"Bulk (de)whitelist for buying protected names. Requirements: - The method caller is contract operator. Emits an event {ProtectedNamesWhitelisted}.\"},\"commit(bytes32)\":{\"details\":\"Commits to a registration using the commitment hash.\",\"params\":{\"commitment\":\"The commitment hash.\"}},\"computeCommitment(string,address,uint64,bytes32,address,bytes[],bool)\":{\"details\":\"Generates the commitment hash for a registration.\",\"params\":{\"data\":\"Additional data associated with the registration.\",\"duration\":\"The duration of the registration.\",\"name\":\"The name to be registered.\",\"owner\":\"The owner of the name.\",\"resolver\":\"The resolver contract address.\",\"reverseRecord\":\"Whether to use reverse record for additional data.\",\"secret\":\"The secret used for the commitment.\"},\"returns\":{\"_0\":\"The commitment hash.\"}},\"computeId(string)\":{\"details\":\"Calculate the corresponding id given RON_ID and name.\"},\"getCommitmentAgeRange()\":{\"details\":\"Returns the range of commitment ages allowed.\"},\"getMinRegistrationDuration()\":{\"details\":\"Returns the minimum registration duration.\"},\"getNameChecker()\":{\"details\":\"Returns the INameChecker contract associated with this controller.\"},\"getPriceOracle()\":{\"details\":\"Returns the INSDomainPrice contract associated with this controller.\"},\"getRNSUnified()\":{\"details\":\"Returns the INSUnified contract associated with this controller.\"},\"getReverseRegistrar()\":{\"details\":\"Returns the IReverseRegistrar contract associated with this controller.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTreasury()\":{\"details\":\"Returns the treasury address.\"},\"getWhitelistProtectedNameStatus(uint256,address)\":{\"details\":\"Returns the whitelist status for registering protected name.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"Pauses the registrar controller's functionality. Requirements: - The caller must have the admin role.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"register(string,address,uint64,bytes32,address,bytes[],bool)\":{\"details\":\"Registers a new name.\",\"params\":{\"data\":\"Additional data associated with the registration.\",\"duration\":\"The duration of the registration.\",\"name\":\"The name to be registered.\",\"owner\":\"The owner of the name.\",\"resolver\":\"The resolver contract address.\",\"reverseRecord\":\"Whether to use reverse record for additional data.\",\"secret\":\"The secret used for the commitment.\"}},\"registerProtectedName(string,address,uint64,address,bytes[],bool)\":{\"details\":\"Registers a protected name. Requirements: - The owner is whitelisted for registering.\"},\"renew(string,uint64)\":{\"details\":\"Renews an existing name registration.\",\"params\":{\"duration\":\"The duration of the renewal.\",\"name\":\"The name to be renewed.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"rentPrice(string,uint64)\":{\"details\":\"Retrieves the rent price for a given name and duration.\",\"params\":{\"duration\":\"The duration of the rent.\",\"name\":\"The name for which to calculate the rent price.\"},\"returns\":{\"ronPrice\":\"rent price in ron.\",\"usdPrice\":\"rent price in usd.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCommitmentAge(uint256,uint256)\":{\"details\":\"Sets the minimum and maximum commitment ages. Requirements: - Caller must have the DEFAULT_ADMIN_ROLE. - The `maxCommitmentAge` must be less than or equal to the current block timestamp. - The `maxCommitmentAge` must be greater than the `minCommitmentAge`. Emits a {CommitmentAgeUpdated} event indicating the successful update of the age range.\",\"params\":{\"maxCommitmentAge\":\"The maximum commitment age in seconds.\",\"minCommitmentAge\":\"The minimum commitment age in seconds.\"}},\"setMinRegistrationDuration(uint256)\":{\"details\":\"Updates min registration duration. Requirements: - The caller must have the admin role.\"},\"setPriceOracle(address)\":{\"details\":\"Updates price oracle address. Requirements: - The caller must have the admin role.\"},\"setTreasury(address)\":{\"details\":\"Updates treasury address. Requirements: - The caller must have the admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses the registrar controller's functionality. Requirements: - The caller must have the admin role.\"},\"valid(string)\":{\"details\":\"Checks if a name is valid.\",\"params\":{\"name\":\"The name to check validity for.\"},\"returns\":{\"_0\":\"A boolean indicating whether the name is available.\"}}},\"stateVariables\":{\"MIN_DOMAIN_LENGTH\":{\"details\":\"The minimum domain name's length\"},\"OPERATOR_ROLE\":{\"details\":\"Returns the operator role.\"},\"PAUSER_ROLE\":{\"details\":\"Returns the role identifier for the pauser role.\"},\"____gap\":{\"details\":\"Gap for upgradeability.\"},\"_committedAt\":{\"details\":\"Mapping from commitment hash => timestamp that commitment made.\"},\"_maxCommitmentAge\":{\"details\":\"Maximum duration between commitment and registration in second(s).\"},\"_minCommitmentAge\":{\"details\":\"Minimum duration between commitment and registration in second(s).\"},\"_minRegistrationDuration\":{\"details\":\"Min registration duration\"},\"_nameChecker\":{\"details\":\"The namechecker contract.\"},\"_priceOracle\":{\"details\":\"The price oracle.\"},\"_protectedNamesWhitelisted\":{\"details\":\"Mapping id => owner => flag indicating whether the owner is whitelisted to buy protected name\"},\"_reverseRegistrar\":{\"details\":\"The reverse registrar contract.\"},\"_rnsUnified\":{\"details\":\"The rns unified contract.\"},\"_treasury\":{\"details\":\"The treasury address.\"}},\"title\":\"RONRegistrarController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Customized version of ETHRegistrarController: https://github.com/ensdomains/ens-contracts/blob/45455f1229556ed4f416ef7225d4caea2c1bc0b5/contracts/ethregistrar/ETHRegistrarController.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RONRegistrarController.sol\":\"RONRegistrarController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/=lib/pyth-sdk-solidity/\",\":@rns-contracts/=src/\",\":buffer/=lib/buffer/contracts/\",\":contract-template/=lib/contract-template/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"},\"src/RONRegistrarController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { IPublicResolver } from \\\"./interfaces/resolvers/IPublicResolver.sol\\\";\\nimport {\\n  INSUnified,\\n  INameChecker,\\n  INSDomainPrice,\\n  INSReverseRegistrar,\\n  IRONRegistrarController\\n} from \\\"./interfaces/IRONRegistrarController.sol\\\";\\nimport { LibString } from \\\"./libraries/LibString.sol\\\";\\nimport { LibRNSDomain } from \\\"./libraries/LibRNSDomain.sol\\\";\\nimport { RONTransferHelper } from \\\"./libraries/transfers/RONTransferHelper.sol\\\";\\n\\n/**\\n * @title RONRegistrarController\\n * @notice Customized version of ETHRegistrarController: https://github.com/ensdomains/ens-contracts/blob/45455f1229556ed4f416ef7225d4caea2c1bc0b5/contracts/ethregistrar/ETHRegistrarController.sol\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\n */\\ncontract RONRegistrarController is\\n  Pausable,\\n  Initializable,\\n  ReentrancyGuard,\\n  AccessControlEnumerable,\\n  IRONRegistrarController\\n{\\n  using LibString for string;\\n  using LibRNSDomain for string;\\n\\n  /// @dev The minimum domain name's length\\n  uint8 public constant MIN_DOMAIN_LENGTH = 3;\\n  /// @inheritdoc IRONRegistrarController\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  /// @inheritdoc IRONRegistrarController\\n  bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n  /// @dev Gap for upgradeability.\\n  uint256[50] private ____gap;\\n\\n  /// @dev Minimum duration between commitment and registration in second(s).\\n  uint256 internal _minCommitmentAge;\\n  /// @dev Maximum duration between commitment and registration in second(s).\\n  uint256 internal _maxCommitmentAge;\\n  /// @dev Min registration duration\\n  uint256 internal _minRegistrationDuration;\\n\\n  /// @dev The treasury address.\\n  address payable internal _treasury;\\n  /// @dev The rns unified contract.\\n  INSUnified internal _rnsUnified;\\n  /// @dev The namechecker contract.\\n  INameChecker internal _nameChecker;\\n  /// @dev The price oracle.\\n  INSDomainPrice internal _priceOracle;\\n  /// @dev The reverse registrar contract.\\n  INSReverseRegistrar internal _reverseRegistrar;\\n\\n  /// @dev Mapping from commitment hash => timestamp that commitment made.\\n  mapping(bytes32 commitment => uint256 timestamp) internal _committedAt;\\n  /// @dev Mapping id => owner => flag indicating whether the owner is whitelisted to buy protected name\\n  mapping(uint256 id => mapping(address owner => bool)) internal _protectedNamesWhitelisted;\\n\\n  constructor() payable {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    address admin,\\n    address pauser,\\n    address payable treasury,\\n    uint256 maxCommitmentAge,\\n    uint256 minCommitmentAge,\\n    uint256 minRegistrationDuration,\\n    INSUnified rnsUnified,\\n    INameChecker nameChecker,\\n    INSDomainPrice priceOracle,\\n    INSReverseRegistrar reverseRegistrar\\n  ) external initializer {\\n    _setupRole(PAUSER_ROLE, pauser);\\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n    _setPriceOracle(priceOracle);\\n    _setMinRegistrationDuration(minRegistrationDuration);\\n    _setCommitmentAge(minCommitmentAge, maxCommitmentAge);\\n\\n    _treasury = treasury;\\n    _rnsUnified = rnsUnified;\\n    _nameChecker = nameChecker;\\n    _reverseRegistrar = reverseRegistrar;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function pause() external onlyRole(PAUSER_ROLE) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function unpause() external onlyRole(PAUSER_ROLE) {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getMinRegistrationDuration() public view returns (uint256) {\\n    return _minRegistrationDuration;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function rentPrice(string memory name, uint64 duration) public view returns (uint256 usdPrice, uint256 ronPrice) {\\n    (INSDomainPrice.UnitPrice memory basePrice, INSDomainPrice.UnitPrice memory tax) =\\n      _priceOracle.getRenewalFee(name, duration);\\n    usdPrice = basePrice.usd + tax.usd;\\n    ronPrice = basePrice.ron + tax.ron;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function valid(string memory name) public view returns (bool) {\\n    return name.strlen() >= MIN_DOMAIN_LENGTH && !_nameChecker.forbidden(name);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function available(string memory name) public view returns (bool) {\\n    return valid(name) && _rnsUnified.available(computeId(name));\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function computeCommitment(\\n    string memory name,\\n    address owner,\\n    uint64 duration,\\n    bytes32 secret,\\n    address resolver,\\n    bytes[] calldata data,\\n    bool reverseRecord\\n  ) public pure returns (bytes32) {\\n    if (data.length != 0 && resolver == address(0)) revert ResolverRequiredWhenDataSupplied();\\n    return keccak256(abi.encode(computeId(name), owner, duration, secret, resolver, data, reverseRecord));\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function computeId(string memory name) public pure returns (uint256 id) {\\n    return LibRNSDomain.toId(LibRNSDomain.RON_ID, name);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function commit(bytes32 commitment) external whenNotPaused {\\n    if (_committedAt[commitment] + _maxCommitmentAge >= block.timestamp) revert UnexpiredCommitmentExists(commitment);\\n    _committedAt[commitment] = block.timestamp;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function setMinRegistrationDuration(uint256 duration) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setMinRegistrationDuration(duration);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function register(\\n    string memory name,\\n    address owner,\\n    uint64 duration,\\n    bytes32 secret,\\n    address resolver,\\n    bytes[] calldata data,\\n    bool reverseRecord\\n  ) external payable whenNotPaused nonReentrant {\\n    uint256 id = computeId(name);\\n    if (_rnsUnified.getRecord(id).mut.protected) revert ErrRequestedForProtectedName(name);\\n\\n    bytes32 commitHash = computeCommitment({\\n      name: name,\\n      owner: owner,\\n      duration: duration,\\n      secret: secret,\\n      resolver: resolver,\\n      data: data,\\n      reverseRecord: reverseRecord\\n    });\\n    _validateCommitment(name, duration, commitHash);\\n\\n    (uint256 usdPrice, uint256 ronPrice) = _handlePrice(name, duration);\\n    _register(name, owner, duration, resolver, data, reverseRecord, usdPrice, ronPrice);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function renew(string calldata name, uint64 duration) external payable whenNotPaused nonReentrant {\\n    (, uint256 ronPrice) = rentPrice(name, duration);\\n    if (msg.value < ronPrice) revert InsufficientValue();\\n    uint256 remainAmount = msg.value - ronPrice;\\n\\n    uint256 id = computeId(name);\\n    uint64 expiryTime = _rnsUnified.renew(id, duration);\\n    emit NameRenewed(name, id, ronPrice, expiryTime);\\n\\n    if (remainAmount != 0) RONTransferHelper.safeTransfer(payable(_msgSender()), remainAmount);\\n    _transferRONToTreasury();\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function registerProtectedName(\\n    string memory name,\\n    address owner,\\n    uint64 duration,\\n    address resolver,\\n    bytes[] calldata data,\\n    bool reverseRecord\\n  ) external payable whenNotPaused nonReentrant {\\n    uint256 id = computeId(name);\\n    bool protected = _rnsUnified.getRecord(id).mut.protected;\\n    bool whitelisted = _protectedNamesWhitelisted[id][owner];\\n    if (!protected || !whitelisted) revert ErrInvalidRegisterProtectedName(name, owner, protected, whitelisted);\\n\\n    (uint256 usdPrice, uint256 ronPrice) = _handlePrice(name, duration);\\n    _register(name, owner, duration, resolver, data, reverseRecord, usdPrice, ronPrice);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function bulkWhitelistProtectedNames(uint256[] calldata ids, address[] calldata owners, bool status)\\n    external\\n    onlyRole(OPERATOR_ROLE)\\n  {\\n    uint256 length = ids.length;\\n    if (length == 0 || length != owners.length) revert InvalidArrayLength();\\n\\n    for (uint256 i; i < length;) {\\n      _protectedNamesWhitelisted[ids[i]][owners[i]] = status;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit ProtectedNamesWhitelisted(_msgSender(), ids, owners, status);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getWhitelistProtectedNameStatus(uint256 id, address owner) external view returns (bool status) {\\n    return _protectedNamesWhitelisted[id][owner];\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function setTreasury(address payable addr) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _treasury = addr;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function setCommitmentAge(uint256 minCommitmentAge, uint256 maxCommitmentAge) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setCommitmentAge(minCommitmentAge, maxCommitmentAge);\\n  }\\n\\n  /**\\n   * @dev Internal function to update the commitment age range.\\n   * Requirements:\\n   * - The `maxCommitmentAge` must be less than or equal to the current block timestamp.\\n   * - The `maxCommitmentAge` must be greater than the `minCommitmentAge`.\\n   * Emits a {CommitmentAgeUpdated} event indicating the successful update of the age range.\\n   * @param minCommitmentAge The minimum commitment age in seconds.\\n   * @param maxCommitmentAge The maximum commitment age in seconds.\\n   */\\n  function _setCommitmentAge(uint256 minCommitmentAge, uint256 maxCommitmentAge) internal {\\n    if (maxCommitmentAge > block.timestamp) revert MaxCommitmentAgeTooHigh();\\n    if (maxCommitmentAge <= minCommitmentAge) revert MaxCommitmentAgeTooLow();\\n\\n    _minCommitmentAge = minCommitmentAge;\\n    _maxCommitmentAge = maxCommitmentAge;\\n\\n    emit CommitmentAgeUpdated(_msgSender(), minCommitmentAge, maxCommitmentAge);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function setPriceOracle(INSDomainPrice priceOracle) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setPriceOracle(priceOracle);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getTreasury() external view returns (address) {\\n    return _treasury;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getCommitmentAgeRange() external view returns (uint256 minCommitmentAge, uint256 maxCommitmentAge) {\\n    return (_minCommitmentAge, _maxCommitmentAge);\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getRNSUnified() external view returns (INSUnified) {\\n    return _rnsUnified;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getPriceOracle() external view returns (INSDomainPrice) {\\n    return _priceOracle;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getNameChecker() external view returns (INameChecker) {\\n    return _nameChecker;\\n  }\\n\\n  /**\\n   * @inheritdoc IRONRegistrarController\\n   */\\n  function getReverseRegistrar() external view returns (INSReverseRegistrar) {\\n    return _reverseRegistrar;\\n  }\\n\\n  /**\\n   * @dev Validates commitment.\\n   *\\n   * Requirements:\\n   * - The duration must larger than or equal to minimum registration duration.\\n   * - The name must be available.\\n   * - The passed duration must in a valid range.\\n   */\\n  function _validateCommitment(string memory name, uint64 duration, bytes32 commitment) internal {\\n    if (duration < _minRegistrationDuration) revert DurationTooShort(duration);\\n    if (!available(name)) revert NameNotAvailable(name);\\n\\n    uint256 passedDuration = block.timestamp - _committedAt[commitment];\\n    if (passedDuration < _minCommitmentAge) revert CommitmentTooNew(commitment);\\n    if (_maxCommitmentAge < passedDuration) revert CommitmentTooOld(commitment);\\n\\n    delete _committedAt[commitment];\\n  }\\n\\n  /**\\n   * @dev Sets minimum registration duration.\\n   * Emits a {MinRegistrationDurationUpdated} event indicating the successful update of the registration duration.\\n   */\\n  function _setMinRegistrationDuration(uint256 duration) internal {\\n    _minRegistrationDuration = duration;\\n    emit MinRegistrationDurationUpdated(_msgSender(), duration);\\n  }\\n\\n  /**\\n   * @dev Sets data into resolver address contract.\\n   */\\n  function _setRecords(address resolverAddress, uint256 id, bytes[] calldata data) internal {\\n    IPublicResolver(resolverAddress).multicallWithNodeCheck(bytes32(id), data);\\n  }\\n\\n  /**\\n   * @dev Sets data into reverse registrar.\\n   */\\n  function _setReverseRecord(string memory name, address owner) internal {\\n    _reverseRegistrar.setNameForAddr(owner, string.concat(name, \\\".ron\\\"));\\n  }\\n\\n  /**\\n   * @dev Helper method to take fee into treasury address.\\n   */\\n  function _transferRONToTreasury() internal {\\n    RONTransferHelper.safeTransfer(_treasury, address(this).balance);\\n  }\\n\\n  /**\\n   * @dev Helper method to take renewal fee of a name.\\n   */\\n  function _handlePrice(string memory name, uint64 duration) internal returns (uint256 usdPrice, uint256 ronPrice) {\\n    (usdPrice, ronPrice) = rentPrice(name, duration);\\n    if (msg.value < ronPrice) revert InsufficientValue();\\n\\n    unchecked {\\n      uint256 remainAmount = msg.value - ronPrice;\\n      if (remainAmount != 0) RONTransferHelper.safeTransfer(payable(_msgSender()), remainAmount);\\n    }\\n\\n    _transferRONToTreasury();\\n  }\\n\\n  /**\\n   * @dev Helper method to register a name for owner.\\n   *\\n   * Emits an event {NameRegistered}.\\n   */\\n  function _register(\\n    string memory name,\\n    address owner,\\n    uint64 duration,\\n    address resolver,\\n    bytes[] calldata data,\\n    bool reverseRecord,\\n    uint256 usdPrice,\\n    uint256 ronPrice\\n  ) internal {\\n    (uint64 expiryTime, uint256 id) = _rnsUnified.mint(LibRNSDomain.RON_ID, name, resolver, owner, duration);\\n    if (data.length != 0) _setRecords(resolver, id, data);\\n    if (reverseRecord) _setReverseRecord(name, owner);\\n    emit NameRegistered(name, id, owner, ronPrice, usdPrice, expiryTime);\\n  }\\n\\n  /**\\n   * @dev Helper method to update RNSDomainPrice contract.\\n   *\\n   * Emits an event {DomainPriceUpdated}.\\n   */\\n  function _setPriceOracle(INSDomainPrice priceOracle) internal {\\n    _priceOracle = priceOracle;\\n    emit DomainPriceUpdated(_msgSender(), priceOracle);\\n  }\\n}\\n\",\"keccak256\":\"0x6bf652d114f13ac80fed5d01eda93d89ad7b52206ba6d71569df52fb198c95a5\",\"license\":\"MIT\"},\"src/interfaces/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice To multi-call to a specified contract which has multicall interface:\\n *\\n * ```solidity\\n * interface IMock is IMulticallable {\\n *   function foo() external;\\n *   function bar() external;\\n * }\\n *\\n * bytes[] memory calldatas = new bytes[](2);\\n * calldatas[0] = abi.encodeCall(IMock.foo,());\\n * calldatas[1] = abi.encodeCall(IMock.bar,());\\n * IMock(target).multicall(calldatas);\\n * ```\\n */\\ninterface IMulticallable {\\n  /**\\n   * @dev Executes bulk action to the original contract.\\n   * Reverts if there is a single call failed.\\n   *\\n   * @param data The calldata to original contract.\\n   *\\n   */\\n  function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n\\n  /**\\n   * @dev Executes bulk action to the original contract.\\n   *\\n   * @param requireSuccess Flag to indicating whether the contract reverts if there is a single call failed.\\n   * @param data The calldata to original contract.\\n   *\\n   */\\n  function tryMulticall(bool requireSuccess, bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0e76578b0efeafdf33915d77d3f98145ac2f74cdd311db03a9b94d4aa566d107\",\"license\":\"UNLICENSED\"},\"src/interfaces/INSDomainPrice.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PeriodScaler } from \\\"../libraries/math/PeriodScalingUtils.sol\\\";\\nimport { IPyth } from \\\"@pythnetwork/IPyth.sol\\\";\\n\\ninterface INSDomainPrice {\\n  error InvalidArrayLength();\\n  error RenewalFeeIsNotOverriden();\\n\\n  struct RenewalFee {\\n    uint256 labelLength;\\n    uint256 fee;\\n  }\\n\\n  struct UnitPrice {\\n    uint256 usd;\\n    uint256 ron;\\n  }\\n\\n  /// @dev Emitted when the renewal reservation ratio is updated.\\n  event TaxRatioUpdated(address indexed operator, uint256 indexed ratio);\\n  /// @dev Emitted when the maximum length of renewal fee is updated.\\n  event MaxRenewalFeeLengthUpdated(address indexed operator, uint256 indexed maxLength);\\n  /// @dev Emitted when the renew fee is updated.\\n  event RenewalFeeByLengthUpdated(address indexed operator, uint256 indexed labelLength, uint256 renewalFee);\\n  /// @dev Emitted when the renew fee of a domain is overridden. Value of `inverseRenewalFee` is 0 when not overridden.\\n  event RenewalFeeOverridingUpdated(address indexed operator, bytes32 indexed labelHash, uint256 inverseRenewalFee);\\n\\n  /// @dev Emitted when the domain price is updated.\\n  event DomainPriceUpdated(\\n    address indexed operator, bytes32 indexed labelHash, uint256 price, bytes32 indexed proofHash, uint256 setType\\n  );\\n  /// @dev Emitted when the rule to rescale domain price is updated.\\n  event DomainPriceScaleRuleUpdated(address indexed operator, uint192 ratio, uint64 period);\\n\\n  /// @dev Emitted when the Pyth Oracle config is updated.\\n  event PythOracleConfigUpdated(\\n    address indexed operator, IPyth indexed pyth, uint256 maxAcceptableAge, bytes32 indexed pythIdForRONUSD\\n  );\\n\\n  /**\\n   * @dev Returns the Pyth oracle config.\\n   */\\n  function getPythOracleConfig() external view returns (IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD);\\n\\n  /**\\n   * @dev Sets the Pyth oracle config.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {PythOracleConfigUpdated}.\\n   */\\n  function setPythOracleConfig(IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD) external;\\n\\n  /**\\n   * @dev Returns the percentage to scale from domain price each period.\\n   */\\n  function getScaleDownRuleForDomainPrice() external view returns (PeriodScaler memory dpScaleRule);\\n\\n  /**\\n   * @dev Sets the percentage to scale from domain price each period.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {DomainPriceScaleRuleUpdated}.\\n   *\\n   * @notice Applies for the business rule: -x% each y seconds.\\n   */\\n  function setScaleDownRuleForDomainPrice(PeriodScaler calldata scaleRule) external;\\n\\n  /**\\n   * @dev Returns the renewal fee by lengths.\\n   */\\n  function getRenewalFeeByLengths() external view returns (RenewalFee[] memory renewalFees);\\n\\n  /**\\n   * @dev Sets the renewal fee by lengths\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {RenewalFeeByLengthUpdated}.\\n   * Emits an event {MaxRenewalFeeLengthUpdated} optionally.\\n   */\\n  function setRenewalFeeByLengths(RenewalFee[] calldata renewalFees) external;\\n\\n  /**\\n   * @dev Returns tax ratio.\\n   */\\n  function getTaxRatio() external view returns (uint256 taxRatio);\\n\\n  /**\\n   * @dev Sets renewal reservation ratio.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits an event {TaxRatioUpdated}.\\n   */\\n  function setTaxRatio(uint256 ratio) external;\\n\\n  /**\\n   * @dev Return the domain price.\\n   * @param label The domain label to register (Eg, 'foo' for 'foo.ron').\\n   */\\n  function getDomainPrice(string memory label) external view returns (uint256 usdPrice, uint256 ronPrice);\\n\\n  /**\\n   * @dev Returns the renewal fee in USD and RON.\\n   * @param label The domain label to register (Eg, 'foo' for 'foo.ron').\\n   * @param duration Amount of second(s).\\n   */\\n  function getRenewalFee(string calldata label, uint256 duration)\\n    external\\n    view\\n    returns (UnitPrice memory basePrice, UnitPrice memory tax);\\n\\n  /**\\n   * @dev Returns the renewal fee of a label. Reverts if not overridden.\\n   * @notice This method is to help developers check the domain renewal fee overriding. Consider using method\\n   * {getRenewalFee} instead for full handling of renewal fees.\\n   */\\n  function getOverriddenRenewalFee(string memory label) external view returns (uint256 usdFee);\\n\\n  /**\\n   * @dev Bulk override renewal fees.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   *\\n   * Emits events {RenewalFeeOverridingUpdated}.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param usdPrices Array of prices in USD. Leave 2^256 - 1 to remove overriding.\\n   */\\n  function bulkOverrideRenewalFees(bytes32[] calldata lbHashes, uint256[] calldata usdPrices) external;\\n\\n  /**\\n   * @dev Bulk try to set domain prices. Returns a boolean array indicating whether domain prices at the corresponding\\n   * indexes if set or not.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   * - The price should be larger than current domain price or it will not be updated.\\n   *\\n   * Emits events {DomainPriceUpdated} optionally.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param ronPrices Array of prices in (W)RON token.\\n   * @param proofHashes Array of proof hashes.\\n   * @param setTypes Array of update types from the operator service.\\n   */\\n  function bulkTrySetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external returns (bool[] memory updated);\\n\\n  /**\\n   * @dev Bulk override domain prices.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   *\\n   * Emits events {DomainPriceUpdated}.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param ronPrices Array of prices in (W)RON token.\\n   * @param proofHashes Array of proof hashes.\\n   * @param setTypes Array of update types from the operator service.\\n   */\\n  function bulkSetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external;\\n\\n  /**\\n   * @dev Returns the converted amount from USD to RON.\\n   */\\n  function convertUSDToRON(uint256 usdAmount) external view returns (uint256 ronAmount);\\n\\n  /**\\n   * @dev Returns the converted amount from RON to USD.\\n   */\\n  function convertRONToUSD(uint256 ronAmount) external view returns (uint256 usdAmount);\\n\\n  /**\\n   * @dev Value equals to keccak256(\\\"OPERATOR_ROLE\\\").\\n   */\\n  function OPERATOR_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\\n   */\\n  function MAX_PERCENTAGE() external pure returns (uint64);\\n\\n  /**\\n   * @dev Decimal for USD.\\n   */\\n  function USD_DECIMALS() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x79acf09e4570a955f5d78a4f9159c2dc20268d816e06e9b51b94bcac0738eb5a\",\"license\":\"MIT\"},\"src/interfaces/INSReverseRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { INameResolver } from \\\"./resolvers/INameResolver.sol\\\";\\nimport { INSUnified } from \\\"./INSUnified.sol\\\";\\n\\n/// @dev See https://eips.ethereum.org/EIPS/eip-181#registrar\\ninterface IERC181 {\\n  /**\\n   * @dev Claims the name hex(addr) + '.addr.reverse' for addr.\\n   *\\n   * @param addr The address to set as the addr of the reverse record in INS.\\n   * @return id The INS node hash of the reverse record.\\n   */\\n  function claim(address addr) external returns (uint256 id);\\n\\n  /**\\n   * @dev Claims the name hex(owner) + '.addr.reverse' for owner and sets resolver.\\n   *\\n   * @param addr The address to set as the owner of the reverse record in INS.\\n   * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n   * @return id The INS node hash of the reverse record.\\n   */\\n  function claimWithResolver(address addr, address resolver) external returns (uint256 id);\\n\\n  /**\\n   * @dev Sets the name record for the reverse INS record associated with the calling account. First updates the\\n   * resolver to the default reverse resolver if necessary.\\n   *\\n   * @param name The name to set for this address.\\n   * @return The INS node hash of the reverse record.\\n   */\\n  function setName(string memory name) external returns (uint256);\\n}\\n\\ninterface INSReverseRegistrar is IERC181, IERC165 {\\n  /// @dev Error: The provided id is not child node of `ADDR_REVERSE_ID`\\n  error InvalidId();\\n  /// @dev Error: The contract is not authorized for minting or modifying domain hex(addr) + '.addr.reverse'.\\n  error InvalidConfig();\\n  /// @dev Error: The sender lacks the necessary permissions.\\n  error Unauthorized();\\n  /// @dev Error: The provided resolver address is null.\\n  error NullAssignment();\\n\\n  /// @dev Emitted when reverse node is claimed.\\n  event ReverseClaimed(address indexed addr, uint256 indexed id);\\n  /// @dev Emitted when the default resolver is changed.\\n  event DefaultResolverChanged(INameResolver indexed resolver);\\n\\n  /**\\n   * @dev Returns the controller role.\\n   */\\n  function CONTROLLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns default resolver.\\n   */\\n  function getDefaultResolver() external view returns (INameResolver);\\n\\n  /**\\n   * @dev Returns RNSUnified contract.\\n   */\\n  function getRNSUnified() external view returns (INSUnified);\\n\\n  /**\\n   * @dev Sets default resolver.\\n   *\\n   * Requirement:\\n   *\\n   * - The method caller must be admin.\\n   *\\n   * Emitted an event {DefaultResolverChanged}.\\n   *\\n   */\\n  function setDefaultResolver(INameResolver resolver) external;\\n\\n  /**\\n   * @dev Same as {IERC181-setName}.\\n   */\\n  function setNameForAddr(address addr, string memory name) external returns (uint256 id);\\n\\n  /**\\n   * @dev Returns address that the reverse node resolves for.\\n   * Eg. node namehash('{addr}.addr.reverse') will always resolve for `addr`.\\n   */\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  /**\\n   * @dev Returns the id hash for a given account's reverse records.\\n   * @param addr The address to hash\\n   * @return The INS node hash.\\n   */\\n  function computeId(address addr) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b88e9ea1dd7c128244b5d0c69cee9dcadcb16b05a7e13416cc7b95c071b60a4\",\"license\":\"MIT\"},\"src/interfaces/INSUnified.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport { IAccessControlEnumerable } from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport { ModifyingIndicator } from \\\"../types/ModifyingIndicator.sol\\\";\\n\\ninterface INSUnified is IAccessControlEnumerable, IERC721Metadata {\\n  /// @dev Error: The provided token id is expired.\\n  error Expired();\\n  /// @dev Error: The provided token id is unexists.\\n  error Unexists();\\n  /// @dev Error: The provided id expiry is greater than parent id expiry.\\n  error ExceedParentExpiry();\\n  /// @dev Error: The provided name is unavailable for registration.\\n  error Unavailable();\\n  /// @dev Error: The sender lacks the necessary permissions.\\n  error Unauthorized();\\n  /// @dev Error: Missing controller role required for modification.\\n  error MissingControllerRole();\\n  /// @dev Error: Attempting to set an immutable field, which cannot be modified.\\n  error CannotSetImmutableField();\\n  /// @dev Error: Missing protected settler role required for modification.\\n  error MissingProtectedSettlerRole();\\n  /// @dev Error: Attempting to set an expiry time that is not larger than the previous one.\\n  error ExpiryTimeMustBeLargerThanTheOldOne();\\n  /// @dev Error: The provided name must be registered or is in a grace period.\\n  error NameMustBeRegisteredOrInGracePeriod();\\n\\n  /**\\n   * | Fields\\\\Idc | Modifying Indicator |\\n   * | ---------- | ------------------- |\\n   * | depth      | 0b00000001          |\\n   * | parentId   | 0b00000010          |\\n   * | label      | 0b00000100          |\\n   */\\n  struct ImmutableRecord {\\n    // The level-th of a domain.\\n    uint8 depth;\\n    // The node of parent token. Eg, parent node of vip.duke.ron equals to namehash('duke.ron')\\n    uint256 parentId;\\n    // The label of a domain. Eg, label is vip for domain vip.duke.ron\\n    string label;\\n  }\\n\\n  /**\\n   * | Fields\\\\Idc,Roles | Modifying Indicator | Controller | Protected setter | (Parent) Owner/Spender |\\n   * | ---------------- | ------------------- | ---------- | ---------------- | ---------------------- |\\n   * | resolver         | 0b00001000          | x          |                  | x                      |\\n   * | owner            | 0b00010000          | x          |                  | x                      |\\n   * | expiry           | 0b00100000          | x          |                  |                        |\\n   * | protected        | 0b01000000          |            | x                |                        |\\n   * Note: (Parent) Owner/Spender means parent owner or current owner or current token spender.\\n   */\\n  struct MutableRecord {\\n    // The resolver address.\\n    address resolver;\\n    // The record owner. This field must equal to the owner of token.\\n    address owner;\\n    // Expiry timestamp.\\n    uint64 expiry;\\n    // Flag indicating whether the token is protected or not.\\n    bool protected;\\n  }\\n\\n  struct Record {\\n    ImmutableRecord immut;\\n    MutableRecord mut;\\n  }\\n\\n  /// @dev Emitted when a base URI is updated.\\n  event BaseURIUpdated(address indexed operator, string newURI);\\n  /// @dev Emitted when the grace period for all domain is updated.\\n  event GracePeriodUpdated(address indexed operator, uint64 newGracePeriod);\\n\\n  /**\\n   * @dev Emitted when the record of node is updated.\\n   * @param indicator The binary index of updated fields. Eg, 0b10101011 means fields at position 1, 2, 4, 6, 8 (right\\n   * to left) needs to be updated.\\n   * @param record The updated fields.\\n   */\\n  event RecordUpdated(uint256 indexed node, ModifyingIndicator indicator, Record record);\\n\\n  /**\\n   * @dev Returns the controller role.\\n   * @notice Can set all fields {Record.mut} in token record, excepting {Record.mut.protected}.\\n   */\\n  function CONTROLLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the protected setter role.\\n   * @notice Can set field {Record.mut.protected} in token record by using method `bulkSetProtected`.\\n   */\\n  function PROTECTED_SETTLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the reservation role.\\n   * @notice Never expire for token owner has this role.\\n   */\\n  function RESERVATION_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the max expiry value.\\n   */\\n  function MAX_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev Returns the name hash output of a domain.\\n   */\\n  function namehash(string memory domain) external pure returns (bytes32 node);\\n\\n  /**\\n   * @dev Returns true if the specified name is available for registration.\\n   * Note: Only available after passing the grace period.\\n   */\\n  function available(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the grace period in second(s).\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function getGracePeriod() external view returns (uint64);\\n\\n  /**\\n   * @dev Returns the total minted ids.\\n   * Note: Burning id will not affect `totalMinted`.\\n   */\\n  function totalMinted() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the grace period in second(s).\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function setGracePeriod(uint64) external;\\n\\n  /**\\n   * @dev Sets the base uri.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract owner.\\n   *\\n   */\\n  function setBaseURI(string calldata baseTokenURI) external;\\n\\n  /**\\n   * @dev Mints token for subnode.\\n   *\\n   * Requirements:\\n   * - The token must be available.\\n   * - The method caller must be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   *\\n   * @param parentId The parent node to mint or create subnode.\\n   * @param label The domain label. Eg, label is duke for domain duke.ron.\\n   * @param resolver The resolver address.\\n   * @param owner The token owner.\\n   * @param duration Duration in second(s) to expire. Leave 0 to set as parent.\\n   */\\n  function mint(uint256 parentId, string calldata label, address resolver, address owner, uint64 duration)\\n    external\\n    returns (uint64 expiryTime, uint256 id);\\n\\n  /**\\n   * @dev Returns all record of a domain.\\n   * Reverts if the token is non existent.\\n   */\\n  function getRecord(uint256 id) external view returns (Record memory record);\\n\\n  /**\\n   * @dev Returns the domain name of id.\\n   */\\n  function getDomain(uint256 id) external view returns (string memory domain);\\n\\n  /**\\n   * @dev Returns whether the requester is able to modify the record based on the updated index.\\n   * Note: This method strictly follows the permission of struct {MutableRecord}.\\n   */\\n  function canSetRecord(address requester, uint256 id, ModifyingIndicator indicator)\\n    external\\n    view\\n    returns (bool, bytes4 error);\\n\\n  /**\\n   * @dev Sets record of existing token. Update operation for {Record.mut}.\\n   *\\n   * Requirements:\\n   * - The method caller must have role based on the corresponding `indicator`. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setRecord(uint256 id, ModifyingIndicator indicator, MutableRecord calldata record) external;\\n\\n  /**\\n   * @dev Reclaims ownership. Update operation for {Record.mut.owner}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   * - The method caller should be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function reclaim(uint256 id, address owner) external;\\n\\n  /**\\n   * @dev Renews token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function renew(uint256 id, uint64 duration) external returns (uint64 expiry);\\n\\n  /**\\n   * @dev Sets expiry time for a token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setExpiry(uint256 id, uint64 expiry) external;\\n\\n  /**\\n   * @dev Sets the protected status of a list of ids. Update operation for {Record.mut.protected}.\\n   *\\n   * Requirements:\\n   * - The method caller must have protected setter role.\\n   *\\n   * Emits events {RecordUpdated}.\\n   */\\n  function bulkSetProtected(uint256[] calldata ids, bool protected) external;\\n}\\n\",\"keccak256\":\"0xaef1c58bb7c8688d6677a1c2739c0dc9e645ca5c64dd875be2f2b7a318a11406\",\"license\":\"MIT\"},\"src/interfaces/INameChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title INameChecker\\n * @dev The INameChecker interface provides functions for managing and checking substrings and forbidden words in strings.\\n */\\ninterface INameChecker {\\n  /**\\n   * @dev Emitted when the word range is updated.\\n   * @param operator The address that updated the word range.\\n   * @param min The minimum word length allowed.\\n   * @param max The maximum word length allowed.\\n   */\\n  event WordRangeUpdated(address indexed operator, uint8 min, uint8 max);\\n\\n  /**\\n   * @dev Emitted when the forbidden words are updated.\\n   * @param operator The address that updated the forbidden words list.\\n   * @param wordCount The number of words in the list.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  event ForbiddenWordsUpdated(address indexed operator, uint256 wordCount, bool shouldForbid);\\n\\n  /**\\n   * @dev Returns an array of all substrings of a given string.\\n   * @param str The input string to analyze.\\n   * @return subStrings An array of all substrings.\\n   */\\n  function getAllSubStrings(string calldata str) external view returns (string[] memory subStrings);\\n\\n  /**\\n   * @dev Returns the total number of substrings for a given string length, as well as the minimum and maximum allowed word lengths.\\n   * @param strlen The length of the input string.\\n   * @return total The total number of substrings.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function totalSubString(uint256 strlen) external view returns (uint256 total, uint256 min, uint256 max);\\n\\n  /**\\n   * @dev Sets a list of forbidden words and specifies whether they should be forbidden.\\n   * @param packedWords An array of packed word representations.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  function setForbiddenWords(uint256[] calldata packedWords, bool shouldForbid) external;\\n\\n  /**\\n   * @dev Sets a list of forbidden words and specifies whether they should be forbidden.\\n   * @param words An array of raw words in string representations.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  function setForbiddenWords(string[] calldata words, bool shouldForbid) external;\\n\\n  /**\\n   * @dev Sets the minimum and maximum word lengths allowed.\\n   * @param min The minimum word length.\\n   * @param max The maximum word length.\\n   */\\n  function setWordRange(uint8 min, uint8 max) external;\\n\\n  /**\\n   * @dev Retrieves the current minimum and maximum word lengths allowed.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function getWordRange() external view returns (uint8 min, uint8 max);\\n\\n  /**\\n   * @notice Checks if a given name contains any forbidden characters or blacklisted words.\\n   * @param name The string to check.\\n   * @return true if the name contains forbidden characters or blacklisted words, false otherwise.\\n   */\\n  function forbidden(string calldata name) external view returns (bool);\\n\\n  /**\\n   * @notice Checks if a given name contains any blacklisted words.\\n   * @param name The string to check.\\n   * @return true if the name contains blacklisted words, false otherwise.\\n   */\\n  function containsBlacklistedWord(string calldata name) external view returns (bool);\\n\\n  /**\\n   * @notice Checks if a given name contains any invalid characters.\\n   * requirements:\\n   * - all characters in name must in range [a-z] or [0-9].\\n   * @param name The string to check.\\n   * @return true if the name contains invalid characters, false otherwise.\\n   */\\n  function containsInvalidCharacter(string calldata name) external pure returns (bool);\\n\\n  /**\\n   * @dev Packs a string into a single word representation.\\n   * @param str The string to be packed.\\n   * @notice Returns `uint256(0)` if the length is zero or greater than 31.\\n   * @return packed The packed value of the input string.\\n   */\\n  function pack(string memory str) external pure returns (uint256 packed);\\n\\n  /**\\n   * @dev Packs an array of strings into their single word representations.\\n   * @param strs The array of strings to be packed.\\n   * @notice Returns an array of packed values, along with the minimum and maximum string lengths.\\n   * @return packeds An array containing the packed values of the input strings.\\n   */\\n  function packBulk(string[] memory strs) external pure returns (uint256[] memory packeds);\\n}\\n\",\"keccak256\":\"0x9f2b9f08f8d60f565f93925ad64353f01feaad671440d865f45008d1304d4794\",\"license\":\"MIT\"},\"src/interfaces/IRONRegistrarController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { INSUnified } from \\\"./INSUnified.sol\\\";\\nimport { INSDomainPrice } from \\\"./INSDomainPrice.sol\\\";\\nimport { INameChecker } from \\\"./INameChecker.sol\\\";\\nimport { INSReverseRegistrar } from \\\"./INSReverseRegistrar.sol\\\";\\n\\n/**\\n * @title IRONRegistrarController\\n * @dev Interface for the Registrar Controller contract that manages the registration, renewal, and commitment of RNS\\n * names.\\n */\\ninterface IRONRegistrarController {\\n  /// @dev Error: The provided commitment timestamp is too new for registration.\\n  error CommitmentTooNew(bytes32 commitment);\\n  /// @dev Error: The provided commitment timestamp is too old for registration.\\n  error CommitmentTooOld(bytes32 commitment);\\n  /// @dev Error: The requested name is not available for registration.\\n  error NameNotAvailable(string name);\\n  /// @dev Error: The requested duration for registration is too short.\\n  error DurationTooShort(uint64 duration);\\n  /// @dev Error: A resolver is required when additional data is supplied during registration.\\n  error ResolverRequiredWhenDataSupplied();\\n  /// @dev Error: An unexpired commitment already exists for the given commitment.\\n  error UnexpiredCommitmentExists(bytes32 commitment);\\n  /// @dev Error: Insufficient value (RON) provided for registration.\\n  error InsufficientValue();\\n  /// @dev Error: The sender is not authorized for the given RNS node.\\n  error Unauthorized(bytes32 node);\\n  /// @dev Error: The maximum commitment age is set too low.\\n  error MaxCommitmentAgeTooLow();\\n  /// @dev Error: The maximum commitment age is set too high.\\n  error MaxCommitmentAgeTooHigh();\\n  /// @dev Thrown when some one requests for protected names\\n  error ErrRequestedForProtectedName(string name);\\n  /// @dev Thrown when received invalid params for registering protected name\\n  error ErrInvalidRegisterProtectedName(string name, address requestOwner, bool nameProtected, bool ownerWhitelisted);\\n  /// @dev Thrown when received invalid array length\\n  error InvalidArrayLength();\\n\\n  /**\\n   * @dev Emitted when the min registration duration is updated.\\n   * @param operator The address of the operator who triggered the update.\\n   * @param duration The new duration in seconds.\\n   */\\n  event MinRegistrationDurationUpdated(address indexed operator, uint256 duration);\\n\\n  /**\\n   * @dev Emitted when RNSDomainPrice contract is updated.\\n   * @param operator The address of the operator who triggered the update.\\n   * @param newDomainPrice The new duration domain price contract.\\n   */\\n  event DomainPriceUpdated(address indexed operator, INSDomainPrice newDomainPrice);\\n\\n  /**\\n   * @dev Emitted when the commitment age range is updated.\\n   * @param operator The address of the operator who triggered the update.\\n   * @param minCommitmentAge The new minimum commitment age in seconds.\\n   * @param maxCommitmentAge The new maximum commitment age in seconds.\\n   */\\n  event CommitmentAgeUpdated(address indexed operator, uint256 minCommitmentAge, uint256 maxCommitmentAge);\\n\\n  /**\\n   * @dev Emitted when a new name is successfully registered.\\n   * @param name The registered name.\\n   * @param id The namehash of the registered name.\\n   * @param owner The owner of the registered name.\\n   * @param ronPrice The cost of the registration in RON.\\n   * @param usdPrice The cost of the registration in USD.\\n   * @param expires The expiration timestamp of the registration.\\n   */\\n  event NameRegistered(\\n    string name, uint256 indexed id, address indexed owner, uint256 ronPrice, uint256 usdPrice, uint64 expires\\n  );\\n\\n  /**\\n   * @dev Emitted when a name is renewed.\\n   * @param name The renewed name.\\n   * @param id The namehash of the registered name.\\n   * @param cost The cost of renewal.\\n   * @param expires The new expiration timestamp after renewal.\\n   */\\n  event NameRenewed(string name, uint256 indexed id, uint256 cost, uint64 expires);\\n\\n  /**\\n   * @dev Emitted the whitelist status is updated for the owners of the protected names.\\n   * @param operator The address of the operator who triggered the update.\\n   */\\n  event ProtectedNamesWhitelisted(address indexed operator, uint256[] ids, address[] owners, bool status);\\n\\n  /**\\n   * @dev Retrieves the rent price for a given name and duration.\\n   * @param name The name for which to calculate the rent price.\\n   * @param duration The duration of the rent.\\n   * @return usdPrice rent price in usd.\\n   * @return ronPrice rent price in ron.\\n   */\\n  function rentPrice(string memory name, uint64 duration) external view returns (uint256 usdPrice, uint256 ronPrice);\\n\\n  /**\\n   * @dev Calculate the corresponding id given RON_ID and name.\\n   */\\n  function computeId(string memory name) external pure returns (uint256 id);\\n\\n  /**\\n   * @dev Checks if a name is valid.\\n   * @param name The name to check validity for.\\n   * @return A boolean indicating whether the name is available.\\n   */\\n  function valid(string memory name) external view returns (bool);\\n\\n  /**\\n   * @dev Checks if a name is available for registration.\\n   * @param name The name to check availability for.\\n   * @return A boolean indicating whether the name is available.\\n   */\\n  function available(string memory name) external returns (bool);\\n\\n  /**\\n   * @dev Generates the commitment hash for a registration.\\n   * @param name The name to be registered.\\n   * @param owner The owner of the name.\\n   * @param duration The duration of the registration.\\n   * @param secret The secret used for the commitment.\\n   * @param resolver The resolver contract address.\\n   * @param data Additional data associated with the registration.\\n   * @param reverseRecord Whether to use reverse record for additional data.\\n   * @return The commitment hash.\\n   */\\n  function computeCommitment(\\n    string memory name,\\n    address owner,\\n    uint64 duration,\\n    bytes32 secret,\\n    address resolver,\\n    bytes[] calldata data,\\n    bool reverseRecord\\n  ) external pure returns (bytes32);\\n\\n  /**\\n   * @dev Commits to a registration using the commitment hash.\\n   * @param commitment The commitment hash.\\n   */\\n  function commit(bytes32 commitment) external;\\n\\n  /**\\n   * @dev Registers a new name.\\n   * @param name The name to be registered.\\n   * @param owner The owner of the name.\\n   * @param duration The duration of the registration.\\n   * @param secret The secret used for the commitment.\\n   * @param resolver The resolver contract address.\\n   * @param data Additional data associated with the registration.\\n   * @param reverseRecord Whether to use reverse record for additional data.\\n   */\\n  function register(\\n    string calldata name,\\n    address owner,\\n    uint64 duration,\\n    bytes32 secret,\\n    address resolver,\\n    bytes[] calldata data,\\n    bool reverseRecord\\n  ) external payable;\\n\\n  /**\\n   * @dev Renews an existing name registration.\\n   * @param name The name to be renewed.\\n   * @param duration The duration of the renewal.\\n   */\\n  function renew(string calldata name, uint64 duration) external payable;\\n\\n  /**\\n   * @dev Registers a protected name.\\n   *\\n   * Requirements:\\n   * - The owner is whitelisted for registering.\\n   */\\n  function registerProtectedName(\\n    string memory name,\\n    address owner,\\n    uint64 duration,\\n    address resolver,\\n    bytes[] calldata data,\\n    bool reverseRecord\\n  ) external payable;\\n\\n  /**\\n   * @dev Updates min registration duration.\\n   *\\n   * Requirements:\\n   * - The caller must have the admin role.\\n   *\\n   */\\n  function setMinRegistrationDuration(uint256 duration) external;\\n\\n  /**\\n   * @dev Sets the minimum and maximum commitment ages.\\n   *\\n   * Requirements:\\n   * - Caller must have the DEFAULT_ADMIN_ROLE.\\n   * - The `maxCommitmentAge` must be less than or equal to the current block timestamp.\\n   * - The `maxCommitmentAge` must be greater than the `minCommitmentAge`.\\n   *\\n   * Emits a {CommitmentAgeUpdated} event indicating the successful update of the age range.\\n   *\\n   * @param minCommitmentAge The minimum commitment age in seconds.\\n   * @param maxCommitmentAge The maximum commitment age in seconds.\\n   */\\n  function setCommitmentAge(uint256 minCommitmentAge, uint256 maxCommitmentAge) external;\\n\\n  /**\\n   * @dev Bulk (de)whitelist for buying protected names.\\n   *\\n   * Requirements:\\n   * - The method caller is contract operator.\\n   *\\n   * Emits an event {ProtectedNamesWhitelisted}.\\n   */\\n  function bulkWhitelistProtectedNames(uint256[] calldata ids, address[] calldata owners, bool status) external;\\n\\n  /**\\n   * @dev Returns the whitelist status for registering protected name.\\n   */\\n  function getWhitelistProtectedNameStatus(uint256 id, address owner) external view returns (bool status);\\n\\n  /**\\n   * @dev Updates treasury address.\\n   *\\n   * Requirements:\\n   * - The caller must have the admin role.\\n   *\\n   */\\n  function setTreasury(address payable) external;\\n\\n  /**\\n   * @dev Updates price oracle address.\\n   *\\n   * Requirements:\\n   * - The caller must have the admin role.\\n   */\\n  function setPriceOracle(INSDomainPrice) external;\\n\\n  /**\\n   * @dev Returns the treasury address.\\n   */\\n  function getTreasury() external view returns (address);\\n\\n  /**\\n   * @dev Pauses the registrar controller's functionality.\\n   *\\n   * Requirements:\\n   * - The caller must have the admin role.\\n   *\\n   */\\n  function pause() external;\\n\\n  /**\\n   * @dev Unpauses the registrar controller's functionality.\\n   *\\n   * Requirements:\\n   * - The caller must have the admin role.\\n   *\\n   */\\n  function unpause() external;\\n\\n  /**\\n   * @dev Returns the role identifier for the pauser role.\\n   */\\n  function PAUSER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the operator role.\\n   */\\n  function OPERATOR_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the threshold for valid name length.\\n   */\\n  function MIN_DOMAIN_LENGTH() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the minimum registration duration.\\n   */\\n  function getMinRegistrationDuration() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the range of commitment ages allowed.\\n   */\\n  function getCommitmentAgeRange() external view returns (uint256 minCommitmentAge, uint256 maxCommitmentAge);\\n\\n  /**\\n   * @dev Returns the INSUnified contract associated with this controller.\\n   */\\n  function getRNSUnified() external view returns (INSUnified);\\n\\n  /**\\n   * @dev Returns the INSDomainPrice contract associated with this controller.\\n   */\\n  function getPriceOracle() external view returns (INSDomainPrice);\\n\\n  /**\\n   * @dev Returns the INameChecker contract associated with this controller.\\n   */\\n  function getNameChecker() external view returns (INameChecker);\\n\\n  /**\\n   * @dev Returns the IReverseRegistrar contract associated with this controller.\\n   */\\n  function getReverseRegistrar() external view returns (INSReverseRegistrar);\\n}\\n\",\"keccak256\":\"0x5a2bb3b50c237290a035a305ea2bc5a964cd4f01827f5c9b5f0e9c83ecc4c2c1\",\"license\":\"MIT\"},\"src/interfaces/resolvers/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IABIResolver {\\n  /// Thrown when the input content type is invalid.\\n  error InvalidContentType();\\n\\n  /// @dev Emitted when the ABI is changed.\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  /**\\n   * @dev Sets the ABI associated with an INS node. Nodes may have one ABI of each content type. To remove an ABI, set it\\n   * to the empty string.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   * - The content type must be powers of 2.\\n   *\\n   * Emitted an event {ABIChanged}.\\n   *\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n\\n  /**\\n   * @dev Returns the ABI associated with an INS node.\\n   * Defined in EIP-205, see more at https://eips.ethereum.org/EIPS/eip-205\\n   *\\n   * @param node The INS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256 contentType, bytes memory data);\\n}\\n\",\"keccak256\":\"0xc701a6cafa883d6607b5916dfb4277099f39c450930d776da36a7acc2b2498c0\",\"license\":\"MIT\"},\"src/interfaces/resolvers/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IAddressResolver {\\n  /// @dev Emitted when an address of a node is changed.\\n  event AddrChanged(bytes32 indexed node, address addr);\\n\\n  /**\\n   * @dev Sets the address associated with an INS node.\\n   *\\n   * Requirement:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * Emits an event {AddrChanged}.\\n   *\\n   * @param node The node to update.\\n   * @param addr The address to set.\\n   */\\n  function setAddr(bytes32 node, address addr) external;\\n\\n  /**\\n   * @dev Returns the address associated with an INS node.\\n   * @param node The INS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xb914cb4a730d20c867805fd148e7574c6565bc6c0a129825cdf3cf4f2f7f72d0\",\"license\":\"MIT\"},\"src/interfaces/resolvers/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IContentHashResolver {\\n  /// @dev Emitted when the content hash of a node is changed.\\n  event ContentHashChanged(bytes32 indexed node, bytes hash);\\n\\n  /**\\n   * @dev Sets the content hash associated with an INS node.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * Emits an event {ContentHashChanged}.\\n   *\\n   * @param node The node to update.\\n   * @param hash The content hash to set\\n   */\\n  function setContentHash(bytes32 node, bytes calldata hash) external;\\n\\n  /**\\n   * @dev Returns the content hash associated with an INS node.\\n   * @param node The INS node to query.\\n   * @return The associated content hash.\\n   */\\n  function contentHash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xfbdc7211a813065e5cc2bdd3640c13f01c87b5f31fda86e562b0525628602c00\",\"license\":\"MIT\"},\"src/interfaces/resolvers/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n  /// @dev Emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n  /// @dev Emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n  /**\\n   * @dev Set one or more DNS records.  Records are supplied in wire-format.  Records with the same node/name/resource\\n   * must be supplied one after the other to ensure the data is updated correctly. For example, if the data was\\n   * supplied:\\n   *   a.example.com IN A 1.2.3.4\\n   *   a.example.com IN A 5.6.7.8\\n   *   www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was\\n   * supplied:\\n   *   a.example.com IN A 1.2.3.4\\n   *   www.example.com IN CNAME a.example.com.\\n   *   a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A record which would overwrite the first.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data) external;\\n\\n  /**\\n   * @dev Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x2341266d70b60f5bb666c066aaf1fdb35be81277bcdd04e3bf93ee774ae4d2f6\",\"license\":\"MIT\"},\"src/interfaces/resolvers/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n  /// @dev Emitted whenever a given node's zone hash is updated.\\n  event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n  /**\\n   * @dev Sets the hash for the zone.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * Emits an event {DNSZonehashChanged}.\\n   *\\n   * @param node The node to update.\\n   * @param hash The zonehash to set\\n   */\\n  function setZonehash(bytes32 node, bytes calldata hash) external;\\n\\n  /**\\n   * @dev Obtains the hash for the zone.\\n   * @param node The INS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x42aa5409a184740461e7477b8894d7549fd3908596bb7dba9adab59b8ff4ebed\",\"license\":\"MIT\"},\"src/interfaces/resolvers/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInterfaceResolver {\\n  /// @dev Emitted when the interface of node is changed.\\n  event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n  /**\\n   * @dev Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 165 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n\\n  /**\\n   * @dev Returns the address of a contract that implements the specified interface for this name.\\n   *\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`.\\n   * If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for\\n   * the specified interfaceID, its address will be returned.\\n   *\\n   * @param node The INS node to query.\\n   * @param interfaceID The EIP 165 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb4a1867d5cb899bfdc2e812c4bf9b9d3d14b34e0f72cbeffb4e018f8659b13fc\",\"license\":\"MIT\"},\"src/interfaces/resolvers/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface INameResolver {\\n  /// @dev Emitted when a node name is changed.\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  /**\\n   * @dev Sets the name associated with an INS node, for reverse records.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * Emits an event {NameChanged}.\\n   *\\n   * @param node The node to update.\\n   */\\n  function setName(bytes32 node, string calldata newName) external;\\n\\n  /**\\n   * @dev Returns the name associated with an INS node, for reverse records.\\n   * @param node The INS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf3dbbe3238d5f1e491a43dbccbd74755fcd325b5c6aef6b7f0819684bd1f9da3\",\"license\":\"UNLICENSED\"},\"src/interfaces/resolvers/IPublicKeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IPublicKeyResolver {\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  /// @dev Emitted when a node public key is changed.\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  /**\\n   * @dev Sets the SECP256k1 public key associated with an INS node.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * Emits an event {PubkeyChanged}.\\n   *\\n   * @param node The INS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n  /**\\n   * @dev Returns the SECP256k1 public key associated with an INS node.\\n   * Defined in EIP 619.\\n   *\\n   * @param node The INS node to query\\n   * @return x The X coordinate of the curve point for the public key.\\n   * @return y The Y coordinate of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x2644fd8d9b951c2aca5521ba519b68d4f3de19b731dae7907b6372e1ceac07ae\",\"license\":\"MIT\"},\"src/interfaces/resolvers/IPublicResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { INSUnified } from \\\"../INSUnified.sol\\\";\\nimport { INSReverseRegistrar } from \\\"../INSReverseRegistrar.sol\\\";\\nimport { IABIResolver } from \\\"./IABIResolver.sol\\\";\\nimport { IAddressResolver } from \\\"./IAddressResolver.sol\\\";\\nimport { IContentHashResolver } from \\\"./IContentHashResolver.sol\\\";\\nimport { IDNSRecordResolver } from \\\"./IDNSRecordResolver.sol\\\";\\nimport { IDNSZoneResolver } from \\\"./IDNSZoneResolver.sol\\\";\\nimport { IInterfaceResolver } from \\\"./IInterfaceResolver.sol\\\";\\nimport { INameResolver } from \\\"./INameResolver.sol\\\";\\nimport { IPublicKeyResolver } from \\\"./IPublicKeyResolver.sol\\\";\\nimport { ITextResolver } from \\\"./ITextResolver.sol\\\";\\nimport { IMulticallable } from \\\"../IMulticallable.sol\\\";\\n\\ninterface IPublicResolver is\\n  IABIResolver,\\n  IAddressResolver,\\n  IContentHashResolver,\\n  IDNSRecordResolver,\\n  IDNSZoneResolver,\\n  IInterfaceResolver,\\n  INameResolver,\\n  IPublicKeyResolver,\\n  ITextResolver,\\n  IMulticallable\\n{\\n  /// @dev See {IERC1155-ApprovalForAll}. Logged when an operator is added or removed.\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /// @dev Logged when a delegate is approved or an approval is revoked.\\n  event Approved(address owner, bytes32 indexed node, address indexed delegate, bool indexed approved);\\n\\n  /**\\n   * @dev Checks if an account is authorized to manage the resolution of a specific RNS node.\\n   * @param node The RNS node.\\n   * @param account The account address being checked for authorization.\\n   * @return A boolean indicating whether the account is authorized.\\n   */\\n  function isAuthorized(bytes32 node, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Retrieves the RNSUnified associated with this resolver.\\n   */\\n  function getRNSUnified() external view returns (INSUnified);\\n\\n  /**\\n   * @dev Retrieves the reverse registrar associated with this resolver.\\n   */\\n  function getReverseRegistrar() external view returns (INSReverseRegistrar);\\n\\n  /**\\n   * @dev This function provides an extra security check when called from privileged contracts (such as\\n   * RONRegistrarController) that can set records on behalf of the node owners.\\n   *\\n   * Reverts if the node is not null but calldata is mismatched.\\n   */\\n  function multicallWithNodeCheck(bytes32 node, bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x97b6f762f25a4dc3f6398a76bbcb7d3922f5f440ee9e0541c83579e09a8f87b7\",\"license\":\"MIT\"},\"src/interfaces/resolvers/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ITextResolver {\\n  /// @dev Emitted when a node text is changed.\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\\n\\n  /**\\n   * @dev Sets the text data associated with an INS node and key.\\n   *\\n   * Requirements:\\n   * - The method caller must be authorized to change user fields of RNS Token `node`. See indicator\\n   * {ModifyingIndicator.USER_FIELDS_INDICATOR}.\\n   *\\n   * Emits an event {TextChanged}.\\n   *\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(bytes32 node, string calldata key, string calldata value) external;\\n\\n  /**\\n   * Returns the text data associated with an INS node and key.\\n   * @param node The INS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x05ce1760d3a16d99614b1a46c11308238e1ecd8be23f081fac146bbc58961ecf\",\"license\":\"MIT\"},\"src/libraries/LibRNSDomain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LibRNSDomain {\\n  /// @dev Value equals to namehash('ron')\\n  uint256 internal constant RON_ID = 0xba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d688;\\n  /// @dev Value equals to namehash('addr.reverse')\\n  uint256 internal constant ADDR_REVERSE_ID = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n  /**\\n   * @dev Calculate the corresponding id given parentId and label.\\n   */\\n  function toId(uint256 parentId, string memory label) internal pure returns (uint256 id) {\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(0x0, parentId)\\n      mstore(0x20, keccak256(add(label, 32), mload(label)))\\n      id := keccak256(0x0, 64)\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the hash of the label.\\n   */\\n  function hashLabel(string memory label) internal pure returns (bytes32 hashed) {\\n    assembly (\\\"memory-safe\\\") {\\n      hashed := keccak256(add(label, 32), mload(label))\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculate the RNS namehash of a str.\\n   */\\n  function namehash(string memory str) internal pure returns (bytes32 hashed) {\\n    // notice: this method is case-sensitive, ensure the string is lowercased before calling this method\\n    assembly (\\\"memory-safe\\\") {\\n      // load str length\\n      let len := mload(str)\\n      // returns bytes32(0x0) if length is zero\\n      if iszero(iszero(len)) {\\n        let hashedLen\\n        // compute pointer to str[0]\\n        let head := add(str, 32)\\n        // compute pointer to str[length - 1]\\n        let tail := add(head, sub(len, 1))\\n        // cleanup dirty bytes if contains any\\n        mstore(0x0, 0)\\n        // loop backwards from `tail` to `head`\\n        for { let i := tail } iszero(lt(i, head)) { i := sub(i, 1) } {\\n          // check if `i` is `head`\\n          let isHead := eq(i, head)\\n          // check if `str[i-1]` is \\\".\\\"\\n          // `0x2e` == bytes1(\\\".\\\")\\n          let isDotNext := eq(shr(248, mload(sub(i, 1))), 0x2e)\\n          if or(isHead, isDotNext) {\\n            // size = distance(length, i) - hashedLength + 1\\n            let size := add(sub(sub(tail, i), hashedLen), 1)\\n            mstore(0x20, keccak256(i, size))\\n            mstore(0x0, keccak256(0x0, 64))\\n            // skip \\\".\\\" thereby + 1\\n            hashedLen := add(hashedLen, add(size, 1))\\n          }\\n        }\\n      }\\n      hashed := mload(0x0)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x715029b2b420c6ec00bc1f939b837acf45d247fde8426089575b0e7b5e84518b\",\"license\":\"MIT\"},\"src/libraries/LibString.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibString {\\n  error InvalidStringLength();\\n  error InvalidCharacter(bytes1 char);\\n\\n  /// @dev Lookup constant for method. See more detail at https://eips.ethereum.org/EIPS/eip-181\\n  bytes32 private constant LOOKUP = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\n  /**\\n   * @dev Returns the length of a given string\\n   *\\n   * @param s The string to measure the length of\\n   * @return The length of the input string\\n   */\\n  function strlen(string memory s) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 i;\\n      uint256 len;\\n      uint256 bytelength = bytes(s).length;\\n      for (len; i < bytelength; len++) {\\n        bytes1 b = bytes(s)[i];\\n        if (b < 0x80) {\\n          i += 1;\\n        } else if (b < 0xE0) {\\n          i += 2;\\n        } else if (b < 0xF0) {\\n          i += 3;\\n        } else if (b < 0xF8) {\\n          i += 4;\\n        } else if (b < 0xFC) {\\n          i += 5;\\n        } else {\\n          i += 6;\\n        }\\n      }\\n      return len;\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an address to string.\\n   */\\n  function toString(address addr) internal pure returns (string memory stringifiedAddr) {\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(stringifiedAddr, 40)\\n      let ptr := add(stringifiedAddr, 0x20)\\n      for { let i := 40 } gt(i, 0) { } {\\n        i := sub(i, 1)\\n        mstore8(add(i, ptr), byte(and(addr, 0xf), LOOKUP))\\n        addr := div(addr, 0x10)\\n\\n        i := sub(i, 1)\\n        mstore8(add(i, ptr), byte(and(addr, 0xf), LOOKUP))\\n        addr := div(addr, 0x10)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts string to address.\\n   * Reverts if the string length is not equal to 40.\\n   */\\n  function parseAddr(string memory stringifiedAddr) internal pure returns (address) {\\n    unchecked {\\n      if (bytes(stringifiedAddr).length != 40) revert InvalidStringLength();\\n      uint160 addr;\\n      for (uint256 i = 0; i < 40; i += 2) {\\n        addr *= 0x100;\\n        addr += uint160(hexCharToDec(bytes(stringifiedAddr)[i])) * 0x10;\\n        addr += hexCharToDec(bytes(stringifiedAddr)[i + 1]);\\n      }\\n      return address(addr);\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a hex char (0-9, a-f, A-F) to decimal number.\\n   * Reverts if the char is invalid.\\n   */\\n  function hexCharToDec(bytes1 c) private pure returns (uint8 r) {\\n    unchecked {\\n      if ((bytes1(\\\"a\\\") <= c) && (c <= bytes1(\\\"f\\\"))) r = uint8(c) - 87;\\n      else if ((bytes1(\\\"A\\\") <= c) && (c <= bytes1(\\\"F\\\"))) r = uint8(c) - 55;\\n      else if ((bytes1(\\\"0\\\") <= c) && (c <= bytes1(\\\"9\\\"))) r = uint8(c) - 48;\\n      else revert InvalidCharacter(c);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9d456b294f0e44ccaabded43a3d96db6270761a167535155a762fe41e968b905\",\"license\":\"MIT\"},\"src/libraries/math/PeriodScalingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { PowMath } from \\\"./PowMath.sol\\\";\\n\\nstruct PeriodScaler {\\n  uint192 ratio;\\n  uint64 period;\\n}\\n\\nlibrary LibPeriodScaler {\\n  using PowMath for uint256;\\n\\n  error PeriodNumOverflowedUint16(uint256 n);\\n\\n  /// @dev The precision number of calculation is 2\\n  uint256 public constant MAX_PERCENTAGE = 100_00;\\n\\n  /**\\n   * @dev Scales down the input value `v` for a percentage of `self.ratio` each period `self.period`.\\n   * Reverts if the passed period is larger than 2^16 - 1.\\n   *\\n   * @param self The period scaler with specific period and ratio\\n   * @param v The original value to scale based on the rule `self`\\n   * @param maxR The maximum value of 100%. Eg, if the `self.ratio` in range of [0;100_00] reflexes 0-100%, this param\\n   * must be 100_00\\n   * @param dur The passed duration in the same uint with `self.period`\\n   */\\n  function scaleDown(PeriodScaler memory self, uint256 v, uint64 maxR, uint256 dur) internal pure returns (uint256 rs) {\\n    uint256 n = dur / uint256(self.period);\\n    if (n == 0 || self.ratio == 0) return v;\\n    if (maxR == self.ratio) return 0;\\n    if (n > type(uint16).max) revert PeriodNumOverflowedUint16(n);\\n\\n    unchecked {\\n      // Normalizes the input ratios to be in range of [0;MAX_PERCENTAGE]\\n      uint256 p = Math.mulDiv(maxR - self.ratio, MAX_PERCENTAGE, maxR);\\n      return v.mulDiv({ y: p, d: MAX_PERCENTAGE, n: uint16(n) });\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x502d004fbd130a99f3f1e6685aebff9f47300565fbc5a65b4912824ea5eb5b78\",\"license\":\"MIT\"},\"src/libraries/math/PowMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PowMath {\\n  using Math for uint256;\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev Negative exponent n for x*10^n.\\n   */\\n  function exp10(uint256 x, int32 n) internal pure returns (uint256) {\\n    if (n < 0) {\\n      return x / 10 ** uint32(-n);\\n    } else if (n > 0) {\\n      return x * 10 ** uint32(n);\\n    } else {\\n      return x;\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates floor(x * (y / d)**n) with full precision.\\n   */\\n  function mulDiv(uint256 x, uint256 y, uint256 d, uint16 n) internal pure returns (uint256 r) {\\n    unchecked {\\n      if (y == d || n == 0) return x;\\n      r = x;\\n\\n      bool ok;\\n      uint256 r_;\\n      uint16 nd_;\\n\\n      {\\n        uint16 ye = uint16(Math.min(n, findMaxExponent(y)));\\n        while (ye > 0) {\\n          (ok, r_) = r.tryMul(y ** ye);\\n          if (ok) {\\n            r = r_;\\n            n -= ye;\\n            nd_ += ye;\\n          }\\n          ye = uint16(Math.min(ye / 2, n));\\n        }\\n      }\\n\\n      while (n > 0) {\\n        (ok, r_) = r.tryMul(y);\\n        if (ok) {\\n          r = r_;\\n          n--;\\n          nd_++;\\n        } else if (nd_ > 0) {\\n          r /= d;\\n          nd_--;\\n        } else {\\n          r = r.mulDiv(y, d);\\n          n--;\\n        }\\n      }\\n\\n      uint16 de = findMaxExponent(d);\\n      while (nd_ > 0) {\\n        uint16 e = uint16(Math.min(de, nd_));\\n        r /= d ** e;\\n        nd_ -= e;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates floor(x * (y / d)**n) with low precision.\\n   */\\n  function mulDivLowPrecision(uint256 x, uint256 y, uint256 d, uint16 n) internal pure returns (uint256) {\\n    return uncheckedMulDiv(x, y, d, n, findMaxExponent(Math.max(y, d)));\\n  }\\n\\n  /**\\n   * @dev Aggregated calculate multiplications.\\n   * ```\\n   * r = x*(y/d)^k\\n   *   = \\\\prod(x*(y/d)^{k_i}) \\\\ where \\\\ sum(k_i) = k\\n   * ```\\n   */\\n  function uncheckedMulDiv(uint256 x, uint256 y, uint256 d, uint16 n, uint16 maxE) internal pure returns (uint256 r) {\\n    unchecked {\\n      r = x;\\n      uint16 e;\\n      while (n > 0) {\\n        e = uint16(Math.min(n, maxE));\\n        r = r.mulDiv(y ** e, d ** e);\\n        n -= e;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest exponent `k` where, x^k <= 2^256-1\\n   * Note: n = Surd[2^256-1,k]\\n   *         = 10^( log2(2^256-1) / k * log10(2) )\\n   */\\n  function findMaxExponent(uint256 x) internal pure returns (uint16 k) {\\n    if (x < 3) k = 255;\\n    else if (x < 4) k = 128;\\n    else if (x < 16) k = 64;\\n    else if (x < 256) k = 32;\\n    else if (x < 7132) k = 20;\\n    else if (x < 11376) k = 19;\\n    else if (x < 19113) k = 18;\\n    else if (x < 34132) k = 17;\\n    else if (x < 65536) k = 16;\\n    else if (x < 137271) k = 15;\\n    else if (x < 319558) k = 14;\\n    else if (x < 847180) k = 13;\\n    else if (x < 2642246) k = 12;\\n    else if (x < 10134189) k = 11;\\n    else if (x < 50859009) k = 10;\\n    else if (x < 365284285) k = 9;\\n    else if (x < 4294967296) k = 8;\\n    else if (x < 102116749983) k = 7;\\n    else if (x < 6981463658332) k = 6;\\n    else if (x < 2586638741762875) k = 5;\\n    else if (x < 18446744073709551616) k = 4;\\n    else if (x < 48740834812604276470692695) k = 3;\\n    else if (x < 340282366920938463463374607431768211456) k = 2;\\n    else k = 1;\\n  }\\n}\\n\",\"keccak256\":\"0x29f943cf7c61149bc9a624244901720fc3a349adb418555db1db2a045fcdfb70\",\"license\":\"MIT\"},\"src/libraries/transfers/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title RONTransferHelper\\n */\\nlibrary RONTransferHelper {\\n  using Strings for *;\\n\\n  /**\\n   * @dev Transfers RON and wraps result for the method caller to a recipient.\\n   */\\n  function safeTransfer(address payable _to, uint256 _value) internal {\\n    bool _success = send(_to, _value);\\n    if (!_success) {\\n      revert(\\n        string.concat(\\\"TransferHelper: could not transfer RON to \\\", _to.toHexString(), \\\" value \\\", _value.toHexString())\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the call was success.\\n   * Note: this function should use with the `ReentrancyGuard`.\\n   */\\n  function send(address payable _to, uint256 _value) internal returns (bool _success) {\\n    (_success,) = _to.call{ value: _value }(new bytes(0));\\n  }\\n}\\n\",\"keccak256\":\"0x733e60374ee0a33d0da2ee24976b893ca6b6d9764243b175e1ac8025240394da\",\"license\":\"MIT\"},\"src/types/ModifyingIndicator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype ModifyingIndicator is uint256;\\n\\nusing { hasAny } for ModifyingIndicator global;\\nusing { or as | } for ModifyingIndicator global;\\nusing { and as & } for ModifyingIndicator global;\\nusing { eq as == } for ModifyingIndicator global;\\nusing { not as ~ } for ModifyingIndicator global;\\nusing { neq as != } for ModifyingIndicator global;\\n\\n/// @dev Indicator for modifying immutable fields: Depth, ParentId, Label. See struct {INSUnified.ImmutableRecord}.\\nModifyingIndicator constant IMMUTABLE_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x7);\\n\\n/// @dev Indicator for modifying user fields: Resolver, Owner. See struct {INSUnified.MutableRecord}.\\nModifyingIndicator constant USER_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x18);\\n\\n/// @dev Indicator when modifying all of the fields in {ModifyingField}.\\nModifyingIndicator constant ALL_FIELDS_INDICATOR = ModifyingIndicator.wrap(type(uint256).max);\\n\\nfunction eq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return ModifyingIndicator.unwrap(self) == ModifyingIndicator.unwrap(other);\\n}\\n\\nfunction neq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return !eq(self, other);\\n}\\n\\nfunction not(ModifyingIndicator self) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(~ModifyingIndicator.unwrap(self));\\n}\\n\\nfunction or(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) | ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction and(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) & ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction hasAny(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return self & other != ModifyingIndicator.wrap(0);\\n}\\n\",\"keccak256\":\"0xe364b4d2e480a7f3e392a40f792303c0febf79c1a623eb4c2278f652210e2e6c\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 182507,
  "numDeployments": 1,
  "storageLayout": {
    "storage": [
      {
        "astId": 50180,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 50000,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 50003,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_initializing",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 50281,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 48473,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)48468_storage)"
      },
      {
        "astId": 48783,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)54352_storage)"
      },
      {
        "astId": 63015,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "____gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 63018,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_minCommitmentAge",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 63021,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_maxCommitmentAge",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 63024,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_minRegistrationDuration",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 63027,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_treasury",
        "offset": 0,
        "slot": "57",
        "type": "t_address_payable"
      },
      {
        "astId": 63031,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_rnsUnified",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(INSUnified)65128"
      },
      {
        "astId": 63035,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_nameChecker",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(INameChecker)65247"
      },
      {
        "astId": 63039,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_priceOracle",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(INSDomainPrice)64755"
      },
      {
        "astId": 63043,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_reverseRegistrar",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(INSReverseRegistrar)64874"
      },
      {
        "astId": 63048,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_committedAt",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 63055,
        "contract": "src/RONRegistrarController.sol:RONRegistrarController",
        "label": "_protectedNamesWhitelisted",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(INSDomainPrice)64755": {
        "encoding": "inplace",
        "label": "contract INSDomainPrice",
        "numberOfBytes": "20"
      },
      "t_contract(INSReverseRegistrar)64874": {
        "encoding": "inplace",
        "label": "contract INSReverseRegistrar",
        "numberOfBytes": "20"
      },
      "t_contract(INSUnified)65128": {
        "encoding": "inplace",
        "label": "contract INSUnified",
        "numberOfBytes": "20"
      },
      "t_contract(INameChecker)65247": {
        "encoding": "inplace",
        "label": "contract INameChecker",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)54352_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)54352_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)48468_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)48468_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(AddressSet)54352_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 54351,
            "contract": "src/RONRegistrarController.sol:RONRegistrarController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)54037_storage"
          }
        ]
      },
      "t_struct(RoleData)48468_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 48465,
            "contract": "src/RONRegistrarController.sol:RONRegistrarController",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 48467,
            "contract": "src/RONRegistrarController.sol:RONRegistrarController",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)54037_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 54032,
            "contract": "src/RONRegistrarController.sol:RONRegistrarController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 54036,
            "contract": "src/RONRegistrarController.sol:RONRegistrarController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1697372891,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "notice": "Customized version of ETHRegistrarController: https://github.com/ensdomains/ens-contracts/blob/45455f1229556ed4f416ef7225d4caea2c1bc0b5/contracts/ethregistrar/ETHRegistrarController.sol"
  }
}