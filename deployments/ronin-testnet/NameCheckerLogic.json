{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "TotalSubStringTooLarge",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wordCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "shouldForbid",
          "type": "bool"
        }
      ],
      "name": "ForbiddenWordsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "name": "WordRangeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "containsBlacklistedWord",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "containsInvalidCharacter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "forbidden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "getAllSubStrings",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "subStrings",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWordRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "pack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "packed",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "strs",
          "type": "string[]"
        }
      ],
      "name": "packBulk",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "packeds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "packedWords",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "shouldForbid",
          "type": "bool"
        }
      ],
      "name": "setForbiddenWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "shouldForbid",
          "type": "bool"
        }
      ],
      "name": "setForbiddenWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "name": "setWordRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strlen",
          "type": "uint256"
        }
      ],
      "name": "totalSubString",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "address": "0xAf4a77BC41320bedf62d33ad278d76731EAAbCF4",
  "args": "0x",
  "blockNumber": 21224275,
  "bytecode": "0x608060405261000c610011565b6100d0565b600054610100900460ff161561007d5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100ce576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611a34806100df6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063ca5f79951161007c578063ca5f7995146102df578063d547741f1461030d578063e04af3b714610320578063e786c3ad14610340578063fb3809be14610360578063fbc639091461037357600080fd5b806391d148541461027957806392aec2fc1461028c57806396237206146102b1578063a217fddf146102c4578063ca15c873146102cc57600080fd5b80632f2ff15d116100ff5780632f2ff15d1461020257806336568abe14610215578063439e42e7146102285780635c0a3caa1461023b5780639010d07c1461024e57600080fd5b806301ffc9a71461013c5780630fda4464146101645780631d367b5714610177578063245ed654146101bb578063248a9ca3146101d0575b600080fd5b61014f61014a3660046113ad565b610386565b60405190151581526020015b60405180910390f35b61014f6101723660046113d7565b6103b1565b6101a16040805180820190915260355460ff80821680845261010090920416602090920182905291565b6040805160ff93841681529290911660208301520161015b565b6101ce6101c93660046114aa565b6103d4565b005b6101f46101de3660046114fe565b6000908152600160208190526040909120015490565b60405190815260200161015b565b6101ce61021036600461152e565b610423565b6101ce61022336600461152e565b61044e565b61014f6102363660046113d7565b6104d1565b61014f6102493660046113d7565b61056f565b61026161025c36600461155a565b610737565b6040516001600160a01b03909116815260200161015b565b61014f61028736600461152e565b61074f565b6101f461029a366004611633565b6000601f600183510310601f830151029050919050565b6101ce6102bf3660046114aa565b61077a565b6101f4600081565b6101f46102da3660046114fe565b6107a7565b6102f26102ed3660046114fe565b6107be565b6040805193845260208401929092529082015260600161015b565b6101ce61031b36600461152e565b6107fd565b61033361032e3660046116f5565b610823565b60405161015b919061173e565b61035361034e3660046113d7565b6108b9565b60405161015b91906117d2565b6101ce61036e366004611845565b6108e9565b6101ce61038136600461187f565b610a09565b60006001600160e01b03198216635a05180f60e01b14806103ab57506103ab82610a1e565b92915050565b60006103bd838361056f565b806103cd57506103cd83836104d1565b9392505050565b60006103df81610a53565b61041d848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250610a60915050565b50505050565b6000828152600160208190526040909120015461043f81610a53565b6104498383610c00565b505050565b6001600160a01b03811633146104c35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104cd8282610c22565b5050565b6000806104de84846108b9565b805190915060005b818110156105635761054a610525848381518110610506576105066118a9565b60200260200101516000601f600183510310601f830151029050919050565b600881901c600090815260366020526040902054600160ff9092169190911b16151590565b1561055b57600193505050506103ab565b6001016104e6565b50600095945050505050565b600080600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050600019820190508115806105e75750826000815181106105d0576105d06118a9565b6020910101516001600160f81b031916602d60f81b145b8061061657508281815181106105ff576105ff6118a9565b6020910101516001600160f81b031916602d60f81b145b156106285760019450505050506103ab565b60005b8281101561072957838181518110610645576106456118a9565b01602001516001600160f81b0319169450602d60f81b8590036106b1578181141580156106995750838160010181518110610682576106826118a9565b6020910101516001600160f81b031916602d60f81b145b156106ac576001955050505050506103ab565b610721565b600360fc1b6001600160f81b03198616108015906106dd5750603960f81b6001600160f81b0319861611155b8061070f5750606160f81b6001600160f81b031986161080159061070f5750603d60f91b6001600160f81b0319861611155b610721576001955050505050506103ab565b60010161062b565b506000979650505050505050565b60008281526002602052604081206103cd9083610c44565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061078581610a53565b600061079461032e85876118bf565b90506107a08184610a60565b5050505050565b60008181526002602052604081206103ab90610c50565b6040805180820190915260355460ff8082168352610100909104166020820152600090819081906107f0908590610c5a565b9196909550909350915050565b6000828152600160208190526040909120015461081981610a53565b6104498383610c22565b80516060908067ffffffffffffffff8111156108415761084161157c565b60405190808252806020026020018201604052801561086a578160200160208202803683370190505b50915060005b818110156108b25761088d848281518110610506576105066118a9565b83828151811061089f5761089f6118a9565b6020908102919091010152600101610870565b5050919050565b6040805180820190915260355460ff80821683526101009091041660208201526060906103cd9084908490610ccb565b600054610100900460ff16158080156109095750600054600160ff909116105b806109235750303b158015610923575060005460ff166001145b6109865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ba565b6000805460ff1916600117905580156109a9576000805461ff0019166101001790555b6109b4600085610dda565b6109be8383610de4565b801561041d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6000610a1481610a53565b6104498383610de4565b60006001600160e01b03198216637965db0b60e01b14806103ab57506301ffc9a760e01b6001600160e01b03198316146103ab565b610a5d8133610eca565b50565b8151600080600019815b84811015610b4a57868181518110610a8457610a846118a9565b6020026020010151600003610adb5760405162461bcd60e51b815260206004820181905260248201527f4e616d65436865636b65723a20696e76616c6964207061636b656420776f726460448201526064016104ba565b60f8878281518110610aef57610aef6118a9565b6020026020010151901c9350610b058285610f23565b9150610b118385610f39565b9250610b42878281518110610b2857610b286118a9565b6020026020010151876036610f489092919063ffffffff16565b600101610a6a565b508415610bbc576040805180820190915260355460ff808216808452610100909204166020830152610b7d908390610f23565b9150610b9083826020015160ff16610f39565b815190935060ff1682148015610bac5750806020015160ff1683145b610bba57610bba8284610de4565b505b60408051858152861515602082015233917f060d5a3fc05fdd11d7ba941d00a4fdcde096fb95171930e19997ce2b7df89174910160405180910390a2505050505050565b610c0a8282610f97565b60008281526002602052604090206104499082611002565b610c2c8282611017565b6000828152600260205260409020610449908261107e565b60006103cd8383611093565b60006103ab825490565b6000806000610c70846000015160ff1686610f23565b9150610c83846020015160ff1686610f23565b8281036001818101808302821c868a039092010203945090915061ffff841115610cc357604051630faa3ef560e11b8152600481018590526024016104ba565b509250925092565b60608260008080610cdc8487610c5a565b9250925092508267ffffffffffffffff811115610cfb57610cfb61157c565b604051908082528060200260200182016040528015610d2e57816020015b6060815260200190600190039081610d195790505b50945060008060005b86811015610dcc57610d4b84820188610f23565b91508085015b828111610dc357610d6481838d8f6118cc565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508b5160018801978d935091508110610db057610db06118a9565b6020908102919091010152600101610d51565b50600101610d37565b505050505050509392505050565b6104cd8282610c00565b60ff821615801590610dfc57508060ff168260ff1611155b610e5f5760405162461bcd60e51b815260206004820152602e60248201527f4e616d65436865636b65723a206d696e20776f7264206c656e677468203e206d60448201526d0c2f040eedee4c840d8cadccee8d60931b60648201526084016104ba565b60408051808201825260ff84811680835290841660209283018190526035805461ffff191683176101008302179055835191825291810191909152815133927faabf778cd749a472313a9476aa3b29565e69697c48eb0f82b52fc9f071fd3c95928290030190a25050565b610ed4828261074f565b6104cd57610ee1816110bd565b610eec8360206110cf565b604051602001610efd9291906118f6565b60408051601f198184030181529082905262461bcd60e51b82526104ba9160040161196b565b6000818310610f3257816103cd565b5090919050565b6000818311610f3257816103cd565b8015610f7257600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b610fa1828261074f565b6104cd5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006103cd836001600160a01b03841661126b565b611021828261074f565b156104cd5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006103cd836001600160a01b0384166112ba565b60008260000182815481106110aa576110aa6118a9565b9060005260206000200154905092915050565b60606103ab6001600160a01b03831660145b606060006110de836002611994565b6110e99060026119ab565b67ffffffffffffffff8111156111015761110161157c565b6040519080825280601f01601f19166020018201604052801561112b576020820181803683370190505b509050600360fc1b81600081518110611146576111466118a9565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611175576111756118a9565b60200101906001600160f81b031916908160001a9053506000611199846002611994565b6111a49060016119ab565b90505b600181111561121c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111d8576111d86118a9565b1a60f81b8282815181106111ee576111ee6118a9565b60200101906001600160f81b031916908160001a90535060049490941c93611215816119be565b90506111a7565b5083156103cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104ba565b60008181526001830160205260408120546112b2575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103ab565b5060006103ab565b600081815260018301602052604081205480156113a35760006112de6001836119d5565b85549091506000906112f2906001906119d5565b9050818114611357576000866000018281548110611312576113126118a9565b9060005260206000200154905080876000018481548110611335576113356118a9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611368576113686119e8565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103ab565b60009150506103ab565b6000602082840312156113bf57600080fd5b81356001600160e01b0319811681146103cd57600080fd5b600080602083850312156113ea57600080fd5b823567ffffffffffffffff8082111561140257600080fd5b818501915085601f83011261141657600080fd5b81358181111561142557600080fd5b86602082850101111561143757600080fd5b60209290920196919550909350505050565b60008083601f84011261145b57600080fd5b50813567ffffffffffffffff81111561147357600080fd5b6020830191508360208260051b850101111561148e57600080fd5b9250929050565b803580151581146114a557600080fd5b919050565b6000806000604084860312156114bf57600080fd5b833567ffffffffffffffff8111156114d657600080fd5b6114e286828701611449565b90945092506114f5905060208501611495565b90509250925092565b60006020828403121561151057600080fd5b5035919050565b80356001600160a01b03811681146114a557600080fd5b6000806040838503121561154157600080fd5b8235915061155160208401611517565b90509250929050565b6000806040838503121561156d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156115bb576115bb61157c565b604052919050565b600082601f8301126115d457600080fd5b813567ffffffffffffffff8111156115ee576115ee61157c565b611601601f8201601f1916602001611592565b81815284602083860101111561161657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561164557600080fd5b813567ffffffffffffffff81111561165c57600080fd5b611668848285016115c3565b949350505050565b600067ffffffffffffffff8084111561168b5761168b61157c565b8360051b602061169c818301611592565b868152935090840190808401878311156116b557600080fd5b855b838110156116e9578035858111156116cf5760008081fd5b6116db8a828a016115c3565b8352509082019082016116b7565b50505050509392505050565b60006020828403121561170757600080fd5b813567ffffffffffffffff81111561171e57600080fd5b8201601f8101841361172f57600080fd5b61166884823560208401611670565b6020808252825182820181905260009190848201906040850190845b818110156117765783518352928401929184019160010161175a565b50909695505050505050565b60005b8381101561179d578181015183820152602001611785565b50506000910152565b600081518084526117be816020860160208601611782565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561182757603f198886030184526118158583516117a6565b945092850192908501906001016117f9565b5092979650505050505050565b803560ff811681146114a557600080fd5b60008060006060848603121561185a57600080fd5b61186384611517565b925061187160208501611834565b91506114f560408501611834565b6000806040838503121561189257600080fd5b61189b83611834565b915061155160208401611834565b634e487b7160e01b600052603260045260246000fd5b60006103cd368484611670565b600080858511156118dc57600080fd5b838611156118e957600080fd5b5050820193919092039150565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161192e816017850160208801611782565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161195f816028840160208801611782565b01602801949350505050565b6020815260006103cd60208301846117a6565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103ab576103ab61197e565b808201808211156103ab576103ab61197e565b6000816119cd576119cd61197e565b506000190190565b818103818111156103ab576103ab61197e565b634e487b7160e01b600052603160045260246000fdfea26469706673582212202247f1c7e637d2639344dd5ecdf7446256de2b88f161ff1c1c345bfb1a96a16764736f6c63430008150033",
  "chainId": 2021,
  "contractName": "NameChecker",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063ca5f79951161007c578063ca5f7995146102df578063d547741f1461030d578063e04af3b714610320578063e786c3ad14610340578063fb3809be14610360578063fbc639091461037357600080fd5b806391d148541461027957806392aec2fc1461028c57806396237206146102b1578063a217fddf146102c4578063ca15c873146102cc57600080fd5b80632f2ff15d116100ff5780632f2ff15d1461020257806336568abe14610215578063439e42e7146102285780635c0a3caa1461023b5780639010d07c1461024e57600080fd5b806301ffc9a71461013c5780630fda4464146101645780631d367b5714610177578063245ed654146101bb578063248a9ca3146101d0575b600080fd5b61014f61014a3660046113ad565b610386565b60405190151581526020015b60405180910390f35b61014f6101723660046113d7565b6103b1565b6101a16040805180820190915260355460ff80821680845261010090920416602090920182905291565b6040805160ff93841681529290911660208301520161015b565b6101ce6101c93660046114aa565b6103d4565b005b6101f46101de3660046114fe565b6000908152600160208190526040909120015490565b60405190815260200161015b565b6101ce61021036600461152e565b610423565b6101ce61022336600461152e565b61044e565b61014f6102363660046113d7565b6104d1565b61014f6102493660046113d7565b61056f565b61026161025c36600461155a565b610737565b6040516001600160a01b03909116815260200161015b565b61014f61028736600461152e565b61074f565b6101f461029a366004611633565b6000601f600183510310601f830151029050919050565b6101ce6102bf3660046114aa565b61077a565b6101f4600081565b6101f46102da3660046114fe565b6107a7565b6102f26102ed3660046114fe565b6107be565b6040805193845260208401929092529082015260600161015b565b6101ce61031b36600461152e565b6107fd565b61033361032e3660046116f5565b610823565b60405161015b919061173e565b61035361034e3660046113d7565b6108b9565b60405161015b91906117d2565b6101ce61036e366004611845565b6108e9565b6101ce61038136600461187f565b610a09565b60006001600160e01b03198216635a05180f60e01b14806103ab57506103ab82610a1e565b92915050565b60006103bd838361056f565b806103cd57506103cd83836104d1565b9392505050565b60006103df81610a53565b61041d848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250610a60915050565b50505050565b6000828152600160208190526040909120015461043f81610a53565b6104498383610c00565b505050565b6001600160a01b03811633146104c35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104cd8282610c22565b5050565b6000806104de84846108b9565b805190915060005b818110156105635761054a610525848381518110610506576105066118a9565b60200260200101516000601f600183510310601f830151029050919050565b600881901c600090815260366020526040902054600160ff9092169190911b16151590565b1561055b57600193505050506103ab565b6001016104e6565b50600095945050505050565b600080600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050600019820190508115806105e75750826000815181106105d0576105d06118a9565b6020910101516001600160f81b031916602d60f81b145b8061061657508281815181106105ff576105ff6118a9565b6020910101516001600160f81b031916602d60f81b145b156106285760019450505050506103ab565b60005b8281101561072957838181518110610645576106456118a9565b01602001516001600160f81b0319169450602d60f81b8590036106b1578181141580156106995750838160010181518110610682576106826118a9565b6020910101516001600160f81b031916602d60f81b145b156106ac576001955050505050506103ab565b610721565b600360fc1b6001600160f81b03198616108015906106dd5750603960f81b6001600160f81b0319861611155b8061070f5750606160f81b6001600160f81b031986161080159061070f5750603d60f91b6001600160f81b0319861611155b610721576001955050505050506103ab565b60010161062b565b506000979650505050505050565b60008281526002602052604081206103cd9083610c44565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061078581610a53565b600061079461032e85876118bf565b90506107a08184610a60565b5050505050565b60008181526002602052604081206103ab90610c50565b6040805180820190915260355460ff8082168352610100909104166020820152600090819081906107f0908590610c5a565b9196909550909350915050565b6000828152600160208190526040909120015461081981610a53565b6104498383610c22565b80516060908067ffffffffffffffff8111156108415761084161157c565b60405190808252806020026020018201604052801561086a578160200160208202803683370190505b50915060005b818110156108b25761088d848281518110610506576105066118a9565b83828151811061089f5761089f6118a9565b6020908102919091010152600101610870565b5050919050565b6040805180820190915260355460ff80821683526101009091041660208201526060906103cd9084908490610ccb565b600054610100900460ff16158080156109095750600054600160ff909116105b806109235750303b158015610923575060005460ff166001145b6109865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ba565b6000805460ff1916600117905580156109a9576000805461ff0019166101001790555b6109b4600085610dda565b6109be8383610de4565b801561041d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6000610a1481610a53565b6104498383610de4565b60006001600160e01b03198216637965db0b60e01b14806103ab57506301ffc9a760e01b6001600160e01b03198316146103ab565b610a5d8133610eca565b50565b8151600080600019815b84811015610b4a57868181518110610a8457610a846118a9565b6020026020010151600003610adb5760405162461bcd60e51b815260206004820181905260248201527f4e616d65436865636b65723a20696e76616c6964207061636b656420776f726460448201526064016104ba565b60f8878281518110610aef57610aef6118a9565b6020026020010151901c9350610b058285610f23565b9150610b118385610f39565b9250610b42878281518110610b2857610b286118a9565b6020026020010151876036610f489092919063ffffffff16565b600101610a6a565b508415610bbc576040805180820190915260355460ff808216808452610100909204166020830152610b7d908390610f23565b9150610b9083826020015160ff16610f39565b815190935060ff1682148015610bac5750806020015160ff1683145b610bba57610bba8284610de4565b505b60408051858152861515602082015233917f060d5a3fc05fdd11d7ba941d00a4fdcde096fb95171930e19997ce2b7df89174910160405180910390a2505050505050565b610c0a8282610f97565b60008281526002602052604090206104499082611002565b610c2c8282611017565b6000828152600260205260409020610449908261107e565b60006103cd8383611093565b60006103ab825490565b6000806000610c70846000015160ff1686610f23565b9150610c83846020015160ff1686610f23565b8281036001818101808302821c868a039092010203945090915061ffff841115610cc357604051630faa3ef560e11b8152600481018590526024016104ba565b509250925092565b60608260008080610cdc8487610c5a565b9250925092508267ffffffffffffffff811115610cfb57610cfb61157c565b604051908082528060200260200182016040528015610d2e57816020015b6060815260200190600190039081610d195790505b50945060008060005b86811015610dcc57610d4b84820188610f23565b91508085015b828111610dc357610d6481838d8f6118cc565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508b5160018801978d935091508110610db057610db06118a9565b6020908102919091010152600101610d51565b50600101610d37565b505050505050509392505050565b6104cd8282610c00565b60ff821615801590610dfc57508060ff168260ff1611155b610e5f5760405162461bcd60e51b815260206004820152602e60248201527f4e616d65436865636b65723a206d696e20776f7264206c656e677468203e206d60448201526d0c2f040eedee4c840d8cadccee8d60931b60648201526084016104ba565b60408051808201825260ff84811680835290841660209283018190526035805461ffff191683176101008302179055835191825291810191909152815133927faabf778cd749a472313a9476aa3b29565e69697c48eb0f82b52fc9f071fd3c95928290030190a25050565b610ed4828261074f565b6104cd57610ee1816110bd565b610eec8360206110cf565b604051602001610efd9291906118f6565b60408051601f198184030181529082905262461bcd60e51b82526104ba9160040161196b565b6000818310610f3257816103cd565b5090919050565b6000818311610f3257816103cd565b8015610f7257600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b610fa1828261074f565b6104cd5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006103cd836001600160a01b03841661126b565b611021828261074f565b156104cd5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006103cd836001600160a01b0384166112ba565b60008260000182815481106110aa576110aa6118a9565b9060005260206000200154905092915050565b60606103ab6001600160a01b03831660145b606060006110de836002611994565b6110e99060026119ab565b67ffffffffffffffff8111156111015761110161157c565b6040519080825280601f01601f19166020018201604052801561112b576020820181803683370190505b509050600360fc1b81600081518110611146576111466118a9565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611175576111756118a9565b60200101906001600160f81b031916908160001a9053506000611199846002611994565b6111a49060016119ab565b90505b600181111561121c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111d8576111d86118a9565b1a60f81b8282815181106111ee576111ee6118a9565b60200101906001600160f81b031916908160001a90535060049490941c93611215816119be565b90506111a7565b5083156103cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104ba565b60008181526001830160205260408120546112b2575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103ab565b5060006103ab565b600081815260018301602052604081205480156113a35760006112de6001836119d5565b85549091506000906112f2906001906119d5565b9050818114611357576000866000018281548110611312576113126118a9565b9060005260206000200154905080876000018481548110611335576113356118a9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611368576113686119e8565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103ab565b60009150506103ab565b6000602082840312156113bf57600080fd5b81356001600160e01b0319811681146103cd57600080fd5b600080602083850312156113ea57600080fd5b823567ffffffffffffffff8082111561140257600080fd5b818501915085601f83011261141657600080fd5b81358181111561142557600080fd5b86602082850101111561143757600080fd5b60209290920196919550909350505050565b60008083601f84011261145b57600080fd5b50813567ffffffffffffffff81111561147357600080fd5b6020830191508360208260051b850101111561148e57600080fd5b9250929050565b803580151581146114a557600080fd5b919050565b6000806000604084860312156114bf57600080fd5b833567ffffffffffffffff8111156114d657600080fd5b6114e286828701611449565b90945092506114f5905060208501611495565b90509250925092565b60006020828403121561151057600080fd5b5035919050565b80356001600160a01b03811681146114a557600080fd5b6000806040838503121561154157600080fd5b8235915061155160208401611517565b90509250929050565b6000806040838503121561156d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156115bb576115bb61157c565b604052919050565b600082601f8301126115d457600080fd5b813567ffffffffffffffff8111156115ee576115ee61157c565b611601601f8201601f1916602001611592565b81815284602083860101111561161657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561164557600080fd5b813567ffffffffffffffff81111561165c57600080fd5b611668848285016115c3565b949350505050565b600067ffffffffffffffff8084111561168b5761168b61157c565b8360051b602061169c818301611592565b868152935090840190808401878311156116b557600080fd5b855b838110156116e9578035858111156116cf5760008081fd5b6116db8a828a016115c3565b8352509082019082016116b7565b50505050509392505050565b60006020828403121561170757600080fd5b813567ffffffffffffffff81111561171e57600080fd5b8201601f8101841361172f57600080fd5b61166884823560208401611670565b6020808252825182820181905260009190848201906040850190845b818110156117765783518352928401929184019160010161175a565b50909695505050505050565b60005b8381101561179d578181015183820152602001611785565b50506000910152565b600081518084526117be816020860160208601611782565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561182757603f198886030184526118158583516117a6565b945092850192908501906001016117f9565b5092979650505050505050565b803560ff811681146114a557600080fd5b60008060006060848603121561185a57600080fd5b61186384611517565b925061187160208501611834565b91506114f560408501611834565b6000806040838503121561189257600080fd5b61189b83611834565b915061155160208401611834565b634e487b7160e01b600052603260045260246000fd5b60006103cd368484611670565b600080858511156118dc57600080fd5b838611156118e957600080fd5b5050820193919092039150565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161192e816017850160208801611782565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161195f816028840160208801611782565b01602801949350505050565b6020815260006103cd60208301846117a6565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103ab576103ab61197e565b808201808211156103ab576103ab61197e565b6000816119cd576119cd61197e565b506000190190565b818103818111156103ab576103ab61197e565b634e487b7160e01b600052603160045260246000fdfea26469706673582212202247f1c7e637d2639344dd5ecdf7446256de2b88f161ff1c1c345bfb1a96a16764736f6c63430008150033",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "containsBlacklistedWord(string)": {
        "params": {
          "name": "The string to check."
        },
        "returns": {
          "_0": "true if the name contains blacklisted words, false otherwise."
        }
      },
      "containsInvalidCharacter(string)": {
        "params": {
          "name": "The string to check."
        },
        "returns": {
          "_0": "true if the name contains invalid characters, false otherwise."
        }
      },
      "forbidden(string)": {
        "params": {
          "name": "The string to check."
        },
        "returns": {
          "_0": "true if the name contains forbidden characters or blacklisted words, false otherwise."
        }
      },
      "getAllSubStrings(string)": {
        "details": "Returns an array of all substrings of a given string.",
        "params": {
          "str": "The input string to analyze."
        },
        "returns": {
          "subStrings": "An array of all substrings."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getWordRange()": {
        "details": "Retrieves the current minimum and maximum word lengths allowed.",
        "returns": {
          "max": "The maximum word length allowed.",
          "min": "The minimum word length allowed."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pack(string)": {
        "details": "Packs a string into a single word representation.",
        "params": {
          "str": "The string to be packed."
        },
        "returns": {
          "packed": "The packed value of the input string."
        }
      },
      "packBulk(string[])": {
        "details": "Packs an array of strings into their single word representations.",
        "params": {
          "strs": "The array of strings to be packed."
        },
        "returns": {
          "packeds": "An array containing the packed values of the input strings."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setForbiddenWords(string[],bool)": {
        "details": "Sets a list of forbidden words and specifies whether they should be forbidden.",
        "params": {
          "shouldForbid": "Boolean indicating whether the specified words should be forbidden.",
          "words": "An array of raw words in string representations."
        }
      },
      "setForbiddenWords(uint256[],bool)": {
        "details": "Sets a list of forbidden words and specifies whether they should be forbidden.",
        "params": {
          "packedWords": "An array of packed word representations.",
          "shouldForbid": "Boolean indicating whether the specified words should be forbidden."
        }
      },
      "setWordRange(uint8,uint8)": {
        "details": "Sets the minimum and maximum word lengths allowed.",
        "params": {
          "max": "The maximum word length.",
          "min": "The minimum word length."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSubString(uint256)": {
        "details": "Returns the total number of substrings for a given string length, as well as the minimum and maximum allowed word lengths.",
        "params": {
          "strlen": "The length of the input string."
        },
        "returns": {
          "max": "The maximum word length allowed.",
          "min": "The minimum word length allowed.",
          "total": "The total number of substrings."
        }
      }
    },
    "events": {
      "ForbiddenWordsUpdated(address,uint256,bool)": {
        "details": "Emitted when the forbidden words are updated.",
        "params": {
          "operator": "The address that updated the forbidden words list.",
          "shouldForbid": "Boolean indicating whether the specified words should be forbidden.",
          "wordCount": "The number of words in the list."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "WordRangeUpdated(address,uint8,uint8)": {
        "details": "Emitted when the word range is updated.",
        "params": {
          "max": "The maximum word length allowed.",
          "min": "The minimum word length allowed.",
          "operator": "The address that updated the word range."
        }
      }
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TotalSubStringTooLarge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wordCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldForbid\",\"type\":\"bool\"}],\"name\":\"ForbiddenWordsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"WordRangeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"containsBlacklistedWord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"containsInvalidCharacter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"forbidden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"getAllSubStrings\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"subStrings\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWordRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"pack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"packed\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"strs\",\"type\":\"string[]\"}],\"name\":\"packBulk\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"packeds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"packedWords\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"shouldForbid\",\"type\":\"bool\"}],\"name\":\"setForbiddenWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"shouldForbid\",\"type\":\"bool\"}],\"name\":\"setForbiddenWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setWordRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strlen\",\"type\":\"uint256\"}],\"name\":\"totalSubString\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ForbiddenWordsUpdated(address,uint256,bool)\":{\"details\":\"Emitted when the forbidden words are updated.\",\"params\":{\"operator\":\"The address that updated the forbidden words list.\",\"shouldForbid\":\"Boolean indicating whether the specified words should be forbidden.\",\"wordCount\":\"The number of words in the list.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"WordRangeUpdated(address,uint8,uint8)\":{\"details\":\"Emitted when the word range is updated.\",\"params\":{\"max\":\"The maximum word length allowed.\",\"min\":\"The minimum word length allowed.\",\"operator\":\"The address that updated the word range.\"}}},\"kind\":\"dev\",\"methods\":{\"containsBlacklistedWord(string)\":{\"params\":{\"name\":\"The string to check.\"},\"returns\":{\"_0\":\"true if the name contains blacklisted words, false otherwise.\"}},\"containsInvalidCharacter(string)\":{\"params\":{\"name\":\"The string to check.\"},\"returns\":{\"_0\":\"true if the name contains invalid characters, false otherwise.\"}},\"forbidden(string)\":{\"params\":{\"name\":\"The string to check.\"},\"returns\":{\"_0\":\"true if the name contains forbidden characters or blacklisted words, false otherwise.\"}},\"getAllSubStrings(string)\":{\"details\":\"Returns an array of all substrings of a given string.\",\"params\":{\"str\":\"The input string to analyze.\"},\"returns\":{\"subStrings\":\"An array of all substrings.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getWordRange()\":{\"details\":\"Retrieves the current minimum and maximum word lengths allowed.\",\"returns\":{\"max\":\"The maximum word length allowed.\",\"min\":\"The minimum word length allowed.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pack(string)\":{\"details\":\"Packs a string into a single word representation.\",\"params\":{\"str\":\"The string to be packed.\"},\"returns\":{\"packed\":\"The packed value of the input string.\"}},\"packBulk(string[])\":{\"details\":\"Packs an array of strings into their single word representations.\",\"params\":{\"strs\":\"The array of strings to be packed.\"},\"returns\":{\"packeds\":\"An array containing the packed values of the input strings.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setForbiddenWords(string[],bool)\":{\"details\":\"Sets a list of forbidden words and specifies whether they should be forbidden.\",\"params\":{\"shouldForbid\":\"Boolean indicating whether the specified words should be forbidden.\",\"words\":\"An array of raw words in string representations.\"}},\"setForbiddenWords(uint256[],bool)\":{\"details\":\"Sets a list of forbidden words and specifies whether they should be forbidden.\",\"params\":{\"packedWords\":\"An array of packed word representations.\",\"shouldForbid\":\"Boolean indicating whether the specified words should be forbidden.\"}},\"setWordRange(uint8,uint8)\":{\"details\":\"Sets the minimum and maximum word lengths allowed.\",\"params\":{\"max\":\"The maximum word length.\",\"min\":\"The minimum word length.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSubString(uint256)\":{\"details\":\"Returns the total number of substrings for a given string length, as well as the minimum and maximum allowed word lengths.\",\"params\":{\"strlen\":\"The length of the input string.\"},\"returns\":{\"max\":\"The maximum word length allowed.\",\"min\":\"The minimum word length allowed.\",\"total\":\"The total number of substrings.\"}}},\"stateVariables\":{\"____gap\":{\"details\":\"Gap for upgradeability.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"containsBlacklistedWord(string)\":{\"notice\":\"Checks if a given name contains any blacklisted words.\"},\"containsInvalidCharacter(string)\":{\"notice\":\"Checks if a given name contains any invalid characters. requirements: - all characters in name must in range [a-z] or [0-9].\"},\"forbidden(string)\":{\"notice\":\"Checks if a given name contains any forbidden characters or blacklisted words.\"},\"pack(string)\":{\"notice\":\"Returns `uint256(0)` if the length is zero or greater than 31.\"},\"packBulk(string[])\":{\"notice\":\"Returns an array of packed values, along with the minimum and maximum string lengths.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NameChecker.sol\":\"NameChecker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/=lib/pyth-sdk-solidity/\",\":@rns-contracts/=src/\",\":buffer/=lib/buffer/contracts/\",\":contract-template/=lib/contract-template/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/NameChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { BitMaps } from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport { Math, LibSubString } from \\\"./libraries/LibSubString.sol\\\";\\nimport { INameChecker } from \\\"./interfaces/INameChecker.sol\\\";\\n\\ncontract NameChecker is Initializable, AccessControlEnumerable, INameChecker {\\n  using LibSubString for *;\\n  using BitMaps for BitMaps.BitMap;\\n\\n  /// @dev Gap for upgradeability.\\n  uint256[50] private ____gap;\\n\\n  LibSubString.WordRange internal _wordRange;\\n  BitMaps.BitMap internal _forbiddenWordMap;\\n\\n  constructor() payable {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address admin, uint8 min, uint8 max) external initializer {\\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    _setWordRange(min, max);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function getWordRange() external view returns (uint8 min, uint8 max) {\\n    LibSubString.WordRange memory wordRange = _wordRange;\\n    return (wordRange.min, wordRange.max);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function setWordRange(uint8 min, uint8 max) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setWordRange(min, max);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function forbidden(string calldata name) public view returns (bool) {\\n    return containsInvalidCharacter(name) || containsBlacklistedWord(name);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function containsBlacklistedWord(string calldata name) public view returns (bool) {\\n    string[] memory sstrs = getAllSubStrings(name);\\n    uint256 length = sstrs.length;\\n\\n    for (uint256 i; i < length;) {\\n      if (_forbiddenWordMap.get(pack(sstrs[i]))) return true;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function containsInvalidCharacter(string calldata name) public pure returns (bool) {\\n    unchecked {\\n      bytes1 char;\\n      bytes memory bName = bytes(name);\\n      uint256 length = bName.length;\\n\\n      uint256 tail = length - 1;\\n      // Check if the name is empty or starts or ends with a hyphen (-)\\n      if (length == 0 || bName[0] == 0x2d || bName[tail] == 0x2d) return true;\\n\\n      // [0x30, 0x39] => [0-9]\\n      // [0x61, 0x7a] => [a-z]\\n      for (uint256 i; i < length; ++i) {\\n        char = bName[i];\\n        if (char == 0x2d) {\\n          // Check consecutive hyphens\\n          if (i != tail && bName[i + 1] == 0x2d) return true;\\n        }\\n        // Check for invalid character (not (-) || [0-9] || [a-z])\\n        else if (!((char >= 0x30 && char <= 0x39) || (char >= 0x61 && char <= 0x7a))) {\\n          return true;\\n        }\\n      }\\n\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function pack(string memory str) public pure returns (uint256 packed) {\\n    assembly (\\\"memory-safe\\\") {\\n      // We don't need to zero right pad the string,\\n      // since this is our own custom non-standard packing scheme.\\n      packed :=\\n        mul(\\n          // Load the length and the bytes.\\n          mload(add(str, 0x1f)),\\n          // `length != 0 && length < 32`. Abuses underflow.\\n          // Assumes that the length is valid and within the block gas limit.\\n          lt(sub(mload(str), 1), 0x1f)\\n        )\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function packBulk(string[] memory strs) public pure returns (uint256[] memory packeds) {\\n    uint256 length = strs.length;\\n    packeds = new uint256[](length);\\n\\n    for (uint256 i; i < length;) {\\n      packeds[i] = pack(strs[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function setForbiddenWords(string[] calldata words, bool shouldForbid) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    uint256[] memory packedWords = packBulk(words);\\n    _setForbiddenWords(packedWords, shouldForbid);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function setForbiddenWords(uint256[] calldata packedWords, bool shouldForbid) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setForbiddenWords(packedWords, shouldForbid);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function totalSubString(uint256 strlen) public view returns (uint256 total, uint256 min, uint256 max) {\\n    (total, min, max) = strlen.totalSubString(_wordRange);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function getAllSubStrings(string calldata str) public view returns (string[] memory subStrings) {\\n    subStrings = str.getAllSubStrings(_wordRange);\\n  }\\n\\n  /**\\n   * @dev Set the forbidden status of packed words.\\n   * @param packedWords An array of packed word representations.\\n   * @param shouldForbid A boolean flag indicating whether to forbid or unforbid the words.\\n   * @notice It ensures that packed words are not zero, indicating their validity.\\n   * @notice Emits a `ForbiddenWordsUpdated` event upon successful execution.\\n   */\\n  function _setForbiddenWords(uint256[] memory packedWords, bool shouldForbid) internal {\\n    uint256 length = packedWords.length;\\n    uint256 strlen;\\n    uint256 max;\\n    uint256 min = type(uint256).max;\\n\\n    for (uint256 i; i < length;) {\\n      require(packedWords[i] != 0, \\\"NameChecker: invalid packed word\\\");\\n      strlen = packedWords[i] >> 0xf8;\\n      min = Math.min(min, strlen);\\n      max = Math.max(max, strlen);\\n      _forbiddenWordMap.setTo(packedWords[i], shouldForbid);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    if (shouldForbid) {\\n      LibSubString.WordRange memory wordRange = _wordRange;\\n      min = Math.min(min, wordRange.min);\\n      max = Math.max(max, wordRange.max);\\n      if (!(min == wordRange.min && max == wordRange.max)) _setWordRange(uint8(min), uint8(max));\\n    }\\n\\n    emit ForbiddenWordsUpdated(_msgSender(), length, shouldForbid);\\n  }\\n\\n  /**\\n   * @dev Set the allowed word length range.\\n   * @param min The minimum word length allowed.\\n   * @param max The maximum word length allowed.\\n   * @notice The minimum word length must be greater than 0, and it must not exceed the maximum word length.\\n   */\\n  function _setWordRange(uint8 min, uint8 max) internal {\\n    require(min != 0 && min <= max, \\\"NameChecker: min word length > max word length\\\");\\n    _wordRange = LibSubString.WordRange(min, max);\\n    emit WordRangeUpdated(_msgSender(), min, max);\\n  }\\n}\\n\",\"keccak256\":\"0x986e01fd05eedebfcf1ff887b88b195ae28e4b0dd8f82d465e68813a02bf22ef\",\"license\":\"MIT\"},\"src/interfaces/INameChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title INameChecker\\n * @dev The INameChecker interface provides functions for managing and checking substrings and forbidden words in strings.\\n */\\ninterface INameChecker {\\n  /**\\n   * @dev Emitted when the word range is updated.\\n   * @param operator The address that updated the word range.\\n   * @param min The minimum word length allowed.\\n   * @param max The maximum word length allowed.\\n   */\\n  event WordRangeUpdated(address indexed operator, uint8 min, uint8 max);\\n\\n  /**\\n   * @dev Emitted when the forbidden words are updated.\\n   * @param operator The address that updated the forbidden words list.\\n   * @param wordCount The number of words in the list.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  event ForbiddenWordsUpdated(address indexed operator, uint256 wordCount, bool shouldForbid);\\n\\n  /**\\n   * @dev Returns an array of all substrings of a given string.\\n   * @param str The input string to analyze.\\n   * @return subStrings An array of all substrings.\\n   */\\n  function getAllSubStrings(string calldata str) external view returns (string[] memory subStrings);\\n\\n  /**\\n   * @dev Returns the total number of substrings for a given string length, as well as the minimum and maximum allowed word lengths.\\n   * @param strlen The length of the input string.\\n   * @return total The total number of substrings.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function totalSubString(uint256 strlen) external view returns (uint256 total, uint256 min, uint256 max);\\n\\n  /**\\n   * @dev Sets a list of forbidden words and specifies whether they should be forbidden.\\n   * @param packedWords An array of packed word representations.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  function setForbiddenWords(uint256[] calldata packedWords, bool shouldForbid) external;\\n\\n  /**\\n   * @dev Sets a list of forbidden words and specifies whether they should be forbidden.\\n   * @param words An array of raw words in string representations.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  function setForbiddenWords(string[] calldata words, bool shouldForbid) external;\\n\\n  /**\\n   * @dev Sets the minimum and maximum word lengths allowed.\\n   * @param min The minimum word length.\\n   * @param max The maximum word length.\\n   */\\n  function setWordRange(uint8 min, uint8 max) external;\\n\\n  /**\\n   * @dev Retrieves the current minimum and maximum word lengths allowed.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function getWordRange() external view returns (uint8 min, uint8 max);\\n\\n  /**\\n   * @notice Checks if a given name contains any forbidden characters or blacklisted words.\\n   * @param name The string to check.\\n   * @return true if the name contains forbidden characters or blacklisted words, false otherwise.\\n   */\\n  function forbidden(string calldata name) external view returns (bool);\\n\\n  /**\\n   * @notice Checks if a given name contains any blacklisted words.\\n   * @param name The string to check.\\n   * @return true if the name contains blacklisted words, false otherwise.\\n   */\\n  function containsBlacklistedWord(string calldata name) external view returns (bool);\\n\\n  /**\\n   * @notice Checks if a given name contains any invalid characters.\\n   * requirements:\\n   * - all characters in name must in range [a-z] or [0-9].\\n   * @param name The string to check.\\n   * @return true if the name contains invalid characters, false otherwise.\\n   */\\n  function containsInvalidCharacter(string calldata name) external pure returns (bool);\\n\\n  /**\\n   * @dev Packs a string into a single word representation.\\n   * @param str The string to be packed.\\n   * @notice Returns `uint256(0)` if the length is zero or greater than 31.\\n   * @return packed The packed value of the input string.\\n   */\\n  function pack(string memory str) external pure returns (uint256 packed);\\n\\n  /**\\n   * @dev Packs an array of strings into their single word representations.\\n   * @param strs The array of strings to be packed.\\n   * @notice Returns an array of packed values, along with the minimum and maximum string lengths.\\n   * @return packeds An array containing the packed values of the input strings.\\n   */\\n  function packBulk(string[] memory strs) external pure returns (uint256[] memory packeds);\\n}\\n\",\"keccak256\":\"0x9f2b9f08f8d60f565f93925ad64353f01feaad671440d865f45008d1304d4794\",\"license\":\"MIT\"},\"src/libraries/LibSubString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibSubString\\n * @dev A library for working with substrings and word ranges in strings.\\n */\\nlibrary LibSubString {\\n  error TotalSubStringTooLarge(uint256 total);\\n  /**\\n   * @dev Struct representing a word range with minimum and maximum word lengths.\\n   */\\n\\n  struct WordRange {\\n    uint8 min;\\n    uint8 max;\\n  }\\n\\n  uint256 public constant MAX_SUBSTRING_SIZE = type(uint16).max;\\n\\n  /**\\n   * @dev Retrieves all possible substrings within a given string based on a specified word range.\\n   * @param str The input string to analyze.\\n   * @param wordRange The word range specifying the minimum and maximum word lengths.\\n   * @return subStrings An array of all possible substrings within the input string.\\n   */\\n  function getAllSubStrings(string calldata str, WordRange memory wordRange)\\n    internal\\n    pure\\n    returns (string[] memory subStrings)\\n  {\\n    unchecked {\\n      uint256 length = bytes(str).length;\\n      (uint256 total, uint256 min, uint256 max) = totalSubString(length, wordRange);\\n      subStrings = new string[](total);\\n      uint256 idx;\\n      uint256 bLength;\\n\\n      for (uint256 i; i < length; ++i) {\\n        bLength = Math.min(i + max, length);\\n\\n        for (uint256 j = i + min; j <= bLength; ++j) {\\n          subStrings[idx++] = str[i:j];\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the total number of possible substrings within a given string length based on a specified word range.\\n   * @param len The length of the input string.\\n   * @param wordRange The word range specifying the minimum and maximum word lengths.\\n   * @return total The total number of possible substrings.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function totalSubString(uint256 len, WordRange memory wordRange)\\n    internal\\n    pure\\n    returns (uint256 total, uint256 min, uint256 max)\\n  {\\n    unchecked {\\n      min = Math.min(wordRange.min, len);\\n      max = Math.min(wordRange.max, len);\\n      uint256 range = max - min;\\n      // `(range + 1)` represents the number of possible substring lengths in `range`.\\n      // `(strlen - min + 1)` represents the number of possible starting positions for substrings with a minimum length of `min`.\\n      total = (range + 1) * (len - min + 1) - (((range + 1) * range) >> 1);\\n      if (total > MAX_SUBSTRING_SIZE) revert TotalSubStringTooLarge(total);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd0f0b1fad608356df7e9fcb8a133d1f639049fc5ff45ebdf8de59183fe50abb6\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 182499,
  "numDeployments": 1,
  "storageLayout": {
    "storage": [
      {
        "astId": 50000,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 50003,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 48473,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)48468_storage)"
      },
      {
        "astId": 48783,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)54352_storage)"
      },
      {
        "astId": 58252,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "____gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 58255,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_wordRange",
        "offset": 0,
        "slot": "53",
        "type": "t_struct(WordRange)66492_storage"
      },
      {
        "astId": 58258,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_forbiddenWordMap",
        "offset": 0,
        "slot": "54",
        "type": "t_struct(BitMap)53896_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)54352_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)54352_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)48468_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)48468_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)54352_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 54351,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)54037_storage"
          }
        ]
      },
      "t_struct(BitMap)53896_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "numberOfBytes": "32",
        "members": [
          {
            "astId": 53895,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ]
      },
      "t_struct(RoleData)48468_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 48465,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 48467,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)54037_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 54032,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 54036,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_struct(WordRange)66492_storage": {
        "encoding": "inplace",
        "label": "struct LibSubString.WordRange",
        "numberOfBytes": "32",
        "members": [
          {
            "astId": 66489,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 66491,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "max",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1697372891,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "containsBlacklistedWord(string)": {
        "notice": "Checks if a given name contains any blacklisted words."
      },
      "containsInvalidCharacter(string)": {
        "notice": "Checks if a given name contains any invalid characters. requirements: - all characters in name must in range [a-z] or [0-9]."
      },
      "forbidden(string)": {
        "notice": "Checks if a given name contains any forbidden characters or blacklisted words."
      },
      "pack(string)": {
        "notice": "Returns `uint256(0)` if the length is zero or greater than 31."
      },
      "packBulk(string[])": {
        "notice": "Returns an array of packed values, along with the minimum and maximum string lengths."
      }
    }
  }
}