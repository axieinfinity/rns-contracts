{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "rns_",
          "type": "address",
          "internalType": "contract INSUnified"
        },
        {
          "name": "resolver_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "auction_",
          "type": "address",
          "internalType": "contract INSAuction"
        },
        {
          "name": "domainPrice_",
          "type": "address",
          "internalType": "contract INSDomainPrice"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "auction",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract INSAuction"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "bulkMint",
      "inputs": [
        {
          "name": "tos",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "labels",
          "type": "string[]",
          "internalType": "string[]"
        },
        {
          "name": "duration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bulkOverrideRenewalFees",
      "inputs": [
        {
          "name": "labels",
          "type": "string[]",
          "internalType": "string[]"
        },
        {
          "name": "yearlyUSDPrices",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bulkOverrideTiers",
      "inputs": [
        {
          "name": "labels",
          "type": "string[]",
          "internalType": "string[]"
        },
        {
          "name": "tiers",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bulkSetProtected",
      "inputs": [
        {
          "name": "labels",
          "type": "string[]",
          "internalType": "string[]"
        },
        {
          "name": "shouldProtect",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "domainPrice",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract INSDomainPrice"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "reclaimUnbiddedNames",
      "inputs": [
        {
          "name": "tos",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "labels",
          "type": "string[]",
          "internalType": "string[]"
        },
        {
          "name": "allowFailure",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "renounceOwnership",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "resolver",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "rns",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract INSUnified"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "toIds",
      "inputs": [
        {
          "name": "labels",
          "type": "string[]",
          "internalType": "string[]"
        }
      ],
      "outputs": [
        {
          "name": "ids",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "previousOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    }
  ],
  "address": "0x764b68cb5ccc6605729C9eEA8B7bCb72C32ef55d",
  "args": "0x000000000000000000000000f0c99c9677eda0d13291c093b27e6512e4acdf83000000000000000000000000803c459dcb8771e5354d1fc567ecc6885a9fd5e6000000000000000000000000b962edded164f55d136e491a3022246815e1b5a800000000000000000000000051caf51678f469e9dd4c878a7b0cebebbd4a4ab5",
  "ast": {
    "absolutePath": "src/utils/RNSOperation.sol",
    "id": 62292,
    "exportedSymbols": {
      "INSAuction": [
        59770
      ],
      "INSDomainPrice": [
        60083
      ],
      "INSUnified": [
        60340
      ],
      "LibRNSDomain": [
        60494
      ],
      "Math": [
        50793
      ],
      "Ownable": [
        46487
      ],
      "RNSOperation": [
        62291
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:4629:92",
    "nodes": [
      {
        "id": 61927,
        "nodeType": "PragmaDirective",
        "src": "32:24:92",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 61929,
        "nodeType": "ImportDirective",
        "src": "58:69:92",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62292,
        "sourceUnit": 46488,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61928,
              "name": "Ownable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46487,
              "src": "67:7:92",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61931,
        "nodeType": "ImportDirective",
        "src": "128:67:92",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "file": "@openzeppelin/contracts/utils/math/Math.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62292,
        "sourceUnit": 50794,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61930,
              "name": "Math",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 50793,
              "src": "137:4:92",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61933,
        "nodeType": "ImportDirective",
        "src": "196:58:92",
        "nodes": [],
        "absolutePath": "src/interfaces/INSUnified.sol",
        "file": "../interfaces/INSUnified.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62292,
        "sourceUnit": 60341,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61932,
              "name": "INSUnified",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 60340,
              "src": "205:10:92",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61935,
        "nodeType": "ImportDirective",
        "src": "255:58:92",
        "nodes": [],
        "absolutePath": "src/interfaces/INSAuction.sol",
        "file": "../interfaces/INSAuction.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62292,
        "sourceUnit": 59771,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61934,
              "name": "INSAuction",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 59770,
              "src": "264:10:92",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61937,
        "nodeType": "ImportDirective",
        "src": "314:66:92",
        "nodes": [],
        "absolutePath": "src/interfaces/INSDomainPrice.sol",
        "file": "../interfaces/INSDomainPrice.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62292,
        "sourceUnit": 60084,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61936,
              "name": "INSDomainPrice",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 60083,
              "src": "323:14:92",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61939,
        "nodeType": "ImportDirective",
        "src": "381:61:92",
        "nodes": [],
        "absolutePath": "src/libraries/LibRNSDomain.sol",
        "file": "../libraries/LibRNSDomain.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 62292,
        "sourceUnit": 60495,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61938,
              "name": "LibRNSDomain",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 60494,
              "src": "390:12:92",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 62291,
        "nodeType": "ContractDefinition",
        "src": "444:4216:92",
        "nodes": [
          {
            "id": 61944,
            "nodeType": "VariableDeclaration",
            "src": "481:31:92",
            "nodes": [],
            "constant": false,
            "functionSelector": "663b44c5",
            "mutability": "immutable",
            "name": "rns",
            "nameLocation": "509:3:92",
            "scope": 62291,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_INSUnified_$60340",
              "typeString": "contract INSUnified"
            },
            "typeName": {
              "id": 61943,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 61942,
                "name": "INSUnified",
                "nameLocations": [
                  "481:10:92"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 60340,
                "src": "481:10:92"
              },
              "referencedDeclaration": 60340,
              "src": "481:10:92",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_INSUnified_$60340",
                "typeString": "contract INSUnified"
              }
            },
            "visibility": "public"
          },
          {
            "id": 61946,
            "nodeType": "VariableDeclaration",
            "src": "516:33:92",
            "nodes": [],
            "constant": false,
            "functionSelector": "04f3bcec",
            "mutability": "immutable",
            "name": "resolver",
            "nameLocation": "541:8:92",
            "scope": 62291,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 61945,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "516:7:92",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 61949,
            "nodeType": "VariableDeclaration",
            "src": "553:35:92",
            "nodes": [],
            "constant": false,
            "functionSelector": "7d9f6db5",
            "mutability": "immutable",
            "name": "auction",
            "nameLocation": "581:7:92",
            "scope": 62291,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_INSAuction_$59770",
              "typeString": "contract INSAuction"
            },
            "typeName": {
              "id": 61948,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 61947,
                "name": "INSAuction",
                "nameLocations": [
                  "553:10:92"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 59770,
                "src": "553:10:92"
              },
              "referencedDeclaration": 59770,
              "src": "553:10:92",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_INSAuction_$59770",
                "typeString": "contract INSAuction"
              }
            },
            "visibility": "public"
          },
          {
            "id": 61952,
            "nodeType": "VariableDeclaration",
            "src": "592:43:92",
            "nodes": [],
            "constant": false,
            "functionSelector": "5c97404a",
            "mutability": "immutable",
            "name": "domainPrice",
            "nameLocation": "624:11:92",
            "scope": 62291,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
              "typeString": "contract INSDomainPrice"
            },
            "typeName": {
              "id": 61951,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 61950,
                "name": "INSDomainPrice",
                "nameLocations": [
                  "592:14:92"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 60083,
                "src": "592:14:92"
              },
              "referencedDeclaration": 60083,
              "src": "592:14:92",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                "typeString": "contract INSDomainPrice"
              }
            },
            "visibility": "public"
          },
          {
            "id": 61983,
            "nodeType": "FunctionDefinition",
            "src": "640:201:92",
            "nodes": [],
            "body": {
              "id": 61982,
              "nodeType": "Block",
              "src": "738:103:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 61968,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61966,
                      "name": "rns",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61944,
                      "src": "744:3:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSUnified_$60340",
                        "typeString": "contract INSUnified"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61967,
                      "name": "rns_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61955,
                      "src": "750:4:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSUnified_$60340",
                        "typeString": "contract INSUnified"
                      }
                    },
                    "src": "744:10:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSUnified_$60340",
                      "typeString": "contract INSUnified"
                    }
                  },
                  "id": 61969,
                  "nodeType": "ExpressionStatement",
                  "src": "744:10:92"
                },
                {
                  "expression": {
                    "id": 61972,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61970,
                      "name": "auction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61949,
                      "src": "760:7:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSAuction_$59770",
                        "typeString": "contract INSAuction"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61971,
                      "name": "auction_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61960,
                      "src": "770:8:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSAuction_$59770",
                        "typeString": "contract INSAuction"
                      }
                    },
                    "src": "760:18:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSAuction_$59770",
                      "typeString": "contract INSAuction"
                    }
                  },
                  "id": 61973,
                  "nodeType": "ExpressionStatement",
                  "src": "760:18:92"
                },
                {
                  "expression": {
                    "id": 61976,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61974,
                      "name": "resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61946,
                      "src": "784:8:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61975,
                      "name": "resolver_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61957,
                      "src": "795:9:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "784:20:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 61977,
                  "nodeType": "ExpressionStatement",
                  "src": "784:20:92"
                },
                {
                  "expression": {
                    "id": 61980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61978,
                      "name": "domainPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61952,
                      "src": "810:11:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                        "typeString": "contract INSDomainPrice"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 61979,
                      "name": "domainPrice_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61963,
                      "src": "824:12:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                        "typeString": "contract INSDomainPrice"
                      }
                    },
                    "src": "810:26:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                      "typeString": "contract INSDomainPrice"
                    }
                  },
                  "id": 61981,
                  "nodeType": "ExpressionStatement",
                  "src": "810:26:92"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 61964,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61955,
                  "mutability": "mutable",
                  "name": "rns_",
                  "nameLocation": "663:4:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 61983,
                  "src": "652:15:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_INSUnified_$60340",
                    "typeString": "contract INSUnified"
                  },
                  "typeName": {
                    "id": 61954,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61953,
                      "name": "INSUnified",
                      "nameLocations": [
                        "652:10:92"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60340,
                      "src": "652:10:92"
                    },
                    "referencedDeclaration": 60340,
                    "src": "652:10:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSUnified_$60340",
                      "typeString": "contract INSUnified"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61957,
                  "mutability": "mutable",
                  "name": "resolver_",
                  "nameLocation": "677:9:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 61983,
                  "src": "669:17:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61956,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "669:7:92",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61960,
                  "mutability": "mutable",
                  "name": "auction_",
                  "nameLocation": "699:8:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 61983,
                  "src": "688:19:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_INSAuction_$59770",
                    "typeString": "contract INSAuction"
                  },
                  "typeName": {
                    "id": 61959,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61958,
                      "name": "INSAuction",
                      "nameLocations": [
                        "688:10:92"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 59770,
                      "src": "688:10:92"
                    },
                    "referencedDeclaration": 59770,
                    "src": "688:10:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSAuction_$59770",
                      "typeString": "contract INSAuction"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61963,
                  "mutability": "mutable",
                  "name": "domainPrice_",
                  "nameLocation": "724:12:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 61983,
                  "src": "709:27:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                    "typeString": "contract INSDomainPrice"
                  },
                  "typeName": {
                    "id": 61962,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61961,
                      "name": "INSDomainPrice",
                      "nameLocations": [
                        "709:14:92"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60083,
                      "src": "709:14:92"
                    },
                    "referencedDeclaration": 60083,
                    "src": "709:14:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                      "typeString": "contract INSDomainPrice"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "651:86:92"
            },
            "returnParameters": {
              "id": 61965,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "738:0:92"
            },
            "scope": 62291,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 62034,
            "nodeType": "FunctionDefinition",
            "src": "1153:313:92",
            "nodes": [],
            "body": {
              "id": 62033,
              "nodeType": "Block",
              "src": "1257:209:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 62002,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 61998,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61990,
                            "src": "1271:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          },
                          "id": 61999,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1278:6:92",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1271:13:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 62000,
                            "name": "tos",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61987,
                            "src": "1288:3:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 62001,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1292:6:92",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1288:10:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1271:27:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "524e534f7065726174696f6e3a206c656e677468206d69736d61746368",
                        "id": 62003,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1300:31:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        },
                        "value": "RNSOperation: length mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        }
                      ],
                      "id": 61997,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1263:7:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 62004,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1263:69:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62005,
                  "nodeType": "ExpressionStatement",
                  "src": "1263:69:92"
                },
                {
                  "body": {
                    "id": 62031,
                    "nodeType": "Block",
                    "src": "1379:83:92",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 62019,
                                "name": "LibRNSDomain",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60494,
                                "src": "1396:12:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$60494_$",
                                  "typeString": "type(library LibRNSDomain)"
                                }
                              },
                              "id": 62020,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "1409:6:92",
                              "memberName": "RON_ID",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60457,
                              "src": "1396:19:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 62021,
                                "name": "labels",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61990,
                                "src": "1417:6:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                                  "typeString": "string calldata[] calldata"
                                }
                              },
                              "id": 62023,
                              "indexExpression": {
                                "id": 62022,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 62007,
                                "src": "1424:1:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1417:9:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            {
                              "id": 62024,
                              "name": "resolver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61946,
                              "src": "1428:8:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 62025,
                                "name": "tos",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 61987,
                                "src": "1438:3:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                  "typeString": "address[] calldata"
                                }
                              },
                              "id": 62027,
                              "indexExpression": {
                                "id": 62026,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 62007,
                                "src": "1442:1:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1438:6:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 62028,
                              "name": "duration",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61992,
                              "src": "1446:8:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            ],
                            "expression": {
                              "id": 62016,
                              "name": "rns",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61944,
                              "src": "1387:3:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INSUnified_$60340",
                                "typeString": "contract INSUnified"
                              }
                            },
                            "id": 62018,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1391:4:92",
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 60260,
                            "src": "1387:8:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint64_$returns$_t_uint64_$_t_uint256_$",
                              "typeString": "function (uint256,string memory,address,address,uint64) external returns (uint64,uint256)"
                            }
                          },
                          "id": 62029,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1387:68:92",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint64_$_t_uint256_$",
                            "typeString": "tuple(uint64,uint256)"
                          }
                        },
                        "id": 62030,
                        "nodeType": "ExpressionStatement",
                        "src": "1387:68:92"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 62012,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 62009,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 62007,
                      "src": "1355:1:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 62010,
                        "name": "labels",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61990,
                        "src": "1359:6:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "string calldata[] calldata"
                        }
                      },
                      "id": 62011,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1366:6:92",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1359:13:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1355:17:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 62032,
                  "initializationExpression": {
                    "assignments": [
                      62007
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 62007,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1352:1:92",
                        "nodeType": "VariableDeclaration",
                        "scope": 62032,
                        "src": "1344:9:92",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 62006,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1344:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 62008,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1344:9:92"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 62014,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "1374:3:92",
                      "subExpression": {
                        "id": 62013,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62007,
                        "src": "1376:1:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62015,
                    "nodeType": "ExpressionStatement",
                    "src": "1374:3:92"
                  },
                  "nodeType": "ForStatement",
                  "src": "1339:123:92"
                }
              ]
            },
            "documentation": {
              "id": 61984,
              "nodeType": "StructuredDocumentation",
              "src": "845:305:92",
              "text": " @dev Allows the owner to mint RNS domains in bulk with specified labels and durations.\n @param tos The array of addresses to receive the minted domains.\n @param labels The array of labels for the minted domains.\n @param duration The duration for which the domains will be owned."
            },
            "functionSelector": "38d73f63",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 61995,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 61994,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1247:9:92"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "1247:9:92"
                },
                "nodeType": "ModifierInvocation",
                "src": "1247:9:92"
              }
            ],
            "name": "bulkMint",
            "nameLocation": "1162:8:92",
            "parameters": {
              "id": 61993,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61987,
                  "mutability": "mutable",
                  "name": "tos",
                  "nameLocation": "1190:3:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62034,
                  "src": "1171:22:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61985,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1171:7:92",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 61986,
                    "nodeType": "ArrayTypeName",
                    "src": "1171:9:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61990,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "1213:6:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62034,
                  "src": "1195:24:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61988,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "1195:6:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 61989,
                    "nodeType": "ArrayTypeName",
                    "src": "1195:8:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61992,
                  "mutability": "mutable",
                  "name": "duration",
                  "nameLocation": "1228:8:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62034,
                  "src": "1221:15:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 61991,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1221:6:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1170:67:92"
            },
            "returnParameters": {
              "id": 61996,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1257:0:92"
            },
            "scope": 62291,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 62055,
            "nodeType": "FunctionDefinition",
            "src": "1729:152:92",
            "nodes": [],
            "body": {
              "id": 62054,
              "nodeType": "Block",
              "src": "1820:61:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 62049,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62038,
                            "src": "1853:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          ],
                          "id": 62048,
                          "name": "toIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 62290,
                          "src": "1847:5:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_string_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                            "typeString": "function (string calldata[] calldata) pure returns (uint256[] memory)"
                          }
                        },
                        "id": 62050,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1847:13:92",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 62051,
                        "name": "shouldProtect",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62040,
                        "src": "1862:13:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 62045,
                        "name": "rns",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61944,
                        "src": "1826:3:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_INSUnified_$60340",
                          "typeString": "contract INSUnified"
                        }
                      },
                      "id": 62047,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1830:16:92",
                      "memberName": "bulkSetProtected",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 60339,
                      "src": "1826:20:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (uint256[] memory,bool) external"
                      }
                    },
                    "id": 62052,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1826:50:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62053,
                  "nodeType": "ExpressionStatement",
                  "src": "1826:50:92"
                }
              ]
            },
            "documentation": {
              "id": 62035,
              "nodeType": "StructuredDocumentation",
              "src": "1470:256:92",
              "text": " @dev Allows the owner to set the protection status of multiple RNS domains in bulk.\n @param labels The array of labels for the domains.\n @param shouldProtect A boolean indicating whether to protect or unprotect the specified domains."
            },
            "functionSelector": "5ca03294",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 62043,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 62042,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1810:9:92"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "1810:9:92"
                },
                "nodeType": "ModifierInvocation",
                "src": "1810:9:92"
              }
            ],
            "name": "bulkSetProtected",
            "nameLocation": "1738:16:92",
            "parameters": {
              "id": 62041,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62038,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "1773:6:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62055,
                  "src": "1755:24:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62036,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "1755:6:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 62037,
                    "nodeType": "ArrayTypeName",
                    "src": "1755:8:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62040,
                  "mutability": "mutable",
                  "name": "shouldProtect",
                  "nameLocation": "1786:13:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62055,
                  "src": "1781:18:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 62039,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1781:4:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1754:46:92"
            },
            "returnParameters": {
              "id": 62044,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1820:0:92"
            },
            "scope": 62291,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 62156,
            "nodeType": "FunctionDefinition",
            "src": "2265:641:92",
            "nodes": [],
            "body": {
              "id": 62155,
              "nodeType": "Block",
              "src": "2379:527:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 62072,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 62068,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62059,
                            "src": "2393:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          },
                          "id": 62069,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2400:6:92",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2393:13:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 62070,
                            "name": "yearlyUSDPrices",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62062,
                            "src": "2410:15:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                              "typeString": "uint256[] calldata"
                            }
                          },
                          "id": 62071,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2426:6:92",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2410:22:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2393:39:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "524e534f7065726174696f6e3a206c656e677468206d69736d61746368",
                        "id": 62073,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2434:31:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        },
                        "value": "RNSOperation: length mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        }
                      ],
                      "id": 62067,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2385:7:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 62074,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2385:81:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62075,
                  "nodeType": "ExpressionStatement",
                  "src": "2385:81:92"
                },
                {
                  "assignments": [
                    62080
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 62080,
                      "mutability": "mutable",
                      "name": "lbHashes",
                      "nameLocation": "2490:8:92",
                      "nodeType": "VariableDeclaration",
                      "scope": 62155,
                      "src": "2473:25:92",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                        "typeString": "bytes32[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 62078,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2473:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 62079,
                        "nodeType": "ArrayTypeName",
                        "src": "2473:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 62087,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 62084,
                          "name": "labels",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 62059,
                          "src": "2515:6:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "string calldata[] calldata"
                          }
                        },
                        "id": 62085,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2522:6:92",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "2515:13:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 62083,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "2501:13:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (bytes32[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 62081,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2505:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 62082,
                        "nodeType": "ArrayTypeName",
                        "src": "2505:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      }
                    },
                    "id": 62086,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2501:28:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                      "typeString": "bytes32[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2473:56:92"
                },
                {
                  "body": {
                    "id": 62109,
                    "nodeType": "Block",
                    "src": "2577:62:92",
                    "statements": [
                      {
                        "expression": {
                          "id": 62107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 62098,
                              "name": "lbHashes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62080,
                              "src": "2585:8:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            },
                            "id": 62100,
                            "indexExpression": {
                              "id": 62099,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62089,
                              "src": "2594:1:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2585:11:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 62103,
                                  "name": "labels",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62059,
                                  "src": "2622:6:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                                    "typeString": "string calldata[] calldata"
                                  }
                                },
                                "id": 62105,
                                "indexExpression": {
                                  "id": 62104,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62089,
                                  "src": "2629:1:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2622:9:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              ],
                              "expression": {
                                "id": 62101,
                                "name": "LibRNSDomain",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60494,
                                "src": "2599:12:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$60494_$",
                                  "typeString": "type(library LibRNSDomain)"
                                }
                              },
                              "id": 62102,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2612:9:92",
                              "memberName": "hashLabel",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60483,
                              "src": "2599:22:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (string memory) pure returns (bytes32)"
                              }
                            },
                            "id": 62106,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2599:33:92",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "2585:47:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 62108,
                        "nodeType": "ExpressionStatement",
                        "src": "2585:47:92"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 62094,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 62091,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 62089,
                      "src": "2551:1:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 62092,
                        "name": "lbHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62080,
                        "src": "2555:8:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      "id": 62093,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2564:6:92",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2555:15:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2551:19:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 62110,
                  "initializationExpression": {
                    "assignments": [
                      62089
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 62089,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2548:1:92",
                        "nodeType": "VariableDeclaration",
                        "scope": 62110,
                        "src": "2540:9:92",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 62088,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2540:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 62090,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2540:9:92"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 62096,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "2572:3:92",
                      "subExpression": {
                        "id": 62095,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62089,
                        "src": "2574:1:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62097,
                    "nodeType": "ExpressionStatement",
                    "src": "2572:3:92"
                  },
                  "nodeType": "ForStatement",
                  "src": "2535:104:92"
                },
                {
                  "assignments": [
                    62115
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 62115,
                      "mutability": "mutable",
                      "name": "usdPrices",
                      "nameLocation": "2661:9:92",
                      "nodeType": "VariableDeclaration",
                      "scope": 62155,
                      "src": "2644:26:92",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 62113,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2644:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 62114,
                        "nodeType": "ArrayTypeName",
                        "src": "2644:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 62122,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 62119,
                          "name": "yearlyUSDPrices",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 62062,
                          "src": "2687:15:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                            "typeString": "uint256[] calldata"
                          }
                        },
                        "id": 62120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2703:6:92",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "2687:22:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 62118,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "2673:13:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (uint256[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 62116,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2677:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 62117,
                        "nodeType": "ArrayTypeName",
                        "src": "2677:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      }
                    },
                    "id": 62121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2673:37:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2644:66:92"
                },
                {
                  "body": {
                    "id": 62146,
                    "nodeType": "Block",
                    "src": "2759:80:92",
                    "statements": [
                      {
                        "expression": {
                          "id": 62144,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 62133,
                              "name": "usdPrices",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62115,
                              "src": "2767:9:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 62135,
                            "indexExpression": {
                              "id": 62134,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62124,
                              "src": "2777:1:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2767:12:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 62138,
                                  "name": "yearlyUSDPrices",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62062,
                                  "src": "2794:15:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                    "typeString": "uint256[] calldata"
                                  }
                                },
                                "id": 62140,
                                "indexExpression": {
                                  "id": 62139,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62124,
                                  "src": "2810:1:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2794:18:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "hexValue": "31",
                                "id": 62141,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2814:7:92",
                                "subdenomination": "ether",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                },
                                "value": "1"
                              },
                              {
                                "hexValue": "333635",
                                "id": 62142,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2823:8:92",
                                "subdenomination": "days",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_31536000_by_1",
                                  "typeString": "int_const 31536000"
                                },
                                "value": "365"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                },
                                {
                                  "typeIdentifier": "t_rational_31536000_by_1",
                                  "typeString": "int_const 31536000"
                                }
                              ],
                              "expression": {
                                "id": 62136,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 50793,
                                "src": "2782:4:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$50793_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 62137,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2787:6:92",
                              "memberName": "mulDiv",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 50141,
                              "src": "2782:11:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 62143,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2782:50:92",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2767:65:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 62145,
                        "nodeType": "ExpressionStatement",
                        "src": "2767:65:92"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 62129,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 62126,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 62124,
                      "src": "2732:1:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 62127,
                        "name": "usdPrices",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62115,
                        "src": "2736:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      "id": 62128,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2746:6:92",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2736:16:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2732:20:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 62147,
                  "initializationExpression": {
                    "assignments": [
                      62124
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 62124,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2729:1:92",
                        "nodeType": "VariableDeclaration",
                        "scope": 62147,
                        "src": "2721:9:92",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 62123,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2721:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 62125,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2721:9:92"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 62131,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "2754:3:92",
                      "subExpression": {
                        "id": 62130,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62124,
                        "src": "2756:1:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62132,
                    "nodeType": "ExpressionStatement",
                    "src": "2754:3:92"
                  },
                  "nodeType": "ForStatement",
                  "src": "2716:123:92"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 62151,
                        "name": "lbHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62080,
                        "src": "2881:8:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      {
                        "id": 62152,
                        "name": "usdPrices",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62115,
                        "src": "2891:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      ],
                      "expression": {
                        "id": 62148,
                        "name": "domainPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61952,
                        "src": "2845:11:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                          "typeString": "contract INSDomainPrice"
                        }
                      },
                      "id": 62150,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2857:23:92",
                      "memberName": "bulkOverrideRenewalFees",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 59997,
                      "src": "2845:35:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (bytes32[] memory,uint256[] memory) external"
                      }
                    },
                    "id": 62153,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2845:56:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62154,
                  "nodeType": "ExpressionStatement",
                  "src": "2845:56:92"
                }
              ]
            },
            "documentation": {
              "id": 62056,
              "nodeType": "StructuredDocumentation",
              "src": "1885:377:92",
              "text": " @dev Allows the owner to bulk override the renewal fees for specified RNS domains.\n @param labels The array of labels for the RNS domains.\n @param yearlyUSDPrices The array of yearly renewal fees in USD (no decimals) for the corresponding RNS domains.\n @dev The `yearlyUSDPrices` array should represent the yearly renewal fees in USD for each domain."
            },
            "functionSelector": "4c5e4e81",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 62065,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 62064,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2369:9:92"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "2369:9:92"
                },
                "nodeType": "ModifierInvocation",
                "src": "2369:9:92"
              }
            ],
            "name": "bulkOverrideRenewalFees",
            "nameLocation": "2274:23:92",
            "parameters": {
              "id": 62063,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62059,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "2316:6:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62156,
                  "src": "2298:24:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62057,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "2298:6:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 62058,
                    "nodeType": "ArrayTypeName",
                    "src": "2298:8:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62062,
                  "mutability": "mutable",
                  "name": "yearlyUSDPrices",
                  "nameLocation": "2343:15:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62156,
                  "src": "2324:34:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62060,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2324:7:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62061,
                    "nodeType": "ArrayTypeName",
                    "src": "2324:9:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2297:62:92"
            },
            "returnParameters": {
              "id": 62066,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2379:0:92"
            },
            "scope": 62291,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 62220,
            "nodeType": "FunctionDefinition",
            "src": "3207:405:92",
            "nodes": [],
            "body": {
              "id": 62219,
              "nodeType": "Block",
              "src": "3305:307:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 62173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 62169,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62160,
                            "src": "3319:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          },
                          "id": 62170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3326:6:92",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3319:13:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 62171,
                            "name": "tiers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62163,
                            "src": "3336:5:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                              "typeString": "uint256[] calldata"
                            }
                          },
                          "id": 62172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3342:6:92",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3336:12:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3319:29:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "524e534f7065726174696f6e3a206c656e677468206d69736d61746368",
                        "id": 62174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3350:31:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        },
                        "value": "RNSOperation: length mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        }
                      ],
                      "id": 62168,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3311:7:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 62175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3311:71:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62176,
                  "nodeType": "ExpressionStatement",
                  "src": "3311:71:92"
                },
                {
                  "assignments": [
                    62181
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 62181,
                      "mutability": "mutable",
                      "name": "lbHashes",
                      "nameLocation": "3406:8:92",
                      "nodeType": "VariableDeclaration",
                      "scope": 62219,
                      "src": "3389:25:92",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                        "typeString": "bytes32[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 62179,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3389:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 62180,
                        "nodeType": "ArrayTypeName",
                        "src": "3389:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 62188,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 62185,
                          "name": "labels",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 62160,
                          "src": "3431:6:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "string calldata[] calldata"
                          }
                        },
                        "id": 62186,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3438:6:92",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "3431:13:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 62184,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "3417:13:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (bytes32[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 62182,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3421:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 62183,
                        "nodeType": "ArrayTypeName",
                        "src": "3421:9:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      }
                    },
                    "id": 62187,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3417:28:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                      "typeString": "bytes32[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3389:56:92"
                },
                {
                  "body": {
                    "id": 62210,
                    "nodeType": "Block",
                    "src": "3493:62:92",
                    "statements": [
                      {
                        "expression": {
                          "id": 62208,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 62199,
                              "name": "lbHashes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62181,
                              "src": "3501:8:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            },
                            "id": 62201,
                            "indexExpression": {
                              "id": 62200,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62190,
                              "src": "3510:1:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3501:11:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 62204,
                                  "name": "labels",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62160,
                                  "src": "3538:6:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                                    "typeString": "string calldata[] calldata"
                                  }
                                },
                                "id": 62206,
                                "indexExpression": {
                                  "id": 62205,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62190,
                                  "src": "3545:1:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3538:9:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              ],
                              "expression": {
                                "id": 62202,
                                "name": "LibRNSDomain",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60494,
                                "src": "3515:12:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$60494_$",
                                  "typeString": "type(library LibRNSDomain)"
                                }
                              },
                              "id": 62203,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3528:9:92",
                              "memberName": "hashLabel",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60483,
                              "src": "3515:22:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (string memory) pure returns (bytes32)"
                              }
                            },
                            "id": 62207,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3515:33:92",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "3501:47:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 62209,
                        "nodeType": "ExpressionStatement",
                        "src": "3501:47:92"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 62195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 62192,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 62190,
                      "src": "3467:1:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 62193,
                        "name": "lbHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62181,
                        "src": "3471:8:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      "id": 62194,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3480:6:92",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3471:15:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3467:19:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 62211,
                  "initializationExpression": {
                    "assignments": [
                      62190
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 62190,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3464:1:92",
                        "nodeType": "VariableDeclaration",
                        "scope": 62211,
                        "src": "3456:9:92",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 62189,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3456:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 62191,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3456:9:92"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 62197,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "3488:3:92",
                      "subExpression": {
                        "id": 62196,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62190,
                        "src": "3490:1:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62198,
                    "nodeType": "ExpressionStatement",
                    "src": "3488:3:92"
                  },
                  "nodeType": "ForStatement",
                  "src": "3451:104:92"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 62215,
                        "name": "lbHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62181,
                        "src": "3591:8:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      {
                        "id": 62216,
                        "name": "tiers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62163,
                        "src": "3601:5:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      ],
                      "expression": {
                        "id": 62212,
                        "name": "domainPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61952,
                        "src": "3561:11:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_INSDomainPrice_$60083",
                          "typeString": "contract INSDomainPrice"
                        }
                      },
                      "id": 62214,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3573:17:92",
                      "memberName": "bulkOverrideTiers",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 60007,
                      "src": "3561:29:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (bytes32[] memory,uint256[] memory) external"
                      }
                    },
                    "id": 62217,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3561:46:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62218,
                  "nodeType": "ExpressionStatement",
                  "src": "3561:46:92"
                }
              ]
            },
            "documentation": {
              "id": 62157,
              "nodeType": "StructuredDocumentation",
              "src": "2910:294:92",
              "text": " @dev Allows the owner to bulk override the tiers for specified RNS domains.\n @param labels The array of labels for the RNS domains.\n @param tiers The array of tiers for the corresponding RNS domains.\n @dev The `tiers` array should represent the tiers for each domain."
            },
            "functionSelector": "019a87dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 62166,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 62165,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "3295:9:92"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "3295:9:92"
                },
                "nodeType": "ModifierInvocation",
                "src": "3295:9:92"
              }
            ],
            "name": "bulkOverrideTiers",
            "nameLocation": "3216:17:92",
            "parameters": {
              "id": 62164,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62160,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "3252:6:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62220,
                  "src": "3234:24:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62158,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "3234:6:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 62159,
                    "nodeType": "ArrayTypeName",
                    "src": "3234:8:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62163,
                  "mutability": "mutable",
                  "name": "tiers",
                  "nameLocation": "3279:5:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62220,
                  "src": "3260:24:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62161,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3260:7:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62162,
                    "nodeType": "ArrayTypeName",
                    "src": "3260:9:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3233:52:92"
            },
            "returnParameters": {
              "id": 62167,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3305:0:92"
            },
            "scope": 62291,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 62245,
            "nodeType": "FunctionDefinition",
            "src": "4009:193:92",
            "nodes": [],
            "body": {
              "id": 62244,
              "nodeType": "Block",
              "src": "4127:75:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 62237,
                        "name": "tos",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62224,
                        "src": "4164:3:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 62239,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62227,
                            "src": "4175:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          ],
                          "id": 62238,
                          "name": "toIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 62290,
                          "src": "4169:5:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_string_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                            "typeString": "function (string calldata[] calldata) pure returns (uint256[] memory)"
                          }
                        },
                        "id": 62240,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4169:13:92",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 62241,
                        "name": "allowFailure",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62229,
                        "src": "4184:12:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 62234,
                        "name": "auction",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61949,
                        "src": "4133:7:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_INSAuction_$59770",
                          "typeString": "contract INSAuction"
                        }
                      },
                      "id": 62236,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4141:22:92",
                      "memberName": "bulkClaimUnbiddedNames",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 59672,
                      "src": "4133:30:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bool_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                        "typeString": "function (address[] memory,uint256[] memory,bool) external returns (bool[] memory)"
                      }
                    },
                    "id": 62242,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4133:64:92",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "id": 62243,
                  "nodeType": "ExpressionStatement",
                  "src": "4133:64:92"
                }
              ]
            },
            "documentation": {
              "id": 62221,
              "nodeType": "StructuredDocumentation",
              "src": "3616:390:92",
              "text": " @dev Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.\n @param tos The array of addresses to which the unbidded domains will be transferred.\n @param labels The array of labels for the unbidded domains to be reclaimed.\n @param allowFailure Flag to indicate whether to allow failure if a domain is already being bid on."
            },
            "functionSelector": "19edebf2",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 62232,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 62231,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "4117:9:92"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "4117:9:92"
                },
                "nodeType": "ModifierInvocation",
                "src": "4117:9:92"
              }
            ],
            "name": "reclaimUnbiddedNames",
            "nameLocation": "4018:20:92",
            "parameters": {
              "id": 62230,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62224,
                  "mutability": "mutable",
                  "name": "tos",
                  "nameLocation": "4058:3:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62245,
                  "src": "4039:22:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62222,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4039:7:92",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 62223,
                    "nodeType": "ArrayTypeName",
                    "src": "4039:9:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62227,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "4081:6:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62245,
                  "src": "4063:24:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62225,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "4063:6:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 62226,
                    "nodeType": "ArrayTypeName",
                    "src": "4063:8:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 62229,
                  "mutability": "mutable",
                  "name": "allowFailure",
                  "nameLocation": "4094:12:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62245,
                  "src": "4089:17:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 62228,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4089:4:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4038:69:92"
            },
            "returnParameters": {
              "id": 62233,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4127:0:92"
            },
            "scope": 62291,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 62290,
            "nodeType": "FunctionDefinition",
            "src": "4410:248:92",
            "nodes": [],
            "body": {
              "id": 62289,
              "nodeType": "Block",
              "src": "4494:164:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 62262,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 62255,
                      "name": "ids",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 62253,
                      "src": "4500:3:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 62259,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62249,
                            "src": "4520:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          },
                          "id": 62260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4527:6:92",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "4520:13:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 62258,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "4506:13:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (uint256[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 62256,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "4510:7:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 62257,
                          "nodeType": "ArrayTypeName",
                          "src": "4510:9:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        }
                      },
                      "id": 62261,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4506:28:92",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "src": "4500:34:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "id": 62263,
                  "nodeType": "ExpressionStatement",
                  "src": "4500:34:92"
                },
                {
                  "body": {
                    "id": 62287,
                    "nodeType": "Block",
                    "src": "4581:73:92",
                    "statements": [
                      {
                        "expression": {
                          "id": 62285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 62274,
                              "name": "ids",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62253,
                              "src": "4589:3:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 62276,
                            "indexExpression": {
                              "id": 62275,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62265,
                              "src": "4593:1:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4589:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 62279,
                                  "name": "LibRNSDomain",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60494,
                                  "src": "4616:12:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$60494_$",
                                    "typeString": "type(library LibRNSDomain)"
                                  }
                                },
                                "id": 62280,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4629:6:92",
                                "memberName": "RON_ID",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 60457,
                                "src": "4616:19:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 62281,
                                  "name": "labels",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62249,
                                  "src": "4637:6:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                                    "typeString": "string calldata[] calldata"
                                  }
                                },
                                "id": 62283,
                                "indexExpression": {
                                  "id": 62282,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 62265,
                                  "src": "4644:1:92",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4637:9:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              ],
                              "expression": {
                                "id": 62277,
                                "name": "LibRNSDomain",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60494,
                                "src": "4598:12:92",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$60494_$",
                                  "typeString": "type(library LibRNSDomain)"
                                }
                              },
                              "id": 62278,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4611:4:92",
                              "memberName": "toId",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60473,
                              "src": "4598:17:92",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                                "typeString": "function (uint256,string memory) pure returns (uint256)"
                              }
                            },
                            "id": 62284,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4598:49:92",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4589:58:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 62286,
                        "nodeType": "ExpressionStatement",
                        "src": "4589:58:92"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 62270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 62267,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 62265,
                      "src": "4557:1:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 62268,
                        "name": "labels",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62249,
                        "src": "4561:6:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "string calldata[] calldata"
                        }
                      },
                      "id": 62269,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4568:6:92",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "4561:13:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4557:17:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 62288,
                  "initializationExpression": {
                    "assignments": [
                      62265
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 62265,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "4554:1:92",
                        "nodeType": "VariableDeclaration",
                        "scope": 62288,
                        "src": "4546:9:92",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 62264,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4546:7:92",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 62266,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "4546:9:92"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 62272,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "4576:3:92",
                      "subExpression": {
                        "id": 62271,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62265,
                        "src": "4578:1:92",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62273,
                    "nodeType": "ExpressionStatement",
                    "src": "4576:3:92"
                  },
                  "nodeType": "ForStatement",
                  "src": "4541:113:92"
                }
              ]
            },
            "documentation": {
              "id": 62246,
              "nodeType": "StructuredDocumentation",
              "src": "4206:201:92",
              "text": " @dev Converts an array of labels to an array of corresponding RNS domain IDs.\n @param labels The array of labels to be converted to IDs.\n @return ids The array of RNS domain IDs."
            },
            "functionSelector": "71e8704d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toIds",
            "nameLocation": "4419:5:92",
            "parameters": {
              "id": 62250,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62249,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "4443:6:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62290,
                  "src": "4425:24:92",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62247,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "4425:6:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 62248,
                    "nodeType": "ArrayTypeName",
                    "src": "4425:8:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4424:26:92"
            },
            "returnParameters": {
              "id": 62254,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62253,
                  "mutability": "mutable",
                  "name": "ids",
                  "nameLocation": "4489:3:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 62290,
                  "src": "4472:20:92",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 62251,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4472:7:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 62252,
                    "nodeType": "ArrayTypeName",
                    "src": "4472:9:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4471:22:92"
            },
            "scope": 62291,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 61940,
              "name": "Ownable",
              "nameLocations": [
                "469:7:92"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46487,
              "src": "469:7:92"
            },
            "id": 61941,
            "nodeType": "InheritanceSpecifier",
            "src": "469:7:92"
          }
        ],
        "canonicalName": "RNSOperation",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          62291,
          46487,
          49552
        ],
        "name": "RNSOperation",
        "nameLocation": "453:12:92",
        "scope": 62292,
        "usedErrors": [],
        "usedEvents": [
          46388
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24932278,
  "bytecode": "",
  "chainId": 2021,
  "contractAbsolutePath": "RNSOperation.sol",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80635ca032941161008c57806371e8704d1161006657806371e8704d146101cf5780637d9f6db5146101ef5780638da5cb5b14610216578063f2fde38b1461022757600080fd5b80635ca032941461018d578063663b44c5146101a0578063715018a6146101c757600080fd5b8063019a87dd146100d457806304f3bcec146100e957806319edebf21461012d57806338d73f63146101405780634c5e4e81146101535780635c97404a14610166575b600080fd5b6100e76100e2366004610c0e565b61023a565b005b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e761013b366004610c87565b6103d4565b6100e761014e366004610d1f565b610486565b6100e7610161366004610c0e565b6105eb565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6100e761019b366004610d94565b6107de565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6100e7610874565b6101e26101dd366004610dea565b610888565b6040516101249190610e66565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610110565b6100e7610235366004610e95565b61098f565b610242610a08565b82811461026a5760405162461bcd60e51b815260040161026190610eb0565b60405180910390fd5b6000836001600160401b0381111561028457610284610ee7565b6040519080825280602002602001820160405280156102ad578160200160208202803683370190505b50905060005b815181101561034a5761031d8686838181106102d1576102d1610efd565b90506020028101906102e39190610f13565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a6292505050565b82828151811061032f5761032f610efd565b602090810291909101015261034381610f59565b90506102b3565b5060405163cff8372f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cff8372f9061039b90849087908790600401610f80565b600060405180830381600087803b1580156103b557600080fd5b505af11580156103c9573d6000803e3d6000fd5b505050505050505050565b6103dc610a08565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a3823f86866104178787610888565b856040518563ffffffff1660e01b81526004016104379493929190610fca565b6000604051808303816000875af1158015610456573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047e919081019061103e565b505050505050565b61048e610a08565b8184146104ad5760405162461bcd60e51b815260040161026190610eb0565b60005b8281101561047e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630570891f7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d68886868581811061051a5761051a610efd565b905060200281019061052c9190610f13565b7f00000000000000000000000000000000000000000000000000000000000000008b8b8881811061055f5761055f610efd565b90506020020160208101906105749190610e95565b886040518763ffffffff1660e01b815260040161059696959493929190611102565b60408051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d8919061115e565b5050806105e490610f59565b90506104b0565b6105f3610a08565b8281146106125760405162461bcd60e51b815260040161026190610eb0565b6000836001600160401b0381111561062c5761062c610ee7565b604051908082528060200260200182016040528015610655578160200160208202803683370190505b50905060005b81518110156106a6576106798686838181106102d1576102d1610efd565b82828151811061068b5761068b610efd565b602090810291909101015261069f81610f59565b905061065b565b506000826001600160401b038111156106c1576106c1610ee7565b6040519080825280602002602001820160405280156106ea578160200160208202803683370190505b50905060005b81518110156107555761072885858381811061070e5761070e610efd565b90506020020135670de0b6b3a76400006301e13380610a6d565b82828151811061073a5761073a610efd565b602090810291909101015261074e81610f59565b90506106f0565b5060405163dd28776d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dd28776d906107a4908590859060040161118c565b600060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b50505050505050505050565b6107e6610a08565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ec63b01f61081f8585610888565b836040518363ffffffff1660e01b815260040161083d9291906111ba565b600060405180830381600087803b15801561085757600080fd5b505af115801561086b573d6000803e3d6000fd5b50505050505050565b61087c610a08565b6108866000610b5d565b565b6060816001600160401b038111156108a2576108a2610ee7565b6040519080825280602002602001820160405280156108cb578160200160208202803683370190505b50905060005b828110156109885761095b7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d68885858481811061090f5761090f610efd565b90506020028101906109219190610f13565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610bad92505050565b82828151811061096d5761096d610efd565b602090810291909101015261098181610f59565b90506108d1565b5092915050565b610997610a08565b6001600160a01b0381166109fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610261565b610a0581610b5d565b50565b6000546001600160a01b031633146108865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610261565b805160209091012090565b6000808060001985870985870292508281108382030391505080600003610aa757838281610a9d57610a9d6111de565b0492505050610b56565b808411610aee5760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610261565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000918252805160209182012090526040902090565b60008083601f840112610bd557600080fd5b5081356001600160401b03811115610bec57600080fd5b6020830191508360208260051b8501011115610c0757600080fd5b9250929050565b60008060008060408587031215610c2457600080fd5b84356001600160401b0380821115610c3b57600080fd5b610c4788838901610bc3565b90965094506020870135915080821115610c6057600080fd5b50610c6d87828801610bc3565b95989497509550505050565b8015158114610a0557600080fd5b600080600080600060608688031215610c9f57600080fd5b85356001600160401b0380821115610cb657600080fd5b610cc289838a01610bc3565b90975095506020880135915080821115610cdb57600080fd5b50610ce888828901610bc3565b9094509250506040860135610cfc81610c79565b809150509295509295909350565b6001600160401b0381168114610a0557600080fd5b600080600080600060608688031215610d3757600080fd5b85356001600160401b0380821115610d4e57600080fd5b610d5a89838a01610bc3565b90975095506020880135915080821115610d7357600080fd5b50610d8088828901610bc3565b9094509250506040860135610cfc81610d0a565b600080600060408486031215610da957600080fd5b83356001600160401b03811115610dbf57600080fd5b610dcb86828701610bc3565b9094509250506020840135610ddf81610c79565b809150509250925092565b60008060208385031215610dfd57600080fd5b82356001600160401b03811115610e1357600080fd5b610e1f85828601610bc3565b90969095509350505050565b600081518084526020808501945080840160005b83811015610e5b57815187529582019590820190600101610e3f565b509495945050505050565b602081526000610b566020830184610e2b565b80356001600160a01b0381168114610e9057600080fd5b919050565b600060208284031215610ea757600080fd5b610b5682610e79565b6020808252601d908201527f524e534f7065726174696f6e3a206c656e677468206d69736d61746368000000604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610f2a57600080fd5b8301803591506001600160401b03821115610f4457600080fd5b602001915036819003821315610c0757600080fd5b600060018201610f7957634e487b7160e01b600052601160045260246000fd5b5060010190565b604081526000610f936040830186610e2b565b82810360208401528381526001600160fb1b03841115610fb257600080fd5b8360051b808660208401370160200195945050505050565b6060808252810184905260008560808301825b8781101561100b576001600160a01b03610ff684610e79565b16825260209283019290910190600101610fdd565b50838103602085015261101e8187610e2b565b92505050821515604083015295945050505050565b8051610e9081610c79565b6000602080838503121561105157600080fd5b82516001600160401b038082111561106857600080fd5b818501915085601f83011261107c57600080fd5b81518181111561108e5761108e610ee7565b8060051b604051601f19603f830116810181811085821117156110b3576110b3610ee7565b6040529182528482019250838101850191888311156110d157600080fd5b938501935b828510156110f6576110e785611033565b845293850193928501926110d6565b98975050505050505050565b86815260a060208201528460a0820152848660c0830137600060c08683018101919091526001600160a01b0394851660408301529290931660608401526001600160401b03166080830152601f909201601f1916010192915050565b6000806040838503121561117157600080fd5b825161117c81610d0a565b6020939093015192949293505050565b60408152600061119f6040830185610e2b565b82810360208401526111b18185610e2b565b95945050505050565b6040815260006111cd6040830185610e2b565b905082151560208301529392505050565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220e75fce191e0239019d563ff07f621b97b928d249515b038941453dab790a7c8464736f6c63430008150033",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "bulkMint(address[],string[],uint64)": {
        "details": "Allows the owner to mint RNS domains in bulk with specified labels and durations.",
        "params": {
          "duration": "The duration for which the domains will be owned.",
          "labels": "The array of labels for the minted domains.",
          "tos": "The array of addresses to receive the minted domains."
        }
      },
      "bulkOverrideRenewalFees(string[],uint256[])": {
        "details": "Allows the owner to bulk override the renewal fees for specified RNS domains.The `yearlyUSDPrices` array should represent the yearly renewal fees in USD for each domain.",
        "params": {
          "labels": "The array of labels for the RNS domains.",
          "yearlyUSDPrices": "The array of yearly renewal fees in USD (no decimals) for the corresponding RNS domains."
        }
      },
      "bulkOverrideTiers(string[],uint256[])": {
        "details": "Allows the owner to bulk override the tiers for specified RNS domains.The `tiers` array should represent the tiers for each domain.",
        "params": {
          "labels": "The array of labels for the RNS domains.",
          "tiers": "The array of tiers for the corresponding RNS domains."
        }
      },
      "bulkSetProtected(string[],bool)": {
        "details": "Allows the owner to set the protection status of multiple RNS domains in bulk.",
        "params": {
          "labels": "The array of labels for the domains.",
          "shouldProtect": "A boolean indicating whether to protect or unprotect the specified domains."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reclaimUnbiddedNames(address[],string[],bool)": {
        "details": "Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.",
        "params": {
          "allowFailure": "Flag to indicate whether to allow failure if a domain is already being bid on.",
          "labels": "The array of labels for the unbidded domains to be reclaimed.",
          "tos": "The array of addresses to which the unbidded domains will be transferred."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "toIds(string[])": {
        "details": "Converts an array of labels to an array of corresponding RNS domain IDs.",
        "params": {
          "labels": "The array of labels to be converted to IDs."
        },
        "returns": {
          "ids": "The array of RNS domain IDs."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INSUnified\",\"name\":\"rns_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver_\",\"type\":\"address\"},{\"internalType\":\"contract INSAuction\",\"name\":\"auction_\",\"type\":\"address\"},{\"internalType\":\"contract INSDomainPrice\",\"name\":\"domainPrice_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"contract INSAuction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"bulkMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yearlyUSDPrices\",\"type\":\"uint256[]\"}],\"name\":\"bulkOverrideRenewalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tiers\",\"type\":\"uint256[]\"}],\"name\":\"bulkOverrideTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"shouldProtect\",\"type\":\"bool\"}],\"name\":\"bulkSetProtected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainPrice\",\"outputs\":[{\"internalType\":\"contract INSDomainPrice\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"}],\"name\":\"reclaimUnbiddedNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rns\",\"outputs\":[{\"internalType\":\"contract INSUnified\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"}],\"name\":\"toIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkMint(address[],string[],uint64)\":{\"details\":\"Allows the owner to mint RNS domains in bulk with specified labels and durations.\",\"params\":{\"duration\":\"The duration for which the domains will be owned.\",\"labels\":\"The array of labels for the minted domains.\",\"tos\":\"The array of addresses to receive the minted domains.\"}},\"bulkOverrideRenewalFees(string[],uint256[])\":{\"details\":\"Allows the owner to bulk override the renewal fees for specified RNS domains.The `yearlyUSDPrices` array should represent the yearly renewal fees in USD for each domain.\",\"params\":{\"labels\":\"The array of labels for the RNS domains.\",\"yearlyUSDPrices\":\"The array of yearly renewal fees in USD (no decimals) for the corresponding RNS domains.\"}},\"bulkOverrideTiers(string[],uint256[])\":{\"details\":\"Allows the owner to bulk override the tiers for specified RNS domains.The `tiers` array should represent the tiers for each domain.\",\"params\":{\"labels\":\"The array of labels for the RNS domains.\",\"tiers\":\"The array of tiers for the corresponding RNS domains.\"}},\"bulkSetProtected(string[],bool)\":{\"details\":\"Allows the owner to set the protection status of multiple RNS domains in bulk.\",\"params\":{\"labels\":\"The array of labels for the domains.\",\"shouldProtect\":\"A boolean indicating whether to protect or unprotect the specified domains.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reclaimUnbiddedNames(address[],string[],bool)\":{\"details\":\"Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.\",\"params\":{\"allowFailure\":\"Flag to indicate whether to allow failure if a domain is already being bid on.\",\"labels\":\"The array of labels for the unbidded domains to be reclaimed.\",\"tos\":\"The array of addresses to which the unbidded domains will be transferred.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"toIds(string[])\":{\"details\":\"Converts an array of labels to an array of corresponding RNS domain IDs.\",\"params\":{\"labels\":\"The array of labels to be converted to IDs.\"},\"returns\":{\"ids\":\"The array of RNS domain IDs.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/RNSOperation.sol\":\"RNSOperation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/=lib/pyth-sdk-solidity/\",\":@rns-contracts/=src/\",\":buffer/=lib/buffer/contracts/\",\":contract-libs/=lib/contract-libs/src/\",\":contract-template/=lib/contract-template/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"lib/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"},\"src/interfaces/INSAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { INSUnified } from \\\"./INSUnified.sol\\\";\\nimport { EventRange } from \\\"../libraries/LibEventRange.sol\\\";\\n\\ninterface INSAuction {\\n  error NotYetEnded();\\n  error NoOneBidded();\\n  error NullAssignment();\\n  error AlreadyBidding(uint256 id);\\n  error RatioIsTooLarge();\\n  error NameNotReserved();\\n  error InvalidEventRange();\\n  error QueryIsNotInPeriod();\\n  error InsufficientAmount();\\n  error InvalidArrayLength();\\n  error ContractBidderIsForbidden();\\n  error EventIsNotCreatedOrAlreadyStarted();\\n\\n  struct Bid {\\n    address payable bidder;\\n    uint256 price;\\n    uint256 timestamp;\\n    uint256 claimedAt;\\n  }\\n\\n  struct DomainAuction {\\n    bytes32 auctionId;\\n    uint256 startingPrice;\\n    Bid bid;\\n  }\\n\\n  /// @dev Emitted when an auction is set.\\n  event AuctionEventSet(bytes32 indexed auctionId, EventRange range);\\n  /// @dev Emitted when the labels are listed for auction.\\n  event LabelsListed(bytes32 indexed auctionId, uint256[] ids, uint256[] startingPrices);\\n  /// @dev Emitted when a bid is placed for a name.\\n  event BidPlaced(\\n    bytes32 indexed auctionId,\\n    uint256 indexed id,\\n    uint256 price,\\n    address payable bidder,\\n    uint256 previousPrice,\\n    address previousBidder\\n  );\\n  /// @dev Emitted when the treasury is updated.\\n  event TreasuryUpdated(address indexed addr);\\n  /// @dev Emitted when bid gap ratio is updated.\\n  event BidGapRatioUpdated(uint256 ratio);\\n\\n  /**\\n   * @dev The maximum expiry duration\\n   */\\n  function MAX_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev The maximum expiry duration of a domain after transferring to bidder.\\n   */\\n  function MAX_AUCTION_DOMAIN_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev Returns the operator role.\\n   */\\n  function OPERATOR_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\\n   */\\n  function MAX_PERCENTAGE() external pure returns (uint256);\\n\\n  /**\\n   * @dev The expiry duration of a domain after transferring to bidder.\\n   */\\n  function DOMAIN_EXPIRY_DURATION() external pure returns (uint64);\\n\\n  /**\\n   * @dev Claims domain names for auction.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   *\\n   * @param labels The domain names. Eg, ['foo'] for 'foo.ron'\\n   * @return ids The id corresponding for namehash of domain names.\\n   */\\n  function bulkRegister(string[] calldata labels) external returns (uint256[] memory ids);\\n\\n  /**\\n   * @dev Checks whether a domain name is currently reserved for auction or not.\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function reserved(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @dev Claim unbidded names and transfer them to the specified addresses.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   *\\n   * @param tos The array of addresses to transfer domain names to.\\n   * @param ids The id corresponding for namehash of domain names.\\n   * @param allowFailure Flag to indicate whether to allow failure if a domain is already being bid on.\\n   * @return claimeds An array indicating whether each domain name was successfully claimed.\\n   */\\n  function bulkClaimUnbiddedNames(address[] calldata tos, uint256[] calldata ids, bool allowFailure)\\n    external\\n    returns (bool[] memory claimeds);\\n\\n  /**\\n   * @dev Creates a new auction to sale with a specific time period.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin.\\n   *\\n   * Emits an event {AuctionEventSet}.\\n   *\\n   * @return auctionId The auction id\\n   * @notice Please use the method `setAuctionNames` to list all the reserved names.\\n   */\\n  function createAuctionEvent(EventRange calldata range) external returns (bytes32 auctionId);\\n\\n  /**\\n   * @dev Updates the auction details.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin.\\n   *\\n   * Emits an event {AuctionEventSet}.\\n   */\\n  function setAuctionEvent(bytes32 auctionId, EventRange calldata range) external;\\n\\n  /**\\n   * @dev Returns the event range of an auction.\\n   */\\n  function getAuctionEvent(bytes32 auctionId) external view returns (EventRange memory);\\n\\n  /**\\n   * @dev Lists reserved names to sale in a specified auction.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   * - Array length are matched and larger than 0.\\n   * - Only allow to set when the domain is:\\n   *   + Not in any auction.\\n   *   + Or, in the current auction.\\n   *   + Or, this name is not bided.\\n   *\\n   * Emits an event {LabelsListed}.\\n   *\\n   * Note: If the name is already listed, this method replaces with a new input value.\\n   *\\n   * @param ids The namehashes id of domain names. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function listNamesForAuction(bytes32 auctionId, uint256[] calldata ids, uint256[] calldata startingPrices) external;\\n\\n  /**\\n   * @dev Places a bid for a domain name.\\n   *\\n   * Requirements:\\n   * - The name is listed, or the auction is happening.\\n   * - The msg.value is larger than the current bid price or the auction starting price.\\n   *\\n   * Emits an event {BidPlaced}.\\n   *\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function placeBid(uint256 id) external payable;\\n\\n  /**\\n   * @dev Returns the highest bid and address of the bidder.\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function getAuction(uint256 id) external view returns (DomainAuction memory, uint256 beatPrice);\\n\\n  /**\\n   * @dev Bulk claims the bid name.\\n   *\\n   * Requirements:\\n   * - Must be called after ended time.\\n   * - The method caller can be anyone.\\n   *\\n   * @param ids The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function bulkClaimBidNames(uint256[] calldata ids) external returns (uint256[] memory claimedAts);\\n\\n  /**\\n   * @dev Returns the treasury.\\n   */\\n  function getTreasury() external view returns (address);\\n\\n  /**\\n   * @dev Returns the gap ratio between 2 bids with the starting price. Value in range [0;100_00] is 0%-100%.\\n   */\\n  function getBidGapRatio() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the treasury.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin\\n   *\\n   * Emits an event {TreasuryUpdated}.\\n   */\\n  function setTreasury(address payable) external;\\n\\n  /**\\n   * @dev Sets commission ratio. Value in range [0;100_00] is 0%-100%.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin\\n   *\\n   * Emits an event {BidGapRatioUpdated}.\\n   */\\n  function setBidGapRatio(uint256) external;\\n\\n  /**\\n   * @dev Returns RNSUnified contract.\\n   */\\n  function getRNSUnified() external view returns (INSUnified);\\n}\\n\",\"keccak256\":\"0x406d5d682af4652b6c9c26948a4d4e31b6b88c056177973bb5f7d32141ae658c\",\"license\":\"MIT\"},\"src/interfaces/INSDomainPrice.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PeriodScaler } from \\\"../libraries/math/PeriodScalingUtils.sol\\\";\\nimport { IPyth } from \\\"@pythnetwork/IPyth.sol\\\";\\n\\ninterface INSDomainPrice {\\n  error InvalidArrayLength();\\n  error RenewalFeeIsNotOverriden();\\n  error TierIsNotOverriden();\\n  error ExceedAuctionDomainExpiry();\\n\\n  /// @dev The tier of a domain.\\n  enum Tier {\\n    Unknown,\\n    Tier1,\\n    Tier2,\\n    Tier3\\n  }\\n\\n  struct RenewalFee {\\n    uint256 labelLength;\\n    uint256 fee;\\n  }\\n\\n  struct UnitPrice {\\n    uint256 usd;\\n    uint256 ron;\\n  }\\n\\n  /// @dev Emitted when the renewal reservation ratio is updated.\\n  event TaxRatioUpdated(address indexed operator, uint256 indexed ratio);\\n  /// @dev Emitted when the maximum length of renewal fee is updated.\\n  event MaxRenewalFeeLengthUpdated(address indexed operator, uint256 indexed maxLength);\\n  /// @dev Emitted when the renew fee is updated.\\n  event RenewalFeeByLengthUpdated(address indexed operator, uint256 indexed labelLength, uint256 renewalFee);\\n  /// @dev Emitted when the renew fee of a domain is overridden. Value of `inverseRenewalFee` is 0 when not overridden.\\n  event RenewalFeeOverridingUpdated(address indexed operator, bytes32 indexed labelHash, uint256 inverseRenewalFee);\\n  /// @dev Emitted when the tier of a domain is overridden.\\n  event TierOverridingUpdated(address indexed operator, bytes32 indexed labelHash, uint256 indexed tier);\\n\\n  /// @dev Emitted when the domain price is updated.\\n  event DomainPriceUpdated(\\n    address indexed operator, bytes32 indexed labelHash, uint256 price, bytes32 indexed proofHash, uint256 setType\\n  );\\n  /// @dev Emitted when the rule to rescale domain price is updated.\\n  event DomainPriceScaleRuleUpdated(address indexed operator, uint192 ratio, uint64 period);\\n\\n  /// @dev Emitted when the Pyth Oracle config is updated.\\n  event PythOracleConfigUpdated(\\n    address indexed operator, IPyth indexed pyth, uint256 maxAcceptableAge, bytes32 indexed pythIdForRONUSD\\n  );\\n\\n  /**\\n   * @dev Returns the Pyth oracle config.\\n   */\\n  function getPythOracleConfig() external view returns (IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD);\\n\\n  /**\\n   * @dev Sets the Pyth oracle config.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {PythOracleConfigUpdated}.\\n   */\\n  function setPythOracleConfig(IPyth pyth, uint256 maxAcceptableAge, bytes32 pythIdForRONUSD) external;\\n\\n  /**\\n   * @dev Returns the percentage to scale from domain price each period.\\n   */\\n  function getScaleDownRuleForDomainPrice() external view returns (PeriodScaler memory dpScaleRule);\\n\\n  /**\\n   * @dev Sets the percentage to scale from domain price each period.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {DomainPriceScaleRuleUpdated}.\\n   *\\n   * @notice Applies for the business rule: -x% each y seconds.\\n   */\\n  function setScaleDownRuleForDomainPrice(PeriodScaler calldata scaleRule) external;\\n\\n  /**\\n   * @dev Returns the renewal fee by lengths.\\n   */\\n  function getRenewalFeeByLengths() external view returns (RenewalFee[] memory renewalFees);\\n\\n  /**\\n   * @dev Sets the renewal fee by lengths\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits events {RenewalFeeByLengthUpdated}.\\n   * Emits an event {MaxRenewalFeeLengthUpdated} optionally.\\n   */\\n  function setRenewalFeeByLengths(RenewalFee[] calldata renewalFees) external;\\n\\n  /**\\n   * @dev Returns tax ratio.\\n   */\\n  function getTaxRatio() external view returns (uint256 taxRatio);\\n\\n  /**\\n   * @dev Sets renewal reservation ratio.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits an event {TaxRatioUpdated}.\\n   */\\n  function setTaxRatio(uint256 ratio) external;\\n\\n  /**\\n   * @dev Return the domain price.\\n   * @param label The domain label to register (Eg, 'foo' for 'foo.ron').\\n   */\\n  function getDomainPrice(string memory label) external view returns (uint256 usdPrice, uint256 ronPrice);\\n\\n  /**\\n   * @dev Returns the renewal fee in USD and RON.\\n   * @param label The domain label to register (Eg, 'foo' for 'foo.ron').\\n   * @param duration Amount of second(s).\\n   */\\n  function getRenewalFee(string calldata label, uint256 duration)\\n    external\\n    view\\n    returns (UnitPrice memory basePrice, UnitPrice memory tax);\\n\\n  /**\\n   * @dev Returns the tier of a label.\\n   * @param label The domain label to register (Eg, 'foo' for 'foo.ron').\\n   * @return tier The tier of the label.\\n   */\\n  function getTier(string calldata label) external view returns (uint256 tier);\\n\\n  /**\\n   * @dev Returns the renewal fee of a label. Reverts if not overridden.\\n   * @notice This method is to help developers check the domain renewal fee overriding. Consider using method\\n   * {getRenewalFee} instead for full handling of renewal fees.\\n   */\\n  function getOverriddenRenewalFee(string memory label) external view returns (uint256 usdFee);\\n\\n  /**\\n   * @dev Returns the tier of a label. Reverts if not overridden.\\n   * @notice This method is to help developers check the domain tier overriding. Consider using method {getTier} instead\\n   * for full handling of tiers.\\n   */\\n  function getOverriddenTier(string memory label) external view returns (uint256 tier);\\n\\n  /**\\n   * @dev Bulk override renewal fees.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   *\\n   * Emits events {RenewalFeeOverridingUpdated}.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param usdPrices Array of prices in USD. Leave 2^256 - 1 to remove overriding.\\n   */\\n  function bulkOverrideRenewalFees(bytes32[] calldata lbHashes, uint256[] calldata usdPrices) external;\\n\\n  /**\\n   * @dev Bulk override tiers.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   *\\n   * Emits events {TierOverridingUpdated}.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param tiers Array of tiers. Leave 2^256 - 1 to remove overriding.\\n   */\\n  function bulkOverrideTiers(bytes32[] calldata lbHashes, uint256[] calldata tiers) external;\\n\\n  /**\\n   * @dev Bulk try to set domain prices. Returns a boolean array indicating whether domain prices at the corresponding\\n   * indexes if set or not.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   * - The price should be larger than current domain price or it will not be updated.\\n   *\\n   * Emits events {DomainPriceUpdated} optionally.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param ronPrices Array of prices in (W)RON token.\\n   * @param proofHashes Array of proof hashes.\\n   * @param setTypes Array of update types from the operator service.\\n   */\\n  function bulkTrySetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external returns (bool[] memory updated);\\n\\n  /**\\n   * @dev Bulk override domain prices.\\n   *\\n   * Requirements:\\n   * - The method caller is operator.\\n   * - The input array lengths must be larger than 0 and the same.\\n   *\\n   * Emits events {DomainPriceUpdated}.\\n   *\\n   * @param lbHashes Array of label hashes. (Eg, ['foo'].map(keccak256) for 'foo.ron')\\n   * @param ronPrices Array of prices in (W)RON token.\\n   * @param proofHashes Array of proof hashes.\\n   * @param setTypes Array of update types from the operator service.\\n   */\\n  function bulkSetDomainPrice(\\n    bytes32[] calldata lbHashes,\\n    uint256[] calldata ronPrices,\\n    bytes32[] calldata proofHashes,\\n    uint256[] calldata setTypes\\n  ) external;\\n\\n  /**\\n   * @dev Returns the converted amount from USD to RON.\\n   */\\n  function convertUSDToRON(uint256 usdAmount) external view returns (uint256 ronAmount);\\n\\n  /**\\n   * @dev Returns the converted amount from RON to USD.\\n   */\\n  function convertRONToUSD(uint256 ronAmount) external view returns (uint256 usdAmount);\\n\\n  /**\\n   * @dev Value equals to keccak256(\\\"OPERATOR_ROLE\\\").\\n   */\\n  function OPERATOR_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the overrider role.\\n   */\\n  function OVERRIDER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\\n   */\\n  function MAX_PERCENTAGE() external pure returns (uint64);\\n\\n  /**\\n   * @dev Decimal for USD.\\n   */\\n  function USD_DECIMALS() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x7bb3e2ecc33f60ade262ad20fc621474ca1c5bcd247b980caa564be256afb59d\",\"license\":\"MIT\"},\"src/interfaces/INSUnified.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport { IAccessControlEnumerable } from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport { ModifyingIndicator } from \\\"../types/ModifyingIndicator.sol\\\";\\n\\ninterface INSUnified is IAccessControlEnumerable, IERC721Metadata {\\n  /// @dev Error: The provided token id is expired.\\n  error Expired();\\n  /// @dev Error: The provided token id is unexists.\\n  error Unexists();\\n  /// @dev Error: The provided token id's depth level is greater than 3.\\n  error ThirdLevelDomainUnallowed();\\n  /// @dev Error: The provided id expiry is greater than parent id expiry.\\n  error ExceedParentExpiry();\\n  /// @dev Error: The provided name is unavailable for registration.\\n  error Unavailable();\\n  /// @dev Error: The sender lacks the necessary permissions.\\n  error Unauthorized();\\n  /// @dev Error: Missing controller role required for modification.\\n  error MissingControllerRole();\\n  /// @dev Error: Attempting to set an immutable field, which cannot be modified.\\n  error CannotSetImmutableField();\\n  /// @dev Error: Missing protected settler role required for modification.\\n  error MissingProtectedSettlerRole();\\n  /// @dev Error: Attempting to set an expiry time that is not larger than the previous one.\\n  error ExpiryTimeMustBeLargerThanTheOldOne();\\n  /// @dev Error: The provided name must be registered or is in a grace period.\\n  error NameMustBeRegisteredOrInGracePeriod();\\n\\n  /**\\n   * | Fields\\\\Idc | Modifying Indicator |\\n   * | ---------- | ------------------- |\\n   * | depth      | 0b00000001          |\\n   * | parentId   | 0b00000010          |\\n   * | label      | 0b00000100          |\\n   */\\n  struct ImmutableRecord {\\n    // The level-th of a domain.\\n    uint8 depth;\\n    // The node of parent token. Eg, parent node of vip.duke.ron equals to namehash('duke.ron')\\n    uint256 parentId;\\n    // The label of a domain. Eg, label is vip for domain vip.duke.ron\\n    string label;\\n  }\\n\\n  /**\\n   * | Fields\\\\Idc,Roles | Modifying Indicator | Controller | Protected setter | (Parent) Owner/Spender |\\n   * | ---------------- | ------------------- | ---------- | ---------------- | ---------------------- |\\n   * | resolver         | 0b00001000          | x          |                  | x                      |\\n   * | owner            | 0b00010000          | x          |                  | x                      |\\n   * | expiry           | 0b00100000          | x          |                  |                        |\\n   * | protected        | 0b01000000          |            | x                |                        |\\n   * Note: (Parent) Owner/Spender means parent owner or current owner or current token spender.\\n   */\\n  struct MutableRecord {\\n    // The resolver address.\\n    address resolver;\\n    // The record owner. This field must equal to the owner of token.\\n    address owner;\\n    // Expiry timestamp.\\n    uint64 expiry;\\n    // Flag indicating whether the token is protected or not.\\n    bool protected;\\n  }\\n\\n  struct Record {\\n    ImmutableRecord immut;\\n    MutableRecord mut;\\n  }\\n\\n  /// @dev Emitted when a base URI is updated.\\n  event BaseURIUpdated(address indexed operator, string newURI);\\n  /// @dev Emitted when the grace period for all domain is updated.\\n  event GracePeriodUpdated(address indexed operator, uint64 newGracePeriod);\\n\\n  /**\\n   * @dev Emitted when the record of node is updated.\\n   * @param indicator The binary index of updated fields. Eg, 0b10101011 means fields at position 1, 2, 4, 6, 8 (right\\n   * to left) needs to be updated.\\n   * @param record The updated fields.\\n   */\\n  event RecordUpdated(uint256 indexed node, ModifyingIndicator indicator, Record record);\\n\\n  /**\\n   * @dev Returns the controller role.\\n   * @notice Can set all fields {Record.mut} in token record, excepting {Record.mut.protected}.\\n   */\\n  function CONTROLLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the protected setter role.\\n   * @notice Can set field {Record.mut.protected} in token record by using method `bulkSetProtected`.\\n   */\\n  function PROTECTED_SETTLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the reservation role.\\n   * @notice Never expire for token owner has this role.\\n   */\\n  function RESERVATION_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the max expiry value.\\n   */\\n  function MAX_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev Returns the name hash output of a domain.\\n   */\\n  function namehash(string memory domain) external pure returns (bytes32 node);\\n\\n  /**\\n   * @dev Returns true if the specified name is available for registration.\\n   * Note: Only available after passing the grace period.\\n   */\\n  function available(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the grace period in second(s).\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function getGracePeriod() external view returns (uint64);\\n\\n  /**\\n   * @dev Returns the total minted ids.\\n   * Note: Burning id will not affect `totalMinted`.\\n   */\\n  function totalMinted() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the grace period in second(s).\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function setGracePeriod(uint64) external;\\n\\n  /**\\n   * @dev Sets the base uri.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract owner.\\n   *\\n   */\\n  function setBaseURI(string calldata baseTokenURI) external;\\n\\n  /**\\n   * @dev Mints token for subnode.\\n   *\\n   * Requirements:\\n   * - The token must be available.\\n   * - The method caller must be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   *\\n   * @param parentId The parent node to mint or create subnode.\\n   * @param label The domain label. Eg, label is duke for domain duke.ron.\\n   * @param resolver The resolver address.\\n   * @param owner The token owner.\\n   * @param duration Duration in second(s) to expire. Leave 0 to set as parent.\\n   */\\n  function mint(uint256 parentId, string calldata label, address resolver, address owner, uint64 duration)\\n    external\\n    returns (uint64 expiryTime, uint256 id);\\n\\n  /**\\n   * @dev Returns all record of a domain.\\n   * Reverts if the token is non existent.\\n   */\\n  function getRecord(uint256 id) external view returns (Record memory record);\\n\\n  /**\\n   * @dev Returns the domain name of id.\\n   */\\n  function getDomain(uint256 id) external view returns (string memory domain);\\n\\n  /**\\n   * @dev Returns whether the requester is able to modify the record based on the updated index.\\n   * Note: This method strictly follows the permission of struct {MutableRecord}.\\n   */\\n  function canSetRecord(address requester, uint256 id, ModifyingIndicator indicator)\\n    external\\n    view\\n    returns (bool, bytes4 error);\\n\\n  /**\\n   * @dev Sets record of existing token. Update operation for {Record.mut}.\\n   *\\n   * Requirements:\\n   * - The method caller must have role based on the corresponding `indicator`. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setRecord(uint256 id, ModifyingIndicator indicator, MutableRecord calldata record) external;\\n\\n  /**\\n   * @dev Reclaims ownership. Update operation for {Record.mut.owner}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   * - The method caller should be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function reclaim(uint256 id, address owner) external;\\n\\n  /**\\n   * @dev Renews token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function renew(uint256 id, uint64 duration) external returns (uint64 expiry);\\n\\n  /**\\n   * @dev Sets expiry time for a token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setExpiry(uint256 id, uint64 expiry) external;\\n\\n  /**\\n   * @dev Sets the protected status of a list of ids. Update operation for {Record.mut.protected}.\\n   *\\n   * Requirements:\\n   * - The method caller must have protected setter role.\\n   *\\n   * Emits events {RecordUpdated}.\\n   */\\n  function bulkSetProtected(uint256[] calldata ids, bool protected) external;\\n}\\n\",\"keccak256\":\"0x98e2e77490d7fd6d87a8e9800223bb2f60a33e7338e2f65f64a3aed4737c035c\",\"license\":\"MIT\"},\"src/libraries/LibEventRange.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct EventRange {\\n  uint256 startedAt;\\n  uint256 endedAt;\\n}\\n\\nlibrary LibEventRange {\\n  /**\\n   * @dev Checks whether the event range is valid.\\n   */\\n  function valid(EventRange calldata range) internal pure returns (bool) {\\n    return range.startedAt <= range.endedAt;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current range is not yet started.\\n   */\\n  function isNotYetStarted(EventRange memory range) internal view returns (bool) {\\n    return block.timestamp < range.startedAt;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current range is ended or not.\\n   */\\n  function isEnded(EventRange memory range) internal view returns (bool) {\\n    return range.endedAt <= block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current block is in period.\\n   */\\n  function isInPeriod(EventRange memory range) internal view returns (bool) {\\n    return range.startedAt <= block.timestamp && block.timestamp < range.endedAt;\\n  }\\n}\\n\",\"keccak256\":\"0x95bf015c4245919cbcbcd810dd597fdb23eb4e58b62df8ef74b1c8c60a969bea\",\"license\":\"MIT\"},\"src/libraries/LibRNSDomain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LibRNSDomain {\\n  /// @dev Value equals to namehash('ron')\\n  uint256 internal constant RON_ID = 0xba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d688;\\n  /// @dev Value equals to namehash('addr.reverse')\\n  uint256 internal constant ADDR_REVERSE_ID = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n  /**\\n   * @dev Calculate the corresponding id given parentId and label.\\n   */\\n  function toId(uint256 parentId, string memory label) internal pure returns (uint256 id) {\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(0x0, parentId)\\n      mstore(0x20, keccak256(add(label, 32), mload(label)))\\n      id := keccak256(0x0, 64)\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the hash of the label.\\n   */\\n  function hashLabel(string memory label) internal pure returns (bytes32 hashed) {\\n    assembly (\\\"memory-safe\\\") {\\n      hashed := keccak256(add(label, 32), mload(label))\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculate the RNS namehash of a str.\\n   */\\n  function namehash(string memory str) internal pure returns (bytes32 hashed) {\\n    // notice: this method is case-sensitive, ensure the string is lowercased before calling this method\\n    assembly (\\\"memory-safe\\\") {\\n      // load str length\\n      let len := mload(str)\\n      // returns bytes32(0x0) if length is zero\\n      if iszero(iszero(len)) {\\n        let hashedLen\\n        // compute pointer to str[0]\\n        let head := add(str, 32)\\n        // compute pointer to str[length - 1]\\n        let tail := add(head, sub(len, 1))\\n        // cleanup dirty bytes if contains any\\n        mstore(0x0, 0)\\n        // loop backwards from `tail` to `head`\\n        for { let i := tail } iszero(lt(i, head)) { i := sub(i, 1) } {\\n          // check if `i` is `head`\\n          let isHead := eq(i, head)\\n          // check if `str[i-1]` is \\\".\\\"\\n          // `0x2e` == bytes1(\\\".\\\")\\n          let isDotNext := eq(shr(248, mload(sub(i, 1))), 0x2e)\\n          if or(isHead, isDotNext) {\\n            // size = distance(length, i) - hashedLength + 1\\n            let size := add(sub(sub(tail, i), hashedLen), 1)\\n            mstore(0x20, keccak256(i, size))\\n            mstore(0x0, keccak256(0x0, 64))\\n            // skip \\\".\\\" thereby + 1\\n            hashedLen := add(hashedLen, add(size, 1))\\n          }\\n        }\\n      }\\n      hashed := mload(0x0)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x715029b2b420c6ec00bc1f939b837acf45d247fde8426089575b0e7b5e84518b\",\"license\":\"MIT\"},\"src/libraries/math/PeriodScalingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { PowMath } from \\\"./PowMath.sol\\\";\\n\\nstruct PeriodScaler {\\n  uint192 ratio;\\n  uint64 period;\\n}\\n\\nlibrary LibPeriodScaler {\\n  using PowMath for uint256;\\n\\n  error PeriodNumOverflowedUint16(uint256 n);\\n\\n  /// @dev The precision number of calculation is 2\\n  uint256 public constant MAX_PERCENTAGE = 100_00;\\n\\n  /**\\n   * @dev Scales down the input value `v` for a percentage of `self.ratio` each period `self.period`.\\n   * Reverts if the passed period is larger than 2^16 - 1.\\n   *\\n   * @param self The period scaler with specific period and ratio\\n   * @param v The original value to scale based on the rule `self`\\n   * @param maxR The maximum value of 100%. Eg, if the `self.ratio` in range of [0;100_00] reflexes 0-100%, this param\\n   * must be 100_00\\n   * @param dur The passed duration in the same uint with `self.period`\\n   */\\n  function scaleDown(PeriodScaler memory self, uint256 v, uint64 maxR, uint256 dur) internal pure returns (uint256 rs) {\\n    uint256 n = dur / uint256(self.period);\\n    if (n == 0 || self.ratio == 0) return v;\\n    if (maxR == self.ratio) return 0;\\n    if (n > type(uint16).max) revert PeriodNumOverflowedUint16(n);\\n\\n    unchecked {\\n      // Normalizes the input ratios to be in range of [0;MAX_PERCENTAGE]\\n      uint256 p = Math.mulDiv(maxR - self.ratio, MAX_PERCENTAGE, maxR);\\n      return v.mulDiv({ y: p, d: MAX_PERCENTAGE, n: uint16(n) });\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x502d004fbd130a99f3f1e6685aebff9f47300565fbc5a65b4912824ea5eb5b78\",\"license\":\"MIT\"},\"src/libraries/math/PowMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary PowMath {\\n  using Math for uint256;\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev Negative exponent n for x*10^n.\\n   */\\n  function exp10(uint256 x, int32 n) internal pure returns (uint256) {\\n    if (n < 0) {\\n      return x / 10 ** uint32(-n);\\n    } else if (n > 0) {\\n      return x * 10 ** uint32(n);\\n    } else {\\n      return x;\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates floor(x * (y / d)**n) with full precision.\\n   */\\n  function mulDiv(uint256 x, uint256 y, uint256 d, uint16 n) internal pure returns (uint256 r) {\\n    unchecked {\\n      if (y == d || n == 0) return x;\\n      r = x;\\n\\n      bool ok;\\n      uint256 r_;\\n      uint16 nd_;\\n\\n      {\\n        uint16 ye = uint16(Math.min(n, findMaxExponent(y)));\\n        while (ye > 0) {\\n          (ok, r_) = r.tryMul(y ** ye);\\n          if (ok) {\\n            r = r_;\\n            n -= ye;\\n            nd_ += ye;\\n          }\\n          ye = uint16(Math.min(ye / 2, n));\\n        }\\n      }\\n\\n      while (n > 0) {\\n        (ok, r_) = r.tryMul(y);\\n        if (ok) {\\n          r = r_;\\n          n--;\\n          nd_++;\\n        } else if (nd_ > 0) {\\n          r /= d;\\n          nd_--;\\n        } else {\\n          r = r.mulDiv(y, d);\\n          n--;\\n        }\\n      }\\n\\n      uint16 de = findMaxExponent(d);\\n      while (nd_ > 0) {\\n        uint16 e = uint16(Math.min(de, nd_));\\n        r /= d ** e;\\n        nd_ -= e;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates floor(x * (y / d)**n) with low precision.\\n   */\\n  function mulDivLowPrecision(uint256 x, uint256 y, uint256 d, uint16 n) internal pure returns (uint256) {\\n    return uncheckedMulDiv(x, y, d, n, findMaxExponent(Math.max(y, d)));\\n  }\\n\\n  /**\\n   * @dev Aggregated calculate multiplications.\\n   * ```\\n   * r = x*(y/d)^k\\n   *   = \\\\prod(x*(y/d)^{k_i}) \\\\ where \\\\ sum(k_i) = k\\n   * ```\\n   */\\n  function uncheckedMulDiv(uint256 x, uint256 y, uint256 d, uint16 n, uint16 maxE) internal pure returns (uint256 r) {\\n    unchecked {\\n      r = x;\\n      uint16 e;\\n      while (n > 0) {\\n        e = uint16(Math.min(n, maxE));\\n        r = r.mulDiv(y ** e, d ** e);\\n        n -= e;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest exponent `k` where, x^k <= 2^256-1\\n   * Note: n = Surd[2^256-1,k]\\n   *         = 10^( log2(2^256-1) / k * log10(2) )\\n   */\\n  function findMaxExponent(uint256 x) internal pure returns (uint16 k) {\\n    if (x < 3) k = 255;\\n    else if (x < 4) k = 128;\\n    else if (x < 16) k = 64;\\n    else if (x < 256) k = 32;\\n    else if (x < 7132) k = 20;\\n    else if (x < 11376) k = 19;\\n    else if (x < 19113) k = 18;\\n    else if (x < 34132) k = 17;\\n    else if (x < 65536) k = 16;\\n    else if (x < 137271) k = 15;\\n    else if (x < 319558) k = 14;\\n    else if (x < 847180) k = 13;\\n    else if (x < 2642246) k = 12;\\n    else if (x < 10134189) k = 11;\\n    else if (x < 50859009) k = 10;\\n    else if (x < 365284285) k = 9;\\n    else if (x < 4294967296) k = 8;\\n    else if (x < 102116749983) k = 7;\\n    else if (x < 6981463658332) k = 6;\\n    else if (x < 2586638741762875) k = 5;\\n    else if (x < 18446744073709551616) k = 4;\\n    else if (x < 48740834812604276470692695) k = 3;\\n    else if (x < 340282366920938463463374607431768211456) k = 2;\\n    else k = 1;\\n  }\\n}\\n\",\"keccak256\":\"0x29f943cf7c61149bc9a624244901720fc3a349adb418555db1db2a045fcdfb70\",\"license\":\"MIT\"},\"src/types/ModifyingIndicator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype ModifyingIndicator is uint256;\\n\\nusing { hasAny } for ModifyingIndicator global;\\nusing { or as | } for ModifyingIndicator global;\\nusing { and as & } for ModifyingIndicator global;\\nusing { eq as == } for ModifyingIndicator global;\\nusing { not as ~ } for ModifyingIndicator global;\\nusing { xor as ^ } for ModifyingIndicator global;\\nusing { neq as != } for ModifyingIndicator global;\\n\\n/// @dev Indicator for modifying immutable fields: Depth, ParentId, Label. See struct {INSUnified.ImmutableRecord}.\\nModifyingIndicator constant IMMUTABLE_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x7);\\n\\n/// @dev Indicator for modifying user fields: Resolver, Owner. See struct {INSUnified.MutableRecord}.\\nModifyingIndicator constant USER_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x18);\\n\\n/// @dev Indicator when modifying all of the fields in {ModifyingField}.\\nModifyingIndicator constant ALL_FIELDS_INDICATOR = ModifyingIndicator.wrap(type(uint256).max);\\n\\nfunction eq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return ModifyingIndicator.unwrap(self) == ModifyingIndicator.unwrap(other);\\n}\\n\\nfunction neq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return !eq(self, other);\\n}\\n\\nfunction xor(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) ^ ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction not(ModifyingIndicator self) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(~ModifyingIndicator.unwrap(self));\\n}\\n\\nfunction or(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) | ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction and(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) & ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction hasAny(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return self & other != ModifyingIndicator.wrap(0);\\n}\\n\",\"keccak256\":\"0x2e42fbba358c470ff6b57268367d248f0e2fcf8d7142d762688f7aef5efae7ee\",\"license\":\"MIT\"},\"src/utils/RNSOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { INSUnified } from \\\"../interfaces/INSUnified.sol\\\";\\nimport { INSAuction } from \\\"../interfaces/INSAuction.sol\\\";\\nimport { INSDomainPrice } from \\\"../interfaces/INSDomainPrice.sol\\\";\\nimport { LibRNSDomain } from \\\"../libraries/LibRNSDomain.sol\\\";\\n\\ncontract RNSOperation is Ownable {\\n  INSUnified public immutable rns;\\n  address public immutable resolver;\\n  INSAuction public immutable auction;\\n  INSDomainPrice public immutable domainPrice;\\n\\n  constructor(INSUnified rns_, address resolver_, INSAuction auction_, INSDomainPrice domainPrice_) {\\n    rns = rns_;\\n    auction = auction_;\\n    resolver = resolver_;\\n    domainPrice = domainPrice_;\\n  }\\n\\n  /**\\n   * @dev Allows the owner to mint RNS domains in bulk with specified labels and durations.\\n   * @param tos The array of addresses to receive the minted domains.\\n   * @param labels The array of labels for the minted domains.\\n   * @param duration The duration for which the domains will be owned.\\n   */\\n  function bulkMint(address[] calldata tos, string[] calldata labels, uint64 duration) external onlyOwner {\\n    require(labels.length == tos.length, \\\"RNSOperation: length mismatch\\\");\\n\\n    for (uint256 i; i < labels.length; ++i) {\\n      rns.mint(LibRNSDomain.RON_ID, labels[i], resolver, tos[i], duration);\\n    }\\n  }\\n\\n  /**\\n   * @dev Allows the owner to set the protection status of multiple RNS domains in bulk.\\n   * @param labels The array of labels for the domains.\\n   * @param shouldProtect A boolean indicating whether to protect or unprotect the specified domains.\\n   */\\n  function bulkSetProtected(string[] calldata labels, bool shouldProtect) external onlyOwner {\\n    rns.bulkSetProtected(toIds(labels), shouldProtect);\\n  }\\n\\n  /**\\n   * @dev Allows the owner to bulk override the renewal fees for specified RNS domains.\\n   * @param labels The array of labels for the RNS domains.\\n   * @param yearlyUSDPrices The array of yearly renewal fees in USD (no decimals) for the corresponding RNS domains.\\n   * @dev The `yearlyUSDPrices` array should represent the yearly renewal fees in USD for each domain.\\n   */\\n  function bulkOverrideRenewalFees(string[] calldata labels, uint256[] calldata yearlyUSDPrices) external onlyOwner {\\n    require(labels.length == yearlyUSDPrices.length, \\\"RNSOperation: length mismatch\\\");\\n\\n    bytes32[] memory lbHashes = new bytes32[](labels.length);\\n    for (uint256 i; i < lbHashes.length; ++i) {\\n      lbHashes[i] = LibRNSDomain.hashLabel(labels[i]);\\n    }\\n    uint256[] memory usdPrices = new uint256[](yearlyUSDPrices.length);\\n    for (uint256 i; i < usdPrices.length; ++i) {\\n      usdPrices[i] = Math.mulDiv(yearlyUSDPrices[i], 1 ether, 365 days);\\n    }\\n\\n    domainPrice.bulkOverrideRenewalFees(lbHashes, usdPrices);\\n  }\\n\\n  /**\\n   * @dev Allows the owner to bulk override the tiers for specified RNS domains.\\n   * @param labels The array of labels for the RNS domains.\\n   * @param tiers The array of tiers for the corresponding RNS domains.\\n   * @dev The `tiers` array should represent the tiers for each domain.\\n   */\\n  function bulkOverrideTiers(string[] calldata labels, uint256[] calldata tiers) external onlyOwner {\\n    require(labels.length == tiers.length, \\\"RNSOperation: length mismatch\\\");\\n\\n    bytes32[] memory lbHashes = new bytes32[](labels.length);\\n    for (uint256 i; i < lbHashes.length; ++i) {\\n      lbHashes[i] = LibRNSDomain.hashLabel(labels[i]);\\n    }\\n\\n    domainPrice.bulkOverrideTiers(lbHashes, tiers);\\n  }\\n\\n  /**\\n   * @dev Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.\\n   * @param tos The array of addresses to which the unbidded domains will be transferred.\\n   * @param labels The array of labels for the unbidded domains to be reclaimed.\\n   * @param allowFailure Flag to indicate whether to allow failure if a domain is already being bid on.\\n   */\\n  function reclaimUnbiddedNames(address[] calldata tos, string[] calldata labels, bool allowFailure) external onlyOwner {\\n    auction.bulkClaimUnbiddedNames(tos, toIds(labels), allowFailure);\\n  }\\n\\n  /**\\n   * @dev Converts an array of labels to an array of corresponding RNS domain IDs.\\n   * @param labels The array of labels to be converted to IDs.\\n   * @return ids The array of RNS domain IDs.\\n   */\\n  function toIds(string[] calldata labels) public pure returns (uint256[] memory ids) {\\n    ids = new uint256[](labels.length);\\n\\n    for (uint256 i; i < labels.length; ++i) {\\n      ids[i] = LibRNSDomain.toId(LibRNSDomain.RON_ID, labels[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb62bd45bad59fb125d7528ec0fc54be48283710ca70c75eba2dd6169901476bf\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 190767,
  "numDeployments": 4,
  "storageLayout": {
    "storage": [
      {
        "astId": 46382,
        "contract": "src/utils/RNSOperation.sol:RNSOperation",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  },
  "timestamp": 1708499768,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}