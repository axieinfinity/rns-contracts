{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract INSUnified",
          "name": "rns_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver_",
          "type": "address"
        },
        {
          "internalType": "contract INSAuction",
          "name": "auction_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auction",
      "outputs": [
        {
          "internalType": "contract INSAuction",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "labels",
          "type": "string[]"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "bulkMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "labels",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "shouldProtect",
          "type": "bool"
        }
      ],
      "name": "bulkSetProtected",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "labels",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "allowFailure",
          "type": "bool"
        }
      ],
      "name": "reclaimUnbiddedNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rns",
      "outputs": [
        {
          "internalType": "contract INSUnified",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "labels",
          "type": "string[]"
        }
      ],
      "name": "toIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "address": "0x64cc51f89d337c7327E1351D7568b733517eB851",
  "args": "0x000000000000000000000000f0c99c9677eda0d13291c093b27e6512e4acdf83000000000000000000000000803c459dcb8771e5354d1fc567ecc6885a9fd5e6000000000000000000000000b962edded164f55d136e491a3022246815e1b5a8",
  "ast": {
    "absolutePath": "src/utils/RNSOperation.sol",
    "id": 60929,
    "exportedSymbols": {
      "INSAuction": [
        58629
      ],
      "INSUnified": [
        59156
      ],
      "LibRNSDomain": [
        59310
      ],
      "Ownable": [
        46487
      ],
      "RNSOperation": [
        60928
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2655:89",
    "nodes": [
      {
        "id": 60743,
        "nodeType": "PragmaDirective",
        "src": "32:24:89",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 60745,
        "nodeType": "ImportDirective",
        "src": "58:69:89",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60929,
        "sourceUnit": 46488,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60744,
              "name": "Ownable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46487,
              "src": "67:7:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60747,
        "nodeType": "ImportDirective",
        "src": "128:58:89",
        "nodes": [],
        "absolutePath": "src/interfaces/INSUnified.sol",
        "file": "../interfaces/INSUnified.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60929,
        "sourceUnit": 59157,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60746,
              "name": "INSUnified",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 59156,
              "src": "137:10:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60749,
        "nodeType": "ImportDirective",
        "src": "187:58:89",
        "nodes": [],
        "absolutePath": "src/interfaces/INSAuction.sol",
        "file": "../interfaces/INSAuction.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60929,
        "sourceUnit": 58630,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60748,
              "name": "INSAuction",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 58629,
              "src": "196:10:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60751,
        "nodeType": "ImportDirective",
        "src": "246:61:89",
        "nodes": [],
        "absolutePath": "src/libraries/LibRNSDomain.sol",
        "file": "../libraries/LibRNSDomain.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60929,
        "sourceUnit": 59311,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60750,
              "name": "LibRNSDomain",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 59310,
              "src": "255:12:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60928,
        "nodeType": "ContractDefinition",
        "src": "309:2377:89",
        "nodes": [
          {
            "id": 60756,
            "nodeType": "VariableDeclaration",
            "src": "346:31:89",
            "nodes": [],
            "constant": false,
            "functionSelector": "663b44c5",
            "mutability": "immutable",
            "name": "rns",
            "nameLocation": "374:3:89",
            "scope": 60928,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_INSUnified_$59156",
              "typeString": "contract INSUnified"
            },
            "typeName": {
              "id": 60755,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 60754,
                "name": "INSUnified",
                "nameLocations": [
                  "346:10:89"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 59156,
                "src": "346:10:89"
              },
              "referencedDeclaration": 59156,
              "src": "346:10:89",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_INSUnified_$59156",
                "typeString": "contract INSUnified"
              }
            },
            "visibility": "public"
          },
          {
            "id": 60758,
            "nodeType": "VariableDeclaration",
            "src": "381:33:89",
            "nodes": [],
            "constant": false,
            "functionSelector": "04f3bcec",
            "mutability": "immutable",
            "name": "resolver",
            "nameLocation": "406:8:89",
            "scope": 60928,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 60757,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "381:7:89",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 60761,
            "nodeType": "VariableDeclaration",
            "src": "418:35:89",
            "nodes": [],
            "constant": false,
            "functionSelector": "7d9f6db5",
            "mutability": "immutable",
            "name": "auction",
            "nameLocation": "446:7:89",
            "scope": 60928,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_INSAuction_$58629",
              "typeString": "contract INSAuction"
            },
            "typeName": {
              "id": 60760,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 60759,
                "name": "INSAuction",
                "nameLocations": [
                  "418:10:89"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 58629,
                "src": "418:10:89"
              },
              "referencedDeclaration": 58629,
              "src": "418:10:89",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_INSAuction_$58629",
                "typeString": "contract INSAuction"
              }
            },
            "visibility": "public"
          },
          {
            "id": 60785,
            "nodeType": "FunctionDefinition",
            "src": "458:140:89",
            "nodes": [],
            "body": {
              "id": 60784,
              "nodeType": "Block",
              "src": "527:71:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 60774,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60772,
                      "name": "rns",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60756,
                      "src": "533:3:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSUnified_$59156",
                        "typeString": "contract INSUnified"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 60773,
                      "name": "rns_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60764,
                      "src": "539:4:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSUnified_$59156",
                        "typeString": "contract INSUnified"
                      }
                    },
                    "src": "533:10:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSUnified_$59156",
                      "typeString": "contract INSUnified"
                    }
                  },
                  "id": 60775,
                  "nodeType": "ExpressionStatement",
                  "src": "533:10:89"
                },
                {
                  "expression": {
                    "id": 60778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60776,
                      "name": "auction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60761,
                      "src": "549:7:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSAuction_$58629",
                        "typeString": "contract INSAuction"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 60777,
                      "name": "auction_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60769,
                      "src": "559:8:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_INSAuction_$58629",
                        "typeString": "contract INSAuction"
                      }
                    },
                    "src": "549:18:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSAuction_$58629",
                      "typeString": "contract INSAuction"
                    }
                  },
                  "id": 60779,
                  "nodeType": "ExpressionStatement",
                  "src": "549:18:89"
                },
                {
                  "expression": {
                    "id": 60782,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60780,
                      "name": "resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60758,
                      "src": "573:8:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 60781,
                      "name": "resolver_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60766,
                      "src": "584:9:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "573:20:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 60783,
                  "nodeType": "ExpressionStatement",
                  "src": "573:20:89"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 60770,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60764,
                  "mutability": "mutable",
                  "name": "rns_",
                  "nameLocation": "481:4:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60785,
                  "src": "470:15:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_INSUnified_$59156",
                    "typeString": "contract INSUnified"
                  },
                  "typeName": {
                    "id": 60763,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60762,
                      "name": "INSUnified",
                      "nameLocations": [
                        "470:10:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 59156,
                      "src": "470:10:89"
                    },
                    "referencedDeclaration": 59156,
                    "src": "470:10:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSUnified_$59156",
                      "typeString": "contract INSUnified"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60766,
                  "mutability": "mutable",
                  "name": "resolver_",
                  "nameLocation": "495:9:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60785,
                  "src": "487:17:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 60765,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "487:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60769,
                  "mutability": "mutable",
                  "name": "auction_",
                  "nameLocation": "517:8:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60785,
                  "src": "506:19:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_INSAuction_$58629",
                    "typeString": "contract INSAuction"
                  },
                  "typeName": {
                    "id": 60768,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 60767,
                      "name": "INSAuction",
                      "nameLocations": [
                        "506:10:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 58629,
                      "src": "506:10:89"
                    },
                    "referencedDeclaration": 58629,
                    "src": "506:10:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_INSAuction_$58629",
                      "typeString": "contract INSAuction"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "469:57:89"
            },
            "returnParameters": {
              "id": 60771,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "527:0:89"
            },
            "scope": 60928,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 60836,
            "nodeType": "FunctionDefinition",
            "src": "910:313:89",
            "nodes": [],
            "body": {
              "id": 60835,
              "nodeType": "Block",
              "src": "1014:209:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 60804,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 60800,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60792,
                            "src": "1028:6:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          },
                          "id": 60801,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1035:6:89",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1028:13:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 60802,
                            "name": "tos",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60789,
                            "src": "1045:3:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 60803,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1049:6:89",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1045:10:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1028:27:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "524e534f7065726174696f6e3a206c656e677468206d69736d61746368",
                        "id": 60805,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1057:31:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        },
                        "value": "RNSOperation: length mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_afc2354994fd6a56a08b9d89fdfd3afd427bd8cb589de7d091fdaeb14d3048c3",
                          "typeString": "literal_string \"RNSOperation: length mismatch\""
                        }
                      ],
                      "id": 60799,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1020:7:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 60806,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1020:69:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60807,
                  "nodeType": "ExpressionStatement",
                  "src": "1020:69:89"
                },
                {
                  "body": {
                    "id": 60833,
                    "nodeType": "Block",
                    "src": "1136:83:89",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 60821,
                                "name": "LibRNSDomain",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59310,
                                "src": "1153:12:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$59310_$",
                                  "typeString": "type(library LibRNSDomain)"
                                }
                              },
                              "id": 60822,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "1166:6:89",
                              "memberName": "RON_ID",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 59273,
                              "src": "1153:19:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60823,
                                "name": "labels",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60792,
                                "src": "1174:6:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                                  "typeString": "string calldata[] calldata"
                                }
                              },
                              "id": 60825,
                              "indexExpression": {
                                "id": 60824,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60809,
                                "src": "1181:1:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1174:9:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            {
                              "id": 60826,
                              "name": "resolver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60758,
                              "src": "1185:8:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 60827,
                                "name": "tos",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60789,
                                "src": "1195:3:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                  "typeString": "address[] calldata"
                                }
                              },
                              "id": 60829,
                              "indexExpression": {
                                "id": 60828,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60809,
                                "src": "1199:1:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1195:6:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 60830,
                              "name": "duration",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60794,
                              "src": "1203:8:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            ],
                            "expression": {
                              "id": 60818,
                              "name": "rns",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60756,
                              "src": "1144:3:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_INSUnified_$59156",
                                "typeString": "contract INSUnified"
                              }
                            },
                            "id": 60820,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1148:4:89",
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 59076,
                            "src": "1144:8:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint64_$returns$_t_uint64_$_t_uint256_$",
                              "typeString": "function (uint256,string memory,address,address,uint64) external returns (uint64,uint256)"
                            }
                          },
                          "id": 60831,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1144:68:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint64_$_t_uint256_$",
                            "typeString": "tuple(uint64,uint256)"
                          }
                        },
                        "id": 60832,
                        "nodeType": "ExpressionStatement",
                        "src": "1144:68:89"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60814,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60811,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60809,
                      "src": "1112:1:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 60812,
                        "name": "labels",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60792,
                        "src": "1116:6:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "string calldata[] calldata"
                        }
                      },
                      "id": 60813,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1123:6:89",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1116:13:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1112:17:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60834,
                  "initializationExpression": {
                    "assignments": [
                      60809
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 60809,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1109:1:89",
                        "nodeType": "VariableDeclaration",
                        "scope": 60834,
                        "src": "1101:9:89",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 60808,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1101:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 60810,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1101:9:89"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 60816,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "1131:3:89",
                      "subExpression": {
                        "id": 60815,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60809,
                        "src": "1133:1:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60817,
                    "nodeType": "ExpressionStatement",
                    "src": "1131:3:89"
                  },
                  "nodeType": "ForStatement",
                  "src": "1096:123:89"
                }
              ]
            },
            "documentation": {
              "id": 60786,
              "nodeType": "StructuredDocumentation",
              "src": "602:305:89",
              "text": " @dev Allows the owner to mint RNS domains in bulk with specified labels and durations.\n @param tos The array of addresses to receive the minted domains.\n @param labels The array of labels for the minted domains.\n @param duration The duration for which the domains will be owned."
            },
            "functionSelector": "38d73f63",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 60797,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60796,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1004:9:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "1004:9:89"
                },
                "nodeType": "ModifierInvocation",
                "src": "1004:9:89"
              }
            ],
            "name": "bulkMint",
            "nameLocation": "919:8:89",
            "parameters": {
              "id": 60795,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60789,
                  "mutability": "mutable",
                  "name": "tos",
                  "nameLocation": "947:3:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60836,
                  "src": "928:22:89",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60787,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "928:7:89",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 60788,
                    "nodeType": "ArrayTypeName",
                    "src": "928:9:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60792,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "970:6:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60836,
                  "src": "952:24:89",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60790,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "952:6:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 60791,
                    "nodeType": "ArrayTypeName",
                    "src": "952:8:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60794,
                  "mutability": "mutable",
                  "name": "duration",
                  "nameLocation": "985:8:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60836,
                  "src": "978:15:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 60793,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "978:6:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "927:67:89"
            },
            "returnParameters": {
              "id": 60798,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1014:0:89"
            },
            "scope": 60928,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60857,
            "nodeType": "FunctionDefinition",
            "src": "1486:152:89",
            "nodes": [],
            "body": {
              "id": 60856,
              "nodeType": "Block",
              "src": "1577:61:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 60851,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60840,
                            "src": "1610:6:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          ],
                          "id": 60850,
                          "name": "toIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60927,
                          "src": "1604:5:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_string_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                            "typeString": "function (string calldata[] calldata) pure returns (uint256[] memory)"
                          }
                        },
                        "id": 60852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1604:13:89",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 60853,
                        "name": "shouldProtect",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60842,
                        "src": "1619:13:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 60847,
                        "name": "rns",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60756,
                        "src": "1583:3:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_INSUnified_$59156",
                          "typeString": "contract INSUnified"
                        }
                      },
                      "id": 60849,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1587:16:89",
                      "memberName": "bulkSetProtected",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 59155,
                      "src": "1583:20:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (uint256[] memory,bool) external"
                      }
                    },
                    "id": 60854,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1583:50:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60855,
                  "nodeType": "ExpressionStatement",
                  "src": "1583:50:89"
                }
              ]
            },
            "documentation": {
              "id": 60837,
              "nodeType": "StructuredDocumentation",
              "src": "1227:256:89",
              "text": " @dev Allows the owner to set the protection status of multiple RNS domains in bulk.\n @param labels The array of labels for the domains.\n @param shouldProtect A boolean indicating whether to protect or unprotect the specified domains."
            },
            "functionSelector": "5ca03294",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 60845,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60844,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1567:9:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "1567:9:89"
                },
                "nodeType": "ModifierInvocation",
                "src": "1567:9:89"
              }
            ],
            "name": "bulkSetProtected",
            "nameLocation": "1495:16:89",
            "parameters": {
              "id": 60843,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60840,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "1530:6:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60857,
                  "src": "1512:24:89",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60838,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "1512:6:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 60839,
                    "nodeType": "ArrayTypeName",
                    "src": "1512:8:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60842,
                  "mutability": "mutable",
                  "name": "shouldProtect",
                  "nameLocation": "1543:13:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60857,
                  "src": "1538:18:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 60841,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1538:4:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1511:46:89"
            },
            "returnParameters": {
              "id": 60846,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1577:0:89"
            },
            "scope": 60928,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60882,
            "nodeType": "FunctionDefinition",
            "src": "2035:193:89",
            "nodes": [],
            "body": {
              "id": 60881,
              "nodeType": "Block",
              "src": "2153:75:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60874,
                        "name": "tos",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60861,
                        "src": "2190:3:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 60876,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60864,
                            "src": "2201:6:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          ],
                          "id": 60875,
                          "name": "toIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60927,
                          "src": "2195:5:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_string_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                            "typeString": "function (string calldata[] calldata) pure returns (uint256[] memory)"
                          }
                        },
                        "id": 60877,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2195:13:89",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 60878,
                        "name": "allowFailure",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60866,
                        "src": "2210:12:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 60871,
                        "name": "auction",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60761,
                        "src": "2159:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_INSAuction_$58629",
                          "typeString": "contract INSAuction"
                        }
                      },
                      "id": 60873,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2167:22:89",
                      "memberName": "bulkClaimUnbiddedNames",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 58531,
                      "src": "2159:30:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bool_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                        "typeString": "function (address[] memory,uint256[] memory,bool) external returns (bool[] memory)"
                      }
                    },
                    "id": 60879,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2159:64:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "id": 60880,
                  "nodeType": "ExpressionStatement",
                  "src": "2159:64:89"
                }
              ]
            },
            "documentation": {
              "id": 60858,
              "nodeType": "StructuredDocumentation",
              "src": "1642:390:89",
              "text": " @dev Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.\n @param tos The array of addresses to which the unbidded domains will be transferred.\n @param labels The array of labels for the unbidded domains to be reclaimed.\n @param allowFailure Flag to indicate whether to allow failure if a domain is already being bid on."
            },
            "functionSelector": "19edebf2",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 60869,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 60868,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2143:9:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46406,
                  "src": "2143:9:89"
                },
                "nodeType": "ModifierInvocation",
                "src": "2143:9:89"
              }
            ],
            "name": "reclaimUnbiddedNames",
            "nameLocation": "2044:20:89",
            "parameters": {
              "id": 60867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60861,
                  "mutability": "mutable",
                  "name": "tos",
                  "nameLocation": "2084:3:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60882,
                  "src": "2065:22:89",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60859,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2065:7:89",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 60860,
                    "nodeType": "ArrayTypeName",
                    "src": "2065:9:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60864,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "2107:6:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60882,
                  "src": "2089:24:89",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60862,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "2089:6:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 60863,
                    "nodeType": "ArrayTypeName",
                    "src": "2089:8:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60866,
                  "mutability": "mutable",
                  "name": "allowFailure",
                  "nameLocation": "2120:12:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60882,
                  "src": "2115:17:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 60865,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2115:4:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2064:69:89"
            },
            "returnParameters": {
              "id": 60870,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2153:0:89"
            },
            "scope": 60928,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 60927,
            "nodeType": "FunctionDefinition",
            "src": "2436:248:89",
            "nodes": [],
            "body": {
              "id": 60926,
              "nodeType": "Block",
              "src": "2520:164:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 60899,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60892,
                      "name": "ids",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60890,
                      "src": "2526:3:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 60896,
                            "name": "labels",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60886,
                            "src": "2546:6:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "string calldata[] calldata"
                            }
                          },
                          "id": 60897,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2553:6:89",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2546:13:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 60895,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2532:13:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (uint256[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 60893,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2536:7:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 60894,
                          "nodeType": "ArrayTypeName",
                          "src": "2536:9:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        }
                      },
                      "id": 60898,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2532:28:89",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "src": "2526:34:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "id": 60900,
                  "nodeType": "ExpressionStatement",
                  "src": "2526:34:89"
                },
                {
                  "body": {
                    "id": 60924,
                    "nodeType": "Block",
                    "src": "2607:73:89",
                    "statements": [
                      {
                        "expression": {
                          "id": 60922,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 60911,
                              "name": "ids",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60890,
                              "src": "2615:3:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 60913,
                            "indexExpression": {
                              "id": 60912,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60902,
                              "src": "2619:1:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2615:6:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 60916,
                                  "name": "LibRNSDomain",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59310,
                                  "src": "2642:12:89",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$59310_$",
                                    "typeString": "type(library LibRNSDomain)"
                                  }
                                },
                                "id": 60917,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2655:6:89",
                                "memberName": "RON_ID",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 59273,
                                "src": "2642:19:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 60918,
                                  "name": "labels",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60886,
                                  "src": "2663:6:89",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                                    "typeString": "string calldata[] calldata"
                                  }
                                },
                                "id": 60920,
                                "indexExpression": {
                                  "id": 60919,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60902,
                                  "src": "2670:1:89",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2663:9:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              ],
                              "expression": {
                                "id": 60914,
                                "name": "LibRNSDomain",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59310,
                                "src": "2624:12:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_LibRNSDomain_$59310_$",
                                  "typeString": "type(library LibRNSDomain)"
                                }
                              },
                              "id": 60915,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2637:4:89",
                              "memberName": "toId",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 59289,
                              "src": "2624:17:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                                "typeString": "function (uint256,string memory) pure returns (uint256)"
                              }
                            },
                            "id": 60921,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2624:49:89",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2615:58:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60923,
                        "nodeType": "ExpressionStatement",
                        "src": "2615:58:89"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60907,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 60904,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60902,
                      "src": "2583:1:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 60905,
                        "name": "labels",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60886,
                        "src": "2587:6:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "string calldata[] calldata"
                        }
                      },
                      "id": 60906,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2594:6:89",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2587:13:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2583:17:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60925,
                  "initializationExpression": {
                    "assignments": [
                      60902
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 60902,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2580:1:89",
                        "nodeType": "VariableDeclaration",
                        "scope": 60925,
                        "src": "2572:9:89",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 60901,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2572:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 60903,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2572:9:89"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 60909,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "2602:3:89",
                      "subExpression": {
                        "id": 60908,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60902,
                        "src": "2604:1:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60910,
                    "nodeType": "ExpressionStatement",
                    "src": "2602:3:89"
                  },
                  "nodeType": "ForStatement",
                  "src": "2567:113:89"
                }
              ]
            },
            "documentation": {
              "id": 60883,
              "nodeType": "StructuredDocumentation",
              "src": "2232:201:89",
              "text": " @dev Converts an array of labels to an array of corresponding RNS domain IDs.\n @param labels The array of labels to be converted to IDs.\n @return ids The array of RNS domain IDs."
            },
            "functionSelector": "71e8704d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toIds",
            "nameLocation": "2445:5:89",
            "parameters": {
              "id": 60887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60886,
                  "mutability": "mutable",
                  "name": "labels",
                  "nameLocation": "2469:6:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60927,
                  "src": "2451:24:89",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60884,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "2451:6:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 60885,
                    "nodeType": "ArrayTypeName",
                    "src": "2451:8:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2450:26:89"
            },
            "returnParameters": {
              "id": 60891,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60890,
                  "mutability": "mutable",
                  "name": "ids",
                  "nameLocation": "2515:3:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 60927,
                  "src": "2498:20:89",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 60888,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2498:7:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 60889,
                    "nodeType": "ArrayTypeName",
                    "src": "2498:9:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2497:22:89"
            },
            "scope": 60928,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 60752,
              "name": "Ownable",
              "nameLocations": [
                "334:7:89"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46487,
              "src": "334:7:89"
            },
            "id": 60753,
            "nodeType": "InheritanceSpecifier",
            "src": "334:7:89"
          }
        ],
        "canonicalName": "RNSOperation",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          60928,
          46487,
          49552
        ],
        "name": "RNSOperation",
        "nameLocation": "318:12:89",
        "scope": 60929,
        "usedErrors": [],
        "usedEvents": [
          46388
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 22371222,
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610d8d380380610d8d83398101604081905261002f916100bc565b61003833610054565b6001600160a01b03928316608052821660c0521660a052610109565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100b957600080fd5b50565b6000806000606084860312156100d157600080fd5b83516100dc816100a4565b60208501519093506100ed816100a4565b60408501519092506100fe816100a4565b809150509250925092565b60805160a05160c051610c3a6101536000396000818161017601526101c601526000818160a8015261034b015260008181610127015281816102d701526104120152610c3a6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a61461014957806371e8704d146101515780637d9f6db5146101715780638da5cb5b14610198578063f2fde38b146101a957600080fd5b806304f3bcec146100a357806319edebf2146100e757806338d73f63146100fc5780635ca032941461010f578063663b44c514610122575b600080fd5b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fa6100f536600461074d565b6101bc565b005b6100fa61010a3660046107e7565b61026e565b6100fa61011d36600461085d565b610408565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6100fa61049e565b61016461015f3660046108b4565b6104b2565b6040516100de9190610931565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166100ca565b6100fa6101b7366004610967565b6105ba565b6101c4610633565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a3823f86866101ff87876104b2565b856040518563ffffffff1660e01b815260040161021f9493929190610982565b6000604051808303816000875af115801561023e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102669190810190610a0c565b505050505050565b610276610633565b8184146102ca5760405162461bcd60e51b815260206004820152601d60248201527f524e534f7065726174696f6e3a206c656e677468206d69736d6174636800000060448201526064015b60405180910390fd5b60005b82811015610266577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630570891f7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d68886868581811061033757610337610ad1565b90506020028101906103499190610ae7565b7f00000000000000000000000000000000000000000000000000000000000000008b8b8881811061037c5761037c610ad1565b90506020020160208101906103919190610967565b886040518763ffffffff1660e01b81526004016103b396959493929190610b2e565b60408051808303816000875af11580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f59190610b8b565b50508061040190610bb9565b90506102cd565b610410610633565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ec63b01f61044985856104b2565b836040518363ffffffff1660e01b8152600401610467929190610be0565b600060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b50505050505050565b6104a6610633565b6104b0600061068d565b565b60608167ffffffffffffffff8111156104cd576104cd6109eb565b6040519080825280602002602001820160405280156104f6578160200160208202803683370190505b50905060005b828110156105b3576105867fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d68885858481811061053a5761053a610ad1565b905060200281019061054c9190610ae7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106dd92505050565b82828151811061059857610598610ad1565b60209081029190910101526105ac81610bb9565b90506104fc565b5092915050565b6105c2610633565b6001600160a01b0381166106275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c1565b6106308161068d565b50565b6000546001600160a01b031633146104b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000918252805160209182012090526040902090565b60008083601f84011261070557600080fd5b50813567ffffffffffffffff81111561071d57600080fd5b6020830191508360208260051b850101111561073857600080fd5b9250929050565b801515811461063057600080fd5b60008060008060006060868803121561076557600080fd5b853567ffffffffffffffff8082111561077d57600080fd5b61078989838a016106f3565b909750955060208801359150808211156107a257600080fd5b506107af888289016106f3565b90945092505060408601356107c38161073f565b809150509295509295909350565b67ffffffffffffffff8116811461063057600080fd5b6000806000806000606086880312156107ff57600080fd5b853567ffffffffffffffff8082111561081757600080fd5b61082389838a016106f3565b9097509550602088013591508082111561083c57600080fd5b50610849888289016106f3565b90945092505060408601356107c3816107d1565b60008060006040848603121561087257600080fd5b833567ffffffffffffffff81111561088957600080fd5b610895868287016106f3565b90945092505060208401356108a98161073f565b809150509250925092565b600080602083850312156108c757600080fd5b823567ffffffffffffffff8111156108de57600080fd5b6108ea858286016106f3565b90969095509350505050565b600081518084526020808501945080840160005b838110156109265781518752958201959082019060010161090a565b509495945050505050565b60208152600061094460208301846108f6565b9392505050565b80356001600160a01b038116811461096257600080fd5b919050565b60006020828403121561097957600080fd5b6109448261094b565b6060808252810184905260008560808301825b878110156109c3576001600160a01b036109ae8461094b565b16825260209283019290910190600101610995565b5083810360208501526109d681876108f6565b92505050821515604083015295945050505050565b634e487b7160e01b600052604160045260246000fd5b80516109628161073f565b60006020808385031215610a1f57600080fd5b825167ffffffffffffffff80821115610a3757600080fd5b818501915085601f830112610a4b57600080fd5b815181811115610a5d57610a5d6109eb565b8060051b604051601f19603f83011681018181108582111715610a8257610a826109eb565b604052918252848201925083810185019188831115610aa057600080fd5b938501935b82851015610ac557610ab685610a01565b84529385019392850192610aa5565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610afe57600080fd5b83018035915067ffffffffffffffff821115610b1957600080fd5b60200191503681900382131561073857600080fd5b86815260a060208201528460a0820152848660c0830137600060c08683018101919091526001600160a01b03948516604083015292909316606084015267ffffffffffffffff166080830152601f909201601f1916010192915050565b60008060408385031215610b9e57600080fd5b8251610ba9816107d1565b6020939093015192949293505050565b600060018201610bd957634e487b7160e01b600052601160045260246000fd5b5060010190565b604081526000610bf360408301856108f6565b90508215156020830152939250505056fea2646970667358221220740b9574a3a60d51c9153c3c1fc4d37b014870c53a5b57950a6a050a94f9d1ba64736f6c63430008150033",
  "chainId": 2021,
  "contractName": "RNSOperation",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a61461014957806371e8704d146101515780637d9f6db5146101715780638da5cb5b14610198578063f2fde38b146101a957600080fd5b806304f3bcec146100a357806319edebf2146100e757806338d73f63146100fc5780635ca032941461010f578063663b44c514610122575b600080fd5b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fa6100f536600461074d565b6101bc565b005b6100fa61010a3660046107e7565b61026e565b6100fa61011d36600461085d565b610408565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6100fa61049e565b61016461015f3660046108b4565b6104b2565b6040516100de9190610931565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166100ca565b6100fa6101b7366004610967565b6105ba565b6101c4610633565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a3823f86866101ff87876104b2565b856040518563ffffffff1660e01b815260040161021f9493929190610982565b6000604051808303816000875af115801561023e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102669190810190610a0c565b505050505050565b610276610633565b8184146102ca5760405162461bcd60e51b815260206004820152601d60248201527f524e534f7065726174696f6e3a206c656e677468206d69736d6174636800000060448201526064015b60405180910390fd5b60005b82811015610266577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630570891f7fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d68886868581811061033757610337610ad1565b90506020028101906103499190610ae7565b7f00000000000000000000000000000000000000000000000000000000000000008b8b8881811061037c5761037c610ad1565b90506020020160208101906103919190610967565b886040518763ffffffff1660e01b81526004016103b396959493929190610b2e565b60408051808303816000875af11580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f59190610b8b565b50508061040190610bb9565b90506102cd565b610410610633565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ec63b01f61044985856104b2565b836040518363ffffffff1660e01b8152600401610467929190610be0565b600060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b50505050505050565b6104a6610633565b6104b0600061068d565b565b60608167ffffffffffffffff8111156104cd576104cd6109eb565b6040519080825280602002602001820160405280156104f6578160200160208202803683370190505b50905060005b828110156105b3576105867fba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d68885858481811061053a5761053a610ad1565b905060200281019061054c9190610ae7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106dd92505050565b82828151811061059857610598610ad1565b60209081029190910101526105ac81610bb9565b90506104fc565b5092915050565b6105c2610633565b6001600160a01b0381166106275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c1565b6106308161068d565b50565b6000546001600160a01b031633146104b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000918252805160209182012090526040902090565b60008083601f84011261070557600080fd5b50813567ffffffffffffffff81111561071d57600080fd5b6020830191508360208260051b850101111561073857600080fd5b9250929050565b801515811461063057600080fd5b60008060008060006060868803121561076557600080fd5b853567ffffffffffffffff8082111561077d57600080fd5b61078989838a016106f3565b909750955060208801359150808211156107a257600080fd5b506107af888289016106f3565b90945092505060408601356107c38161073f565b809150509295509295909350565b67ffffffffffffffff8116811461063057600080fd5b6000806000806000606086880312156107ff57600080fd5b853567ffffffffffffffff8082111561081757600080fd5b61082389838a016106f3565b9097509550602088013591508082111561083c57600080fd5b50610849888289016106f3565b90945092505060408601356107c3816107d1565b60008060006040848603121561087257600080fd5b833567ffffffffffffffff81111561088957600080fd5b610895868287016106f3565b90945092505060208401356108a98161073f565b809150509250925092565b600080602083850312156108c757600080fd5b823567ffffffffffffffff8111156108de57600080fd5b6108ea858286016106f3565b90969095509350505050565b600081518084526020808501945080840160005b838110156109265781518752958201959082019060010161090a565b509495945050505050565b60208152600061094460208301846108f6565b9392505050565b80356001600160a01b038116811461096257600080fd5b919050565b60006020828403121561097957600080fd5b6109448261094b565b6060808252810184905260008560808301825b878110156109c3576001600160a01b036109ae8461094b565b16825260209283019290910190600101610995565b5083810360208501526109d681876108f6565b92505050821515604083015295945050505050565b634e487b7160e01b600052604160045260246000fd5b80516109628161073f565b60006020808385031215610a1f57600080fd5b825167ffffffffffffffff80821115610a3757600080fd5b818501915085601f830112610a4b57600080fd5b815181811115610a5d57610a5d6109eb565b8060051b604051601f19603f83011681018181108582111715610a8257610a826109eb565b604052918252848201925083810185019188831115610aa057600080fd5b938501935b82851015610ac557610ab685610a01565b84529385019392850192610aa5565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610afe57600080fd5b83018035915067ffffffffffffffff821115610b1957600080fd5b60200191503681900382131561073857600080fd5b86815260a060208201528460a0820152848660c0830137600060c08683018101919091526001600160a01b03948516604083015292909316606084015267ffffffffffffffff166080830152601f909201601f1916010192915050565b60008060408385031215610b9e57600080fd5b8251610ba9816107d1565b6020939093015192949293505050565b600060018201610bd957634e487b7160e01b600052601160045260246000fd5b5060010190565b604081526000610bf360408301856108f6565b90508215156020830152939250505056fea2646970667358221220740b9574a3a60d51c9153c3c1fc4d37b014870c53a5b57950a6a050a94f9d1ba64736f6c63430008150033",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "bulkMint(address[],string[],uint64)": {
        "details": "Allows the owner to mint RNS domains in bulk with specified labels and durations.",
        "params": {
          "duration": "The duration for which the domains will be owned.",
          "labels": "The array of labels for the minted domains.",
          "tos": "The array of addresses to receive the minted domains."
        }
      },
      "bulkSetProtected(string[],bool)": {
        "details": "Allows the owner to set the protection status of multiple RNS domains in bulk.",
        "params": {
          "labels": "The array of labels for the domains.",
          "shouldProtect": "A boolean indicating whether to protect or unprotect the specified domains."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reclaimUnbiddedNames(address[],string[],bool)": {
        "details": "Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.",
        "params": {
          "allowFailure": "Flag to indicate whether to allow failure if a domain is already being bid on.",
          "labels": "The array of labels for the unbidded domains to be reclaimed.",
          "tos": "The array of addresses to which the unbidded domains will be transferred."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "toIds(string[])": {
        "details": "Converts an array of labels to an array of corresponding RNS domain IDs.",
        "params": {
          "labels": "The array of labels to be converted to IDs."
        },
        "returns": {
          "ids": "The array of RNS domain IDs."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INSUnified\",\"name\":\"rns_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver_\",\"type\":\"address\"},{\"internalType\":\"contract INSAuction\",\"name\":\"auction_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"contract INSAuction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"bulkMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"shouldProtect\",\"type\":\"bool\"}],\"name\":\"bulkSetProtected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"}],\"name\":\"reclaimUnbiddedNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rns\",\"outputs\":[{\"internalType\":\"contract INSUnified\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"}],\"name\":\"toIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkMint(address[],string[],uint64)\":{\"details\":\"Allows the owner to mint RNS domains in bulk with specified labels and durations.\",\"params\":{\"duration\":\"The duration for which the domains will be owned.\",\"labels\":\"The array of labels for the minted domains.\",\"tos\":\"The array of addresses to receive the minted domains.\"}},\"bulkSetProtected(string[],bool)\":{\"details\":\"Allows the owner to set the protection status of multiple RNS domains in bulk.\",\"params\":{\"labels\":\"The array of labels for the domains.\",\"shouldProtect\":\"A boolean indicating whether to protect or unprotect the specified domains.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reclaimUnbiddedNames(address[],string[],bool)\":{\"details\":\"Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.\",\"params\":{\"allowFailure\":\"Flag to indicate whether to allow failure if a domain is already being bid on.\",\"labels\":\"The array of labels for the unbidded domains to be reclaimed.\",\"tos\":\"The array of addresses to which the unbidded domains will be transferred.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"toIds(string[])\":{\"details\":\"Converts an array of labels to an array of corresponding RNS domain IDs.\",\"params\":{\"labels\":\"The array of labels to be converted to IDs.\"},\"returns\":{\"ids\":\"The array of RNS domain IDs.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/RNSOperation.sol\":\"RNSOperation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/=lib/pyth-sdk-solidity/\",\":@rns-contracts/=src/\",\":buffer/=lib/buffer/contracts/\",\":contract-template/=lib/contract-template/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/interfaces/INSAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { INSUnified } from \\\"./INSUnified.sol\\\";\\nimport { EventRange } from \\\"../libraries/LibEventRange.sol\\\";\\n\\ninterface INSAuction {\\n  error NotYetEnded();\\n  error NoOneBidded();\\n  error NullAssignment();\\n  error AlreadyBidding(uint256 id);\\n  error RatioIsTooLarge();\\n  error NameNotReserved();\\n  error InvalidEventRange();\\n  error QueryIsNotInPeriod();\\n  error InsufficientAmount();\\n  error InvalidArrayLength();\\n  error ContractBidderIsForbidden();\\n  error EventIsNotCreatedOrAlreadyStarted();\\n\\n  struct Bid {\\n    address payable bidder;\\n    uint256 price;\\n    uint256 timestamp;\\n    uint256 claimedAt;\\n  }\\n\\n  struct DomainAuction {\\n    bytes32 auctionId;\\n    uint256 startingPrice;\\n    Bid bid;\\n  }\\n\\n  /// @dev Emitted when an auction is set.\\n  event AuctionEventSet(bytes32 indexed auctionId, EventRange range);\\n  /// @dev Emitted when the labels are listed for auction.\\n  event LabelsListed(bytes32 indexed auctionId, uint256[] ids, uint256[] startingPrices);\\n  /// @dev Emitted when a bid is placed for a name.\\n  event BidPlaced(\\n    bytes32 indexed auctionId,\\n    uint256 indexed id,\\n    uint256 price,\\n    address payable bidder,\\n    uint256 previousPrice,\\n    address previousBidder\\n  );\\n  /// @dev Emitted when the treasury is updated.\\n  event TreasuryUpdated(address indexed addr);\\n  /// @dev Emitted when bid gap ratio is updated.\\n  event BidGapRatioUpdated(uint256 ratio);\\n\\n  /**\\n   * @dev The maximum expiry duration\\n   */\\n  function MAX_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev The maximum expiry duration of a domain after transferring to bidder.\\n   */\\n  function MAX_AUCTION_DOMAIN_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev Returns the operator role.\\n   */\\n  function OPERATOR_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\\n   */\\n  function MAX_PERCENTAGE() external pure returns (uint256);\\n\\n  /**\\n   * @dev The expiry duration of a domain after transferring to bidder.\\n   */\\n  function DOMAIN_EXPIRY_DURATION() external pure returns (uint64);\\n\\n  /**\\n   * @dev Claims domain names for auction.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   *\\n   * @param labels The domain names. Eg, ['foo'] for 'foo.ron'\\n   * @return ids The id corresponding for namehash of domain names.\\n   */\\n  function bulkRegister(string[] calldata labels) external returns (uint256[] memory ids);\\n\\n  /**\\n   * @dev Checks whether a domain name is currently reserved for auction or not.\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function reserved(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @dev Claim unbidded names and transfer them to the specified addresses.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   *\\n   * @param tos The array of addresses to transfer domain names to.\\n   * @param ids The id corresponding for namehash of domain names.\\n   * @param allowFailure Flag to indicate whether to allow failure if a domain is already being bid on.\\n   * @return claimeds An array indicating whether each domain name was successfully claimed.\\n   */\\n  function bulkClaimUnbiddedNames(address[] calldata tos, uint256[] calldata ids, bool allowFailure)\\n    external\\n    returns (bool[] memory claimeds);\\n\\n  /**\\n   * @dev Creates a new auction to sale with a specific time period.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin.\\n   *\\n   * Emits an event {AuctionEventSet}.\\n   *\\n   * @return auctionId The auction id\\n   * @notice Please use the method `setAuctionNames` to list all the reserved names.\\n   */\\n  function createAuctionEvent(EventRange calldata range) external returns (bytes32 auctionId);\\n\\n  /**\\n   * @dev Updates the auction details.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin.\\n   *\\n   * Emits an event {AuctionEventSet}.\\n   */\\n  function setAuctionEvent(bytes32 auctionId, EventRange calldata range) external;\\n\\n  /**\\n   * @dev Returns the event range of an auction.\\n   */\\n  function getAuctionEvent(bytes32 auctionId) external view returns (EventRange memory);\\n\\n  /**\\n   * @dev Lists reserved names to sale in a specified auction.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract operator.\\n   * - Array length are matched and larger than 0.\\n   * - Only allow to set when the domain is:\\n   *   + Not in any auction.\\n   *   + Or, in the current auction.\\n   *   + Or, this name is not bided.\\n   *\\n   * Emits an event {LabelsListed}.\\n   *\\n   * Note: If the name is already listed, this method replaces with a new input value.\\n   *\\n   * @param ids The namehashes id of domain names. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function listNamesForAuction(bytes32 auctionId, uint256[] calldata ids, uint256[] calldata startingPrices) external;\\n\\n  /**\\n   * @dev Places a bid for a domain name.\\n   *\\n   * Requirements:\\n   * - The name is listed, or the auction is happening.\\n   * - The msg.value is larger than the current bid price or the auction starting price.\\n   *\\n   * Emits an event {BidPlaced}.\\n   *\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function placeBid(uint256 id) external payable;\\n\\n  /**\\n   * @dev Returns the highest bid and address of the bidder.\\n   * @param id The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function getAuction(uint256 id) external view returns (DomainAuction memory, uint256 beatPrice);\\n\\n  /**\\n   * @dev Bulk claims the bid name.\\n   *\\n   * Requirements:\\n   * - Must be called after ended time.\\n   * - The method caller can be anyone.\\n   *\\n   * @param ids The namehash id of domain name. Eg, namehash('foo.ron') for 'foo.ron'\\n   */\\n  function bulkClaimBidNames(uint256[] calldata ids) external returns (uint256[] memory claimedAts);\\n\\n  /**\\n   * @dev Returns the treasury.\\n   */\\n  function getTreasury() external view returns (address);\\n\\n  /**\\n   * @dev Returns the gap ratio between 2 bids with the starting price. Value in range [0;100_00] is 0%-100%.\\n   */\\n  function getBidGapRatio() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the treasury.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin\\n   *\\n   * Emits an event {TreasuryUpdated}.\\n   */\\n  function setTreasury(address payable) external;\\n\\n  /**\\n   * @dev Sets commission ratio. Value in range [0;100_00] is 0%-100%.\\n   *\\n   * Requirements:\\n   * - The method caller must be admin\\n   *\\n   * Emits an event {BidGapRatioUpdated}.\\n   */\\n  function setBidGapRatio(uint256) external;\\n\\n  /**\\n   * @dev Returns RNSUnified contract.\\n   */\\n  function getRNSUnified() external view returns (INSUnified);\\n}\\n\",\"keccak256\":\"0x406d5d682af4652b6c9c26948a4d4e31b6b88c056177973bb5f7d32141ae658c\",\"license\":\"MIT\"},\"src/interfaces/INSUnified.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport { IAccessControlEnumerable } from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport { ModifyingIndicator } from \\\"../types/ModifyingIndicator.sol\\\";\\n\\ninterface INSUnified is IAccessControlEnumerable, IERC721Metadata {\\n  /// @dev Error: The provided token id is expired.\\n  error Expired();\\n  /// @dev Error: The provided token id is unexists.\\n  error Unexists();\\n  /// @dev Error: The provided token id's depth level is greater than 3.\\n  error ThirdLevelDomainUnallowed();\\n  /// @dev Error: The provided id expiry is greater than parent id expiry.\\n  error ExceedParentExpiry();\\n  /// @dev Error: The provided name is unavailable for registration.\\n  error Unavailable();\\n  /// @dev Error: The sender lacks the necessary permissions.\\n  error Unauthorized();\\n  /// @dev Error: Missing controller role required for modification.\\n  error MissingControllerRole();\\n  /// @dev Error: Attempting to set an immutable field, which cannot be modified.\\n  error CannotSetImmutableField();\\n  /// @dev Error: Missing protected settler role required for modification.\\n  error MissingProtectedSettlerRole();\\n  /// @dev Error: Attempting to set an expiry time that is not larger than the previous one.\\n  error ExpiryTimeMustBeLargerThanTheOldOne();\\n  /// @dev Error: The provided name must be registered or is in a grace period.\\n  error NameMustBeRegisteredOrInGracePeriod();\\n\\n  /**\\n   * | Fields\\\\Idc | Modifying Indicator |\\n   * | ---------- | ------------------- |\\n   * | depth      | 0b00000001          |\\n   * | parentId   | 0b00000010          |\\n   * | label      | 0b00000100          |\\n   */\\n  struct ImmutableRecord {\\n    // The level-th of a domain.\\n    uint8 depth;\\n    // The node of parent token. Eg, parent node of vip.duke.ron equals to namehash('duke.ron')\\n    uint256 parentId;\\n    // The label of a domain. Eg, label is vip for domain vip.duke.ron\\n    string label;\\n  }\\n\\n  /**\\n   * | Fields\\\\Idc,Roles | Modifying Indicator | Controller | Protected setter | (Parent) Owner/Spender |\\n   * | ---------------- | ------------------- | ---------- | ---------------- | ---------------------- |\\n   * | resolver         | 0b00001000          | x          |                  | x                      |\\n   * | owner            | 0b00010000          | x          |                  | x                      |\\n   * | expiry           | 0b00100000          | x          |                  |                        |\\n   * | protected        | 0b01000000          |            | x                |                        |\\n   * Note: (Parent) Owner/Spender means parent owner or current owner or current token spender.\\n   */\\n  struct MutableRecord {\\n    // The resolver address.\\n    address resolver;\\n    // The record owner. This field must equal to the owner of token.\\n    address owner;\\n    // Expiry timestamp.\\n    uint64 expiry;\\n    // Flag indicating whether the token is protected or not.\\n    bool protected;\\n  }\\n\\n  struct Record {\\n    ImmutableRecord immut;\\n    MutableRecord mut;\\n  }\\n\\n  /// @dev Emitted when a base URI is updated.\\n  event BaseURIUpdated(address indexed operator, string newURI);\\n  /// @dev Emitted when the grace period for all domain is updated.\\n  event GracePeriodUpdated(address indexed operator, uint64 newGracePeriod);\\n\\n  /**\\n   * @dev Emitted when the record of node is updated.\\n   * @param indicator The binary index of updated fields. Eg, 0b10101011 means fields at position 1, 2, 4, 6, 8 (right\\n   * to left) needs to be updated.\\n   * @param record The updated fields.\\n   */\\n  event RecordUpdated(uint256 indexed node, ModifyingIndicator indicator, Record record);\\n\\n  /**\\n   * @dev Returns the controller role.\\n   * @notice Can set all fields {Record.mut} in token record, excepting {Record.mut.protected}.\\n   */\\n  function CONTROLLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the protected setter role.\\n   * @notice Can set field {Record.mut.protected} in token record by using method `bulkSetProtected`.\\n   */\\n  function PROTECTED_SETTLER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the reservation role.\\n   * @notice Never expire for token owner has this role.\\n   */\\n  function RESERVATION_ROLE() external pure returns (bytes32);\\n\\n  /**\\n   * @dev Returns the max expiry value.\\n   */\\n  function MAX_EXPIRY() external pure returns (uint64);\\n\\n  /**\\n   * @dev Returns the name hash output of a domain.\\n   */\\n  function namehash(string memory domain) external pure returns (bytes32 node);\\n\\n  /**\\n   * @dev Returns true if the specified name is available for registration.\\n   * Note: Only available after passing the grace period.\\n   */\\n  function available(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the grace period in second(s).\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function getGracePeriod() external view returns (uint64);\\n\\n  /**\\n   * @dev Returns the total minted ids.\\n   * Note: Burning id will not affect `totalMinted`.\\n   */\\n  function totalMinted() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the grace period in second(s).\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Note: This period affects the availability of the domain.\\n   */\\n  function setGracePeriod(uint64) external;\\n\\n  /**\\n   * @dev Sets the base uri.\\n   *\\n   * Requirements:\\n   * - The method caller must be contract owner.\\n   *\\n   */\\n  function setBaseURI(string calldata baseTokenURI) external;\\n\\n  /**\\n   * @dev Mints token for subnode.\\n   *\\n   * Requirements:\\n   * - The token must be available.\\n   * - The method caller must be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   *\\n   * @param parentId The parent node to mint or create subnode.\\n   * @param label The domain label. Eg, label is duke for domain duke.ron.\\n   * @param resolver The resolver address.\\n   * @param owner The token owner.\\n   * @param duration Duration in second(s) to expire. Leave 0 to set as parent.\\n   */\\n  function mint(uint256 parentId, string calldata label, address resolver, address owner, uint64 duration)\\n    external\\n    returns (uint64 expiryTime, uint256 id);\\n\\n  /**\\n   * @dev Returns all record of a domain.\\n   * Reverts if the token is non existent.\\n   */\\n  function getRecord(uint256 id) external view returns (Record memory record);\\n\\n  /**\\n   * @dev Returns the domain name of id.\\n   */\\n  function getDomain(uint256 id) external view returns (string memory domain);\\n\\n  /**\\n   * @dev Returns whether the requester is able to modify the record based on the updated index.\\n   * Note: This method strictly follows the permission of struct {MutableRecord}.\\n   */\\n  function canSetRecord(address requester, uint256 id, ModifyingIndicator indicator)\\n    external\\n    view\\n    returns (bool, bytes4 error);\\n\\n  /**\\n   * @dev Sets record of existing token. Update operation for {Record.mut}.\\n   *\\n   * Requirements:\\n   * - The method caller must have role based on the corresponding `indicator`. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setRecord(uint256 id, ModifyingIndicator indicator, MutableRecord calldata record) external;\\n\\n  /**\\n   * @dev Reclaims ownership. Update operation for {Record.mut.owner}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   * - The method caller should be (parent) owner or approved spender. See struct {MutableRecord}.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function reclaim(uint256 id, address owner) external;\\n\\n  /**\\n   * @dev Renews token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller should have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function renew(uint256 id, uint64 duration) external returns (uint64 expiry);\\n\\n  /**\\n   * @dev Sets expiry time for a token. Update operation for {Record.mut.expiry}.\\n   *\\n   * Requirements:\\n   * - The method caller must have controller role.\\n   *\\n   * Emits an event {RecordUpdated}.\\n   */\\n  function setExpiry(uint256 id, uint64 expiry) external;\\n\\n  /**\\n   * @dev Sets the protected status of a list of ids. Update operation for {Record.mut.protected}.\\n   *\\n   * Requirements:\\n   * - The method caller must have protected setter role.\\n   *\\n   * Emits events {RecordUpdated}.\\n   */\\n  function bulkSetProtected(uint256[] calldata ids, bool protected) external;\\n}\\n\",\"keccak256\":\"0x98e2e77490d7fd6d87a8e9800223bb2f60a33e7338e2f65f64a3aed4737c035c\",\"license\":\"MIT\"},\"src/libraries/LibEventRange.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct EventRange {\\n  uint256 startedAt;\\n  uint256 endedAt;\\n}\\n\\nlibrary LibEventRange {\\n  /**\\n   * @dev Checks whether the event range is valid.\\n   */\\n  function valid(EventRange calldata range) internal pure returns (bool) {\\n    return range.startedAt <= range.endedAt;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current range is not yet started.\\n   */\\n  function isNotYetStarted(EventRange memory range) internal view returns (bool) {\\n    return block.timestamp < range.startedAt;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current range is ended or not.\\n   */\\n  function isEnded(EventRange memory range) internal view returns (bool) {\\n    return range.endedAt <= block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Returns whether the current block is in period.\\n   */\\n  function isInPeriod(EventRange memory range) internal view returns (bool) {\\n    return range.startedAt <= block.timestamp && block.timestamp < range.endedAt;\\n  }\\n}\\n\",\"keccak256\":\"0x95bf015c4245919cbcbcd810dd597fdb23eb4e58b62df8ef74b1c8c60a969bea\",\"license\":\"MIT\"},\"src/libraries/LibRNSDomain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LibRNSDomain {\\n  /// @dev Value equals to namehash('ron')\\n  uint256 internal constant RON_ID = 0xba69923fa107dbf5a25a073a10b7c9216ae39fbadc95dc891d460d9ae315d688;\\n  /// @dev Value equals to namehash('addr.reverse')\\n  uint256 internal constant ADDR_REVERSE_ID = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n  /**\\n   * @dev Calculate the corresponding id given parentId and label.\\n   */\\n  function toId(uint256 parentId, string memory label) internal pure returns (uint256 id) {\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(0x0, parentId)\\n      mstore(0x20, keccak256(add(label, 32), mload(label)))\\n      id := keccak256(0x0, 64)\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the hash of the label.\\n   */\\n  function hashLabel(string memory label) internal pure returns (bytes32 hashed) {\\n    assembly (\\\"memory-safe\\\") {\\n      hashed := keccak256(add(label, 32), mload(label))\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculate the RNS namehash of a str.\\n   */\\n  function namehash(string memory str) internal pure returns (bytes32 hashed) {\\n    // notice: this method is case-sensitive, ensure the string is lowercased before calling this method\\n    assembly (\\\"memory-safe\\\") {\\n      // load str length\\n      let len := mload(str)\\n      // returns bytes32(0x0) if length is zero\\n      if iszero(iszero(len)) {\\n        let hashedLen\\n        // compute pointer to str[0]\\n        let head := add(str, 32)\\n        // compute pointer to str[length - 1]\\n        let tail := add(head, sub(len, 1))\\n        // cleanup dirty bytes if contains any\\n        mstore(0x0, 0)\\n        // loop backwards from `tail` to `head`\\n        for { let i := tail } iszero(lt(i, head)) { i := sub(i, 1) } {\\n          // check if `i` is `head`\\n          let isHead := eq(i, head)\\n          // check if `str[i-1]` is \\\".\\\"\\n          // `0x2e` == bytes1(\\\".\\\")\\n          let isDotNext := eq(shr(248, mload(sub(i, 1))), 0x2e)\\n          if or(isHead, isDotNext) {\\n            // size = distance(length, i) - hashedLength + 1\\n            let size := add(sub(sub(tail, i), hashedLen), 1)\\n            mstore(0x20, keccak256(i, size))\\n            mstore(0x0, keccak256(0x0, 64))\\n            // skip \\\".\\\" thereby + 1\\n            hashedLen := add(hashedLen, add(size, 1))\\n          }\\n        }\\n      }\\n      hashed := mload(0x0)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x715029b2b420c6ec00bc1f939b837acf45d247fde8426089575b0e7b5e84518b\",\"license\":\"MIT\"},\"src/types/ModifyingIndicator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype ModifyingIndicator is uint256;\\n\\nusing { hasAny } for ModifyingIndicator global;\\nusing { or as | } for ModifyingIndicator global;\\nusing { and as & } for ModifyingIndicator global;\\nusing { eq as == } for ModifyingIndicator global;\\nusing { not as ~ } for ModifyingIndicator global;\\nusing { xor as ^ } for ModifyingIndicator global;\\nusing { neq as != } for ModifyingIndicator global;\\n\\n/// @dev Indicator for modifying immutable fields: Depth, ParentId, Label. See struct {INSUnified.ImmutableRecord}.\\nModifyingIndicator constant IMMUTABLE_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x7);\\n\\n/// @dev Indicator for modifying user fields: Resolver, Owner. See struct {INSUnified.MutableRecord}.\\nModifyingIndicator constant USER_FIELDS_INDICATOR = ModifyingIndicator.wrap(0x18);\\n\\n/// @dev Indicator when modifying all of the fields in {ModifyingField}.\\nModifyingIndicator constant ALL_FIELDS_INDICATOR = ModifyingIndicator.wrap(type(uint256).max);\\n\\nfunction eq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return ModifyingIndicator.unwrap(self) == ModifyingIndicator.unwrap(other);\\n}\\n\\nfunction neq(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return !eq(self, other);\\n}\\n\\nfunction xor(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) ^ ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction not(ModifyingIndicator self) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(~ModifyingIndicator.unwrap(self));\\n}\\n\\nfunction or(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) | ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction and(ModifyingIndicator self, ModifyingIndicator other) pure returns (ModifyingIndicator) {\\n  return ModifyingIndicator.wrap(ModifyingIndicator.unwrap(self) & ModifyingIndicator.unwrap(other));\\n}\\n\\nfunction hasAny(ModifyingIndicator self, ModifyingIndicator other) pure returns (bool) {\\n  return self & other != ModifyingIndicator.wrap(0);\\n}\\n\",\"keccak256\":\"0x2e42fbba358c470ff6b57268367d248f0e2fcf8d7142d762688f7aef5efae7ee\",\"license\":\"MIT\"},\"src/utils/RNSOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { INSUnified } from \\\"../interfaces/INSUnified.sol\\\";\\nimport { INSAuction } from \\\"../interfaces/INSAuction.sol\\\";\\nimport { LibRNSDomain } from \\\"../libraries/LibRNSDomain.sol\\\";\\n\\ncontract RNSOperation is Ownable {\\n  INSUnified public immutable rns;\\n  address public immutable resolver;\\n  INSAuction public immutable auction;\\n\\n  constructor(INSUnified rns_, address resolver_, INSAuction auction_) {\\n    rns = rns_;\\n    auction = auction_;\\n    resolver = resolver_;\\n  }\\n\\n  /**\\n   * @dev Allows the owner to mint RNS domains in bulk with specified labels and durations.\\n   * @param tos The array of addresses to receive the minted domains.\\n   * @param labels The array of labels for the minted domains.\\n   * @param duration The duration for which the domains will be owned.\\n   */\\n  function bulkMint(address[] calldata tos, string[] calldata labels, uint64 duration) external onlyOwner {\\n    require(labels.length == tos.length, \\\"RNSOperation: length mismatch\\\");\\n\\n    for (uint256 i; i < labels.length; ++i) {\\n      rns.mint(LibRNSDomain.RON_ID, labels[i], resolver, tos[i], duration);\\n    }\\n  }\\n\\n  /**\\n   * @dev Allows the owner to set the protection status of multiple RNS domains in bulk.\\n   * @param labels The array of labels for the domains.\\n   * @param shouldProtect A boolean indicating whether to protect or unprotect the specified domains.\\n   */\\n  function bulkSetProtected(string[] calldata labels, bool shouldProtect) external onlyOwner {\\n    rns.bulkSetProtected(toIds(labels), shouldProtect);\\n  }\\n\\n  /**\\n   * @dev Allows the owner to reclaim unbidded RNS domain names and transfer them to specified addresses.\\n   * @param tos The array of addresses to which the unbidded domains will be transferred.\\n   * @param labels The array of labels for the unbidded domains to be reclaimed.\\n   * @param allowFailure Flag to indicate whether to allow failure if a domain is already being bid on.\\n   */\\n  function reclaimUnbiddedNames(address[] calldata tos, string[] calldata labels, bool allowFailure) external onlyOwner {\\n    auction.bulkClaimUnbiddedNames(tos, toIds(labels), allowFailure);\\n  }\\n\\n  /**\\n   * @dev Converts an array of labels to an array of corresponding RNS domain IDs.\\n   * @param labels The array of labels to be converted to IDs.\\n   * @return ids The array of RNS domain IDs.\\n   */\\n  function toIds(string[] calldata labels) public pure returns (uint256[] memory ids) {\\n    ids = new uint256[](labels.length);\\n\\n    for (uint256 i; i < labels.length; ++i) {\\n      ids[i] = LibRNSDomain.toId(LibRNSDomain.RON_ID, labels[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xff7a3cf6152d93c3d3f9b1c8a596f902b5314efa5a15aafcfd51c19b8170ba35\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 185289,
  "numDeployments": 2,
  "storageLayout": {
    "storage": [
      {
        "astId": 46382,
        "contract": "src/utils/RNSOperation.sol:RNSOperation",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  },
  "timestamp": 1700813759,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}