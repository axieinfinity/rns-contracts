{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "TotalSubStringTooLarge",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wordCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "shouldForbid",
          "type": "bool"
        }
      ],
      "name": "ForbiddenWordsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "name": "WordRangeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "containsBlacklistedWord",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "containsInvalidCharacter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "forbidden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "getAllSubStrings",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "subStrings",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWordRange",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "pack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "packed",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "strs",
          "type": "string[]"
        }
      ],
      "name": "packBulk",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "packeds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "packedWords",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "shouldForbid",
          "type": "bool"
        }
      ],
      "name": "setForbiddenWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "shouldForbid",
          "type": "bool"
        }
      ],
      "name": "setForbiddenWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "max",
          "type": "uint8"
        }
      ],
      "name": "setWordRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strlen",
          "type": "uint256"
        }
      ],
      "name": "totalSubString",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "address": "0xdB8eABf4F27baA9C5EBaD23fEe1cB12037B58065",
  "args": "0x",
  "ast": {
    "absolutePath": "src/NameChecker.sol",
    "id": 60160,
    "exportedSymbols": {
      "AccessControlEnumerable": [
        48607
      ],
      "BitMaps": [
        53744
      ],
      "INameChecker": [
        66745
      ],
      "Initializable": [
        49880
      ],
      "LibSubString": [
        68164
      ],
      "Math": [
        53189
      ],
      "NameChecker": [
        60159
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:6897:82",
    "nodes": [
      {
        "id": 59493,
        "nodeType": "PragmaDirective",
        "src": "32:24:82",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 59495,
        "nodeType": "ImportDirective",
        "src": "58:101:82",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol",
        "file": "@openzeppelin/contracts/access/AccessControlEnumerable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60160,
        "sourceUnit": 48608,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59494,
              "name": "AccessControlEnumerable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 48607,
              "src": "67:23:82",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59497,
        "nodeType": "ImportDirective",
        "src": "160:86:82",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60160,
        "sourceUnit": 49881,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59496,
              "name": "Initializable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 49880,
              "src": "169:13:82",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59499,
        "nodeType": "ImportDirective",
        "src": "247:76:82",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol",
        "file": "@openzeppelin/contracts/utils/structs/BitMaps.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60160,
        "sourceUnit": 53745,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59498,
              "name": "BitMaps",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53744,
              "src": "256:7:82",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59502,
        "nodeType": "ImportDirective",
        "src": "324:66:82",
        "nodes": [],
        "absolutePath": "src/libraries/LibSubString.sol",
        "file": "./libraries/LibSubString.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60160,
        "sourceUnit": 68165,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59500,
              "name": "Math",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53189,
              "src": "333:4:82",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 59501,
              "name": "LibSubString",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 68164,
              "src": "339:12:82",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59504,
        "nodeType": "ImportDirective",
        "src": "391:61:82",
        "nodes": [],
        "absolutePath": "src/interfaces/INameChecker.sol",
        "file": "./interfaces/INameChecker.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 60160,
        "sourceUnit": 66746,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59503,
              "name": "INameChecker",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 66745,
              "src": "400:12:82",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60159,
        "nodeType": "ContractDefinition",
        "src": "454:6474:82",
        "nodes": [
          {
            "id": 59512,
            "nodeType": "UsingForDirective",
            "src": "535:25:82",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 59511,
              "name": "LibSubString",
              "nameLocations": [
                "541:12:82"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 68164,
              "src": "541:12:82"
            }
          },
          {
            "id": 59516,
            "nodeType": "UsingForDirective",
            "src": "563:33:82",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 59513,
              "name": "BitMaps",
              "nameLocations": [
                "569:7:82"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 53744,
              "src": "569:7:82"
            },
            "typeName": {
              "id": 59515,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 59514,
                "name": "BitMaps.BitMap",
                "nameLocations": [
                  "581:7:82",
                  "589:6:82"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 53614,
                "src": "581:14:82"
              },
              "referencedDeclaration": 53614,
              "src": "581:14:82",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_BitMap_$53614_storage_ptr",
                "typeString": "struct BitMaps.BitMap"
              }
            }
          },
          {
            "id": 59521,
            "nodeType": "VariableDeclaration",
            "src": "635:27:82",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 59517,
              "nodeType": "StructuredDocumentation",
              "src": "600:32:82",
              "text": "@dev Gap for upgradeability."
            },
            "mutability": "mutable",
            "name": "____gap",
            "nameLocation": "655:7:82",
            "scope": 60159,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 59518,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "635:7:82",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 59520,
              "length": {
                "hexValue": "3530",
                "id": 59519,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "643:2:82",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "635:11:82",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          },
          {
            "id": 59524,
            "nodeType": "VariableDeclaration",
            "src": "667:42:82",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "_wordRange",
            "nameLocation": "699:10:82",
            "scope": 60159,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_WordRange_$67990_storage",
              "typeString": "struct LibSubString.WordRange"
            },
            "typeName": {
              "id": 59523,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 59522,
                "name": "LibSubString.WordRange",
                "nameLocations": [
                  "667:12:82",
                  "680:9:82"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 67990,
                "src": "667:22:82"
              },
              "referencedDeclaration": 67990,
              "src": "667:22:82",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_WordRange_$67990_storage_ptr",
                "typeString": "struct LibSubString.WordRange"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 59527,
            "nodeType": "VariableDeclaration",
            "src": "713:41:82",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "_forbiddenWordMap",
            "nameLocation": "737:17:82",
            "scope": 60159,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_BitMap_$53614_storage",
              "typeString": "struct BitMaps.BitMap"
            },
            "typeName": {
              "id": 59526,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 59525,
                "name": "BitMaps.BitMap",
                "nameLocations": [
                  "713:7:82",
                  "721:6:82"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 53614,
                "src": "713:14:82"
              },
              "referencedDeclaration": 53614,
              "src": "713:14:82",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_BitMap_$53614_storage_ptr",
                "typeString": "struct BitMaps.BitMap"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 59534,
            "nodeType": "FunctionDefinition",
            "src": "759:55:82",
            "nodes": [],
            "body": {
              "id": 59533,
              "nodeType": "Block",
              "src": "781:33:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 59530,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 49861,
                      "src": "787:20:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 59531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "787:22:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59532,
                  "nodeType": "ExpressionStatement",
                  "src": "787:22:82"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 59528,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "770:2:82"
            },
            "returnParameters": {
              "id": 59529,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "781:0:82"
            },
            "scope": 60159,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 59556,
            "nodeType": "FunctionDefinition",
            "src": "818:155:82",
            "nodes": [],
            "body": {
              "id": 59555,
              "nodeType": "Block",
              "src": "896:77:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 59546,
                        "name": "DEFAULT_ADMIN_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48194,
                        "src": "913:18:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 59547,
                        "name": "admin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59536,
                        "src": "933:5:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 59545,
                      "name": "_setupRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48390,
                      "src": "902:10:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 59548,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "902:37:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59549,
                  "nodeType": "ExpressionStatement",
                  "src": "902:37:82"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 59551,
                        "name": "min",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59538,
                        "src": "959:3:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 59552,
                        "name": "max",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59540,
                        "src": "964:3:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      ],
                      "id": 59550,
                      "name": "_setWordRange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60124,
                      "src": "945:13:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$_t_uint8_$returns$__$",
                        "typeString": "function (uint8,uint8)"
                      }
                    },
                    "id": 59553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "945:23:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59554,
                  "nodeType": "ExpressionStatement",
                  "src": "945:23:82"
                }
              ]
            },
            "functionSelector": "fb3809be",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 59543,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 59542,
                  "name": "initializer",
                  "nameLocations": [
                    "884:11:82"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 49782,
                  "src": "884:11:82"
                },
                "nodeType": "ModifierInvocation",
                "src": "884:11:82"
              }
            ],
            "name": "initialize",
            "nameLocation": "827:10:82",
            "parameters": {
              "id": 59541,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59536,
                  "mutability": "mutable",
                  "name": "admin",
                  "nameLocation": "846:5:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59556,
                  "src": "838:13:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59535,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "838:7:82",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59538,
                  "mutability": "mutable",
                  "name": "min",
                  "nameLocation": "859:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59556,
                  "src": "853:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 59537,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "853:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59540,
                  "mutability": "mutable",
                  "name": "max",
                  "nameLocation": "870:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59556,
                  "src": "864:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 59539,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "864:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "837:37:82"
            },
            "returnParameters": {
              "id": 59544,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "896:0:82"
            },
            "scope": 60159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59578,
            "nodeType": "FunctionDefinition",
            "src": "1019:175:82",
            "nodes": [],
            "body": {
              "id": 59577,
              "nodeType": "Block",
              "src": "1088:106:82",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    59568
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59568,
                      "mutability": "mutable",
                      "name": "wordRange",
                      "nameLocation": "1124:9:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 59577,
                      "src": "1094:39:82",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                        "typeString": "struct LibSubString.WordRange"
                      },
                      "typeName": {
                        "id": 59567,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 59566,
                          "name": "LibSubString.WordRange",
                          "nameLocations": [
                            "1094:12:82",
                            "1107:9:82"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 67990,
                          "src": "1094:22:82"
                        },
                        "referencedDeclaration": 67990,
                        "src": "1094:22:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_WordRange_$67990_storage_ptr",
                          "typeString": "struct LibSubString.WordRange"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59570,
                  "initialValue": {
                    "id": 59569,
                    "name": "_wordRange",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 59524,
                    "src": "1136:10:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                      "typeString": "struct LibSubString.WordRange storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1094:52:82"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "expression": {
                          "id": 59571,
                          "name": "wordRange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59568,
                          "src": "1160:9:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                            "typeString": "struct LibSubString.WordRange memory"
                          }
                        },
                        "id": 59572,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1170:3:82",
                        "memberName": "min",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 67987,
                        "src": "1160:13:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "expression": {
                          "id": 59573,
                          "name": "wordRange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59568,
                          "src": "1175:9:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                            "typeString": "struct LibSubString.WordRange memory"
                          }
                        },
                        "id": 59574,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1185:3:82",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 67989,
                        "src": "1175:13:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "id": 59575,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1159:30:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint8_$_t_uint8_$",
                      "typeString": "tuple(uint8,uint8)"
                    }
                  },
                  "functionReturnParameters": 59563,
                  "id": 59576,
                  "nodeType": "Return",
                  "src": "1152:37:82"
                }
              ]
            },
            "baseFunctions": [
              66702
            ],
            "documentation": {
              "id": 59557,
              "nodeType": "StructuredDocumentation",
              "src": "977:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "1d367b57",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getWordRange",
            "nameLocation": "1028:12:82",
            "parameters": {
              "id": 59558,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1040:2:82"
            },
            "returnParameters": {
              "id": 59563,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59560,
                  "mutability": "mutable",
                  "name": "min",
                  "nameLocation": "1072:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59578,
                  "src": "1066:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 59559,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1066:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59562,
                  "mutability": "mutable",
                  "name": "max",
                  "nameLocation": "1083:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59578,
                  "src": "1077:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 59561,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1077:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1065:22:82"
            },
            "scope": 60159,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59595,
            "nodeType": "FunctionDefinition",
            "src": "1240:116:82",
            "nodes": [],
            "body": {
              "id": 59594,
              "nodeType": "Block",
              "src": "1322:34:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 59590,
                        "name": "min",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59581,
                        "src": "1342:3:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 59591,
                        "name": "max",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59583,
                        "src": "1347:3:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      ],
                      "id": 59589,
                      "name": "_setWordRange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60124,
                      "src": "1328:13:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$_t_uint8_$returns$__$",
                        "typeString": "function (uint8,uint8)"
                      }
                    },
                    "id": 59592,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1328:23:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59593,
                  "nodeType": "ExpressionStatement",
                  "src": "1328:23:82"
                }
              ]
            },
            "baseFunctions": [
              66694
            ],
            "documentation": {
              "id": 59579,
              "nodeType": "StructuredDocumentation",
              "src": "1198:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "fbc63909",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 59586,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48194,
                    "src": "1302:18:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 59587,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 59585,
                  "name": "onlyRole",
                  "nameLocations": [
                    "1293:8:82"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48205,
                  "src": "1293:8:82"
                },
                "nodeType": "ModifierInvocation",
                "src": "1293:28:82"
              }
            ],
            "name": "setWordRange",
            "nameLocation": "1249:12:82",
            "parameters": {
              "id": 59584,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59581,
                  "mutability": "mutable",
                  "name": "min",
                  "nameLocation": "1268:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59595,
                  "src": "1262:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 59580,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1262:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59583,
                  "mutability": "mutable",
                  "name": "max",
                  "nameLocation": "1279:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59595,
                  "src": "1273:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 59582,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1273:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1261:22:82"
            },
            "returnParameters": {
              "id": 59588,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1322:0:82"
            },
            "scope": 60159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59612,
            "nodeType": "FunctionDefinition",
            "src": "1402:149:82",
            "nodes": [],
            "body": {
              "id": 59611,
              "nodeType": "Block",
              "src": "1470:81:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 59609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 59604,
                          "name": "name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59598,
                          "src": "1508:4:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        ],
                        "id": 59603,
                        "name": "containsInvalidCharacter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59807,
                        "src": "1483:24:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_string_calldata_ptr_$returns$_t_bool_$",
                          "typeString": "function (string calldata) pure returns (bool)"
                        }
                      },
                      "id": 59605,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1483:30:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 59607,
                          "name": "name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59598,
                          "src": "1541:4:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        ],
                        "id": 59606,
                        "name": "containsBlacklistedWord",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59707,
                        "src": "1517:23:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_string_calldata_ptr_$returns$_t_bool_$",
                          "typeString": "function (string calldata) view returns (bool)"
                        }
                      },
                      "id": 59608,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1517:29:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1483:63:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 59602,
                  "id": 59610,
                  "nodeType": "Return",
                  "src": "1476:70:82"
                }
              ]
            },
            "baseFunctions": [
              66710
            ],
            "documentation": {
              "id": 59596,
              "nodeType": "StructuredDocumentation",
              "src": "1360:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "0fda4464",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "forbidden",
            "nameLocation": "1411:9:82",
            "parameters": {
              "id": 59599,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59598,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "1437:4:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59612,
                  "src": "1421:20:82",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 59597,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1421:6:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1420:22:82"
            },
            "returnParameters": {
              "id": 59602,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59601,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 59612,
                  "src": "1464:4:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59600,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1464:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1463:6:82"
            },
            "scope": 60159,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 59707,
            "nodeType": "FunctionDefinition",
            "src": "1597:557:82",
            "nodes": [],
            "body": {
              "id": 59706,
              "nodeType": "Block",
              "src": "1679:475:82",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    59621
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59621,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "1693:6:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 59706,
                      "src": "1685:14:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59620,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1685:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59627,
                  "initialValue": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 59624,
                          "name": "name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59615,
                          "src": "1708:4:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        ],
                        "id": 59623,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1702:5:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                          "typeString": "type(bytes storage pointer)"
                        },
                        "typeName": {
                          "id": 59622,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1702:5:82",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 59625,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1702:11:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes calldata"
                      }
                    },
                    "id": 59626,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "1714:6:82",
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "1702:18:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1685:35:82"
                },
                {
                  "assignments": [
                    59629
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59629,
                      "mutability": "mutable",
                      "name": "char",
                      "nameLocation": "1733:4:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 59706,
                      "src": "1726:11:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes1",
                        "typeString": "bytes1"
                      },
                      "typeName": {
                        "id": 59628,
                        "name": "bytes1",
                        "nodeType": "ElementaryTypeName",
                        "src": "1726:6:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59630,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1726:11:82"
                },
                {
                  "assignments": [
                    59632
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59632,
                      "mutability": "mutable",
                      "name": "i",
                      "nameLocation": "1751:1:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 59706,
                      "src": "1743:9:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59631,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1743:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59633,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1743:9:82"
                },
                {
                  "assignments": [
                    59635
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59635,
                      "mutability": "mutable",
                      "name": "j",
                      "nameLocation": "1766:1:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 59706,
                      "src": "1758:9:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59634,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1758:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59636,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1758:9:82"
                },
                {
                  "id": 59703,
                  "nodeType": "UncheckedBlock",
                  "src": "1774:357:82",
                  "statements": [
                    {
                      "body": {
                        "id": 59701,
                        "nodeType": "Block",
                        "src": "1817:308:82",
                        "statements": [
                          {
                            "expression": {
                              "id": 59652,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 59645,
                                "name": "char",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59629,
                                "src": "1827:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "baseExpression": {
                                  "arguments": [
                                    {
                                      "id": 59648,
                                      "name": "name",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 59615,
                                      "src": "1840:4:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_calldata_ptr",
                                        "typeString": "string calldata"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_string_calldata_ptr",
                                        "typeString": "string calldata"
                                      }
                                    ],
                                    "id": 59647,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1834:5:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                      "typeString": "type(bytes storage pointer)"
                                    },
                                    "typeName": {
                                      "id": 59646,
                                      "name": "bytes",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1834:5:82",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 59649,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1834:11:82",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_calldata_ptr",
                                    "typeString": "bytes calldata"
                                  }
                                },
                                "id": 59651,
                                "indexExpression": {
                                  "id": 59650,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59632,
                                  "src": "1846:1:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1834:14:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "src": "1827:21:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "id": 59653,
                            "nodeType": "ExpressionStatement",
                            "src": "1827:21:82"
                          },
                          {
                            "condition": {
                              "arguments": [
                                {
                                  "id": 59655,
                                  "name": "char",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59629,
                                  "src": "1875:4:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                ],
                                "id": 59654,
                                "name": "_isAlphabet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60141,
                                "src": "1863:11:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes1_$returns$_t_bool_$",
                                  "typeString": "function (bytes1) pure returns (bool)"
                                }
                              },
                              "id": 59656,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1863:17:82",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 59700,
                            "nodeType": "IfStatement",
                            "src": "1859:258:82",
                            "trueBody": {
                              "id": 59699,
                              "nodeType": "Block",
                              "src": "1882:235:82",
                              "statements": [
                                {
                                  "body": {
                                    "id": 59681,
                                    "nodeType": "Block",
                                    "src": "1927:96:82",
                                    "statements": [
                                      {
                                        "condition": {
                                          "id": 59677,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "UnaryOperation",
                                          "operator": "!",
                                          "prefix": true,
                                          "src": "1945:28:82",
                                          "subExpression": {
                                            "arguments": [
                                              {
                                                "baseExpression": {
                                                  "arguments": [
                                                    {
                                                      "id": 59672,
                                                      "name": "name",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 59615,
                                                      "src": "1964:4:82",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_string_calldata_ptr",
                                                        "typeString": "string calldata"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_string_calldata_ptr",
                                                        "typeString": "string calldata"
                                                      }
                                                    ],
                                                    "id": 59671,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "lValueRequested": false,
                                                    "nodeType": "ElementaryTypeNameExpression",
                                                    "src": "1958:5:82",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                                      "typeString": "type(bytes storage pointer)"
                                                    },
                                                    "typeName": {
                                                      "id": 59670,
                                                      "name": "bytes",
                                                      "nodeType": "ElementaryTypeName",
                                                      "src": "1958:5:82",
                                                      "typeDescriptions": {}
                                                    }
                                                  },
                                                  "id": 59673,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "typeConversion",
                                                  "lValueRequested": false,
                                                  "nameLocations": [],
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "1958:11:82",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes_calldata_ptr",
                                                    "typeString": "bytes calldata"
                                                  }
                                                },
                                                "id": 59675,
                                                "indexExpression": {
                                                  "id": 59674,
                                                  "name": "j",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 59635,
                                                  "src": "1970:1:82",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "1958:14:82",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes1",
                                                  "typeString": "bytes1"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes1",
                                                  "typeString": "bytes1"
                                                }
                                              ],
                                              "id": 59669,
                                              "name": "_isAlphabet",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 60141,
                                              "src": "1946:11:82",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_pure$_t_bytes1_$returns$_t_bool_$",
                                                "typeString": "function (bytes1) pure returns (bool)"
                                              }
                                            },
                                            "id": 59676,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "nameLocations": [],
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "1946:27:82",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "id": 59680,
                                        "nodeType": "IfStatement",
                                        "src": "1941:70:82",
                                        "trueBody": {
                                          "id": 59679,
                                          "nodeType": "Block",
                                          "src": "1975:36:82",
                                          "statements": [
                                            {
                                              "id": 59678,
                                              "nodeType": "Break",
                                              "src": "1991:5:82"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 59665,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 59663,
                                      "name": "j",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 59635,
                                      "src": "1910:1:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "id": 59664,
                                      "name": "length",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 59621,
                                      "src": "1914:6:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "1910:10:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 59682,
                                  "initializationExpression": {
                                    "expression": {
                                      "id": 59661,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 59657,
                                        "name": "j",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 59635,
                                        "src": "1899:1:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 59660,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 59658,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 59632,
                                          "src": "1903:1:82",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "+",
                                        "rightExpression": {
                                          "hexValue": "31",
                                          "id": 59659,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "1907:1:82",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_1_by_1",
                                            "typeString": "int_const 1"
                                          },
                                          "value": "1"
                                        },
                                        "src": "1903:5:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "1899:9:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 59662,
                                    "nodeType": "ExpressionStatement",
                                    "src": "1899:9:82"
                                  },
                                  "loopExpression": {
                                    "expression": {
                                      "id": 59667,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "++",
                                      "prefix": false,
                                      "src": "1922:3:82",
                                      "subExpression": {
                                        "id": 59666,
                                        "name": "j",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 59635,
                                        "src": "1922:1:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 59668,
                                    "nodeType": "ExpressionStatement",
                                    "src": "1922:3:82"
                                  },
                                  "nodeType": "ForStatement",
                                  "src": "1894:129:82"
                                },
                                {
                                  "condition": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "baseExpression": {
                                              "id": 59686,
                                              "name": "name",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 59615,
                                              "src": "2065:4:82",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_calldata_ptr",
                                                "typeString": "string calldata"
                                              }
                                            },
                                            "endExpression": {
                                              "id": 59688,
                                              "name": "j",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 59635,
                                              "src": "2072:1:82",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "id": 59689,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexRangeAccess",
                                            "src": "2065:9:82",
                                            "startExpression": {
                                              "id": 59687,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 59632,
                                              "src": "2070:1:82",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_string_calldata_ptr_slice",
                                              "typeString": "string calldata slice"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_string_calldata_ptr_slice",
                                              "typeString": "string calldata slice"
                                            }
                                          ],
                                          "id": 59685,
                                          "name": "pack",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 59817,
                                          "src": "2060:4:82",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                                            "typeString": "function (string memory) pure returns (uint256)"
                                          }
                                        },
                                        "id": 59690,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "2060:15:82",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 59683,
                                        "name": "_forbiddenWordMap",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 59527,
                                        "src": "2038:17:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_BitMap_$53614_storage",
                                          "typeString": "struct BitMaps.BitMap storage ref"
                                        }
                                      },
                                      "id": 59684,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2056:3:82",
                                      "memberName": "get",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 53650,
                                      "src": "2038:21:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$_t_struct$_BitMap_$53614_storage_ptr_$_t_uint256_$returns$_t_bool_$attached_to$_t_struct$_BitMap_$53614_storage_ptr_$",
                                        "typeString": "function (struct BitMaps.BitMap storage pointer,uint256) view returns (bool)"
                                      }
                                    },
                                    "id": 59691,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2038:38:82",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 59694,
                                  "nodeType": "IfStatement",
                                  "src": "2034:55:82",
                                  "trueBody": {
                                    "expression": {
                                      "hexValue": "74727565",
                                      "id": 59692,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2085:4:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "true"
                                    },
                                    "functionReturnParameters": 59619,
                                    "id": 59693,
                                    "nodeType": "Return",
                                    "src": "2078:11:82"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 59697,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 59695,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 59632,
                                      "src": "2101:1:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "id": 59696,
                                      "name": "j",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 59635,
                                      "src": "2105:1:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "2101:5:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 59698,
                                  "nodeType": "ExpressionStatement",
                                  "src": "2101:5:82"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 59641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 59639,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59632,
                          "src": "1800:1:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 59640,
                          "name": "length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59621,
                          "src": "1804:6:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1800:10:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 59702,
                      "initializationExpression": {
                        "expression": {
                          "id": 59637,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59632,
                          "src": "1797:1:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 59638,
                        "nodeType": "ExpressionStatement",
                        "src": "1797:1:82"
                      },
                      "loopExpression": {
                        "expression": {
                          "id": 59643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "1812:3:82",
                          "subExpression": {
                            "id": 59642,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59632,
                            "src": "1812:1:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 59644,
                        "nodeType": "ExpressionStatement",
                        "src": "1812:3:82"
                      },
                      "nodeType": "ForStatement",
                      "src": "1792:333:82"
                    }
                  ]
                },
                {
                  "expression": {
                    "hexValue": "66616c7365",
                    "id": 59704,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2144:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "functionReturnParameters": 59619,
                  "id": 59705,
                  "nodeType": "Return",
                  "src": "2137:12:82"
                }
              ]
            },
            "baseFunctions": [
              66718
            ],
            "documentation": {
              "id": 59613,
              "nodeType": "StructuredDocumentation",
              "src": "1555:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "439e42e7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "containsBlacklistedWord",
            "nameLocation": "1606:23:82",
            "parameters": {
              "id": 59616,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59615,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "1646:4:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59707,
                  "src": "1630:20:82",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 59614,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1630:6:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1629:22:82"
            },
            "returnParameters": {
              "id": 59619,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59618,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 59707,
                  "src": "1673:4:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59617,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1673:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1672:6:82"
            },
            "scope": 60159,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 59807,
            "nodeType": "FunctionDefinition",
            "src": "2200:786:82",
            "nodes": [],
            "body": {
              "id": 59806,
              "nodeType": "Block",
              "src": "2283:703:82",
              "nodes": [],
              "statements": [
                {
                  "id": 59805,
                  "nodeType": "UncheckedBlock",
                  "src": "2289:693:82",
                  "statements": [
                    {
                      "assignments": [
                        59716
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 59716,
                          "mutability": "mutable",
                          "name": "char",
                          "nameLocation": "2314:4:82",
                          "nodeType": "VariableDeclaration",
                          "scope": 59805,
                          "src": "2307:11:82",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          },
                          "typeName": {
                            "id": 59715,
                            "name": "bytes1",
                            "nodeType": "ElementaryTypeName",
                            "src": "2307:6:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 59717,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2307:11:82"
                    },
                    {
                      "assignments": [
                        59719
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 59719,
                          "mutability": "mutable",
                          "name": "bName",
                          "nameLocation": "2339:5:82",
                          "nodeType": "VariableDeclaration",
                          "scope": 59805,
                          "src": "2326:18:82",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 59718,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2326:5:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 59724,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 59722,
                            "name": "name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59710,
                            "src": "2353:4:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          ],
                          "id": 59721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2347:5:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 59720,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2347:5:82",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 59723,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2347:11:82",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2326:32:82"
                    },
                    {
                      "assignments": [
                        59726
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 59726,
                          "mutability": "mutable",
                          "name": "length",
                          "nameLocation": "2374:6:82",
                          "nodeType": "VariableDeclaration",
                          "scope": 59805,
                          "src": "2366:14:82",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 59725,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2366:7:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 59729,
                      "initialValue": {
                        "expression": {
                          "id": 59727,
                          "name": "bName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59719,
                          "src": "2383:5:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 59728,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2389:6:82",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "2383:12:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2366:29:82"
                    },
                    {
                      "assignments": [
                        59731
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 59731,
                          "mutability": "mutable",
                          "name": "tail",
                          "nameLocation": "2412:4:82",
                          "nodeType": "VariableDeclaration",
                          "scope": 59805,
                          "src": "2404:12:82",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 59730,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2404:7:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 59735,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 59734,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 59732,
                          "name": "length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59726,
                          "src": "2419:6:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 59733,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2428:1:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "2419:10:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2404:25:82"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 59750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 59744,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 59738,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 59736,
                              "name": "length",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59726,
                              "src": "2513:6:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 59737,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2523:1:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "2513:11:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            },
                            "id": 59743,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 59739,
                                "name": "bName",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59719,
                                "src": "2528:5:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 59741,
                              "indexExpression": {
                                "hexValue": "30",
                                "id": 59740,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2534:1:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2528:8:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30783264",
                              "id": 59742,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2540:4:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_45_by_1",
                                "typeString": "int_const 45"
                              },
                              "value": "0x2d"
                            },
                            "src": "2528:16:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "2513:31:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          },
                          "id": 59749,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 59745,
                              "name": "bName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59719,
                              "src": "2548:5:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 59747,
                            "indexExpression": {
                              "id": 59746,
                              "name": "tail",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59731,
                              "src": "2554:4:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2548:11:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783264",
                            "id": 59748,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2563:4:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_45_by_1",
                              "typeString": "int_const 45"
                            },
                            "value": "0x2d"
                          },
                          "src": "2548:19:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2513:54:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 59753,
                      "nodeType": "IfStatement",
                      "src": "2509:71:82",
                      "trueBody": {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 59751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2576:4:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 59714,
                        "id": 59752,
                        "nodeType": "Return",
                        "src": "2569:11:82"
                      }
                    },
                    {
                      "body": {
                        "id": 59801,
                        "nodeType": "Block",
                        "src": "2622:333:82",
                        "statements": [
                          {
                            "expression": {
                              "id": 59767,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 59763,
                                "name": "char",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59716,
                                "src": "2632:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "baseExpression": {
                                  "id": 59764,
                                  "name": "bName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59719,
                                  "src": "2639:5:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 59766,
                                "indexExpression": {
                                  "id": 59765,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59755,
                                  "src": "2645:1:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2639:8:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "src": "2632:15:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "id": 59768,
                            "nodeType": "ExpressionStatement",
                            "src": "2632:15:82"
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              },
                              "id": 59771,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 59769,
                                "name": "char",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59716,
                                "src": "2661:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30783264",
                                "id": 59770,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2669:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_45_by_1",
                                  "typeString": "int_const 45"
                                },
                                "value": "0x2d"
                              },
                              "src": "2661:12:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "condition": {
                                "id": 59795,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "2872:39:82",
                                "subExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 59793,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "arguments": [
                                          {
                                            "id": 59788,
                                            "name": "char",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 59716,
                                            "src": "2884:4:82",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes1",
                                              "typeString": "bytes1"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes1",
                                              "typeString": "bytes1"
                                            }
                                          ],
                                          "id": 59787,
                                          "name": "_isNumber",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 60158,
                                          "src": "2874:9:82",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_bytes1_$returns$_t_bool_$",
                                            "typeString": "function (bytes1) pure returns (bool)"
                                          }
                                        },
                                        "id": 59789,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "2874:15:82",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "||",
                                      "rightExpression": {
                                        "arguments": [
                                          {
                                            "id": 59791,
                                            "name": "char",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 59716,
                                            "src": "2905:4:82",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes1",
                                              "typeString": "bytes1"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes1",
                                              "typeString": "bytes1"
                                            }
                                          ],
                                          "id": 59790,
                                          "name": "_isAlphabet",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 60141,
                                          "src": "2893:11:82",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_bytes1_$returns$_t_bool_$",
                                            "typeString": "function (bytes1) pure returns (bool)"
                                          }
                                        },
                                        "id": 59792,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "2893:17:82",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "2874:36:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    }
                                  ],
                                  "id": 59794,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "2873:38:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 59799,
                              "nodeType": "IfStatement",
                              "src": "2868:79:82",
                              "trueBody": {
                                "id": 59798,
                                "nodeType": "Block",
                                "src": "2913:34:82",
                                "statements": [
                                  {
                                    "expression": {
                                      "hexValue": "74727565",
                                      "id": 59796,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2932:4:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "true"
                                    },
                                    "functionReturnParameters": 59714,
                                    "id": 59797,
                                    "nodeType": "Return",
                                    "src": "2925:11:82"
                                  }
                                ]
                              }
                            },
                            "id": 59800,
                            "nodeType": "IfStatement",
                            "src": "2657:290:82",
                            "trueBody": {
                              "id": 59786,
                              "nodeType": "Block",
                              "src": "2675:112:82",
                              "statements": [
                                {
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "id": 59782,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 59774,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 59772,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 59755,
                                        "src": "2730:1:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "!=",
                                      "rightExpression": {
                                        "id": 59773,
                                        "name": "tail",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 59731,
                                        "src": "2735:4:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2730:9:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&&",
                                    "rightExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      },
                                      "id": 59781,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "baseExpression": {
                                          "id": 59775,
                                          "name": "bName",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 59719,
                                          "src": "2743:5:82",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        "id": 59779,
                                        "indexExpression": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 59778,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 59776,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 59755,
                                            "src": "2749:1:82",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "hexValue": "31",
                                            "id": 59777,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "2753:1:82",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1_by_1",
                                              "typeString": "int_const 1"
                                            },
                                            "value": "1"
                                          },
                                          "src": "2749:5:82",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "2743:12:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30783264",
                                        "id": 59780,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2759:4:82",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_45_by_1",
                                          "typeString": "int_const 45"
                                        },
                                        "value": "0x2d"
                                      },
                                      "src": "2743:20:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "2730:33:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 59785,
                                  "nodeType": "IfStatement",
                                  "src": "2726:50:82",
                                  "trueBody": {
                                    "expression": {
                                      "hexValue": "74727565",
                                      "id": 59783,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2772:4:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "true"
                                    },
                                    "functionReturnParameters": 59714,
                                    "id": 59784,
                                    "nodeType": "Return",
                                    "src": "2765:11:82"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 59759,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 59757,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59755,
                          "src": "2605:1:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 59758,
                          "name": "length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59726,
                          "src": "2609:6:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2605:10:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 59802,
                      "initializationExpression": {
                        "assignments": [
                          59755
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 59755,
                            "mutability": "mutable",
                            "name": "i",
                            "nameLocation": "2602:1:82",
                            "nodeType": "VariableDeclaration",
                            "scope": 59802,
                            "src": "2594:9:82",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 59754,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2594:7:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 59756,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2594:9:82"
                      },
                      "loopExpression": {
                        "expression": {
                          "id": 59761,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "2617:3:82",
                          "subExpression": {
                            "id": 59760,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59755,
                            "src": "2619:1:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 59762,
                        "nodeType": "ExpressionStatement",
                        "src": "2617:3:82"
                      },
                      "nodeType": "ForStatement",
                      "src": "2589:366:82"
                    },
                    {
                      "expression": {
                        "hexValue": "66616c7365",
                        "id": 59803,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2970:5:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      },
                      "functionReturnParameters": 59714,
                      "id": 59804,
                      "nodeType": "Return",
                      "src": "2963:12:82"
                    }
                  ]
                }
              ]
            },
            "baseFunctions": [
              66726
            ],
            "documentation": {
              "id": 59708,
              "nodeType": "StructuredDocumentation",
              "src": "2158:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "5c0a3caa",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "containsInvalidCharacter",
            "nameLocation": "2209:24:82",
            "parameters": {
              "id": 59711,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59710,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "2250:4:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59807,
                  "src": "2234:20:82",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 59709,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2234:6:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2233:22:82"
            },
            "returnParameters": {
              "id": 59714,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59713,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 59807,
                  "src": "2277:4:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59712,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2277:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2276:6:82"
            },
            "scope": 60159,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 59817,
            "nodeType": "FunctionDefinition",
            "src": "3032:526:82",
            "nodes": [],
            "body": {
              "id": 59816,
              "nodeType": "Block",
              "src": "3102:456:82",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nativeSrc": "3133:421:82",
                    "nodeType": "YulBlock",
                    "src": "3133:421:82",
                    "statements": [
                      {
                        "nativeSrc": "3261:287:82",
                        "nodeType": "YulAssignment",
                        "src": "3261:287:82",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "str",
                                      "nativeSrc": "3348:3:82",
                                      "nodeType": "YulIdentifier",
                                      "src": "3348:3:82"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3353:4:82",
                                      "nodeType": "YulLiteral",
                                      "src": "3353:4:82",
                                      "type": "",
                                      "value": "0x1f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "3344:3:82",
                                    "nodeType": "YulIdentifier",
                                    "src": "3344:3:82"
                                  },
                                  "nativeSrc": "3344:14:82",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3344:14:82"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nativeSrc": "3338:5:82",
                                "nodeType": "YulIdentifier",
                                "src": "3338:5:82"
                              },
                              "nativeSrc": "3338:21:82",
                              "nodeType": "YulFunctionCall",
                              "src": "3338:21:82"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "str",
                                          "nativeSrc": "3523:3:82",
                                          "nodeType": "YulIdentifier",
                                          "src": "3523:3:82"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "3517:5:82",
                                        "nodeType": "YulIdentifier",
                                        "src": "3517:5:82"
                                      },
                                      "nativeSrc": "3517:10:82",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3517:10:82"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3529:1:82",
                                      "nodeType": "YulLiteral",
                                      "src": "3529:1:82",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "3513:3:82",
                                    "nodeType": "YulIdentifier",
                                    "src": "3513:3:82"
                                  },
                                  "nativeSrc": "3513:18:82",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3513:18:82"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3533:4:82",
                                  "nodeType": "YulLiteral",
                                  "src": "3533:4:82",
                                  "type": "",
                                  "value": "0x1f"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nativeSrc": "3510:2:82",
                                "nodeType": "YulIdentifier",
                                "src": "3510:2:82"
                              },
                              "nativeSrc": "3510:28:82",
                              "nodeType": "YulFunctionCall",
                              "src": "3510:28:82"
                            }
                          ],
                          "functionName": {
                            "name": "mul",
                            "nativeSrc": "3279:3:82",
                            "nodeType": "YulIdentifier",
                            "src": "3279:3:82"
                          },
                          "nativeSrc": "3279:269:82",
                          "nodeType": "YulFunctionCall",
                          "src": "3279:269:82"
                        },
                        "variableNames": [
                          {
                            "name": "packed",
                            "nativeSrc": "3261:6:82",
                            "nodeType": "YulIdentifier",
                            "src": "3261:6:82"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 59813,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3261:6:82",
                      "valueSize": 1
                    },
                    {
                      "declaration": 59810,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3348:3:82",
                      "valueSize": 1
                    },
                    {
                      "declaration": 59810,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3523:3:82",
                      "valueSize": 1
                    }
                  ],
                  "flags": [
                    "memory-safe"
                  ],
                  "id": 59815,
                  "nodeType": "InlineAssembly",
                  "src": "3108:446:82"
                }
              ]
            },
            "baseFunctions": [
              66734
            ],
            "documentation": {
              "id": 59808,
              "nodeType": "StructuredDocumentation",
              "src": "2990:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "92aec2fc",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "pack",
            "nameLocation": "3041:4:82",
            "parameters": {
              "id": 59811,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59810,
                  "mutability": "mutable",
                  "name": "str",
                  "nameLocation": "3060:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59817,
                  "src": "3046:17:82",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 59809,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3046:6:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3045:19:82"
            },
            "returnParameters": {
              "id": 59814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59813,
                  "mutability": "mutable",
                  "name": "packed",
                  "nameLocation": "3094:6:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59817,
                  "src": "3086:14:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59812,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3086:7:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3085:16:82"
            },
            "scope": 60159,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 59863,
            "nodeType": "FunctionDefinition",
            "src": "3604:279:82",
            "nodes": [],
            "body": {
              "id": 59862,
              "nodeType": "Block",
              "src": "3691:192:82",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    59828
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59828,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "3705:6:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 59862,
                      "src": "3697:14:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59827,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3697:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59831,
                  "initialValue": {
                    "expression": {
                      "id": 59829,
                      "name": "strs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59821,
                      "src": "3714:4:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                        "typeString": "string memory[] memory"
                      }
                    },
                    "id": 59830,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "3719:6:82",
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "3714:11:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3697:28:82"
                },
                {
                  "expression": {
                    "id": 59838,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 59832,
                      "name": "packeds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59825,
                      "src": "3731:7:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 59836,
                          "name": "length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59828,
                          "src": "3755:6:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 59835,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "3741:13:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (uint256[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 59833,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3745:7:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 59834,
                          "nodeType": "ArrayTypeName",
                          "src": "3745:9:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        }
                      },
                      "id": 59837,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3741:21:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "src": "3731:31:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "id": 59839,
                  "nodeType": "ExpressionStatement",
                  "src": "3731:31:82"
                },
                {
                  "body": {
                    "id": 59860,
                    "nodeType": "Block",
                    "src": "3798:81:82",
                    "statements": [
                      {
                        "expression": {
                          "id": 59854,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 59846,
                              "name": "packeds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59825,
                              "src": "3806:7:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 59848,
                            "indexExpression": {
                              "id": 59847,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59841,
                              "src": "3814:1:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3806:10:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 59850,
                                  "name": "strs",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59821,
                                  "src": "3824:4:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "string memory[] memory"
                                  }
                                },
                                "id": 59852,
                                "indexExpression": {
                                  "id": 59851,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59841,
                                  "src": "3829:1:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3824:7:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "id": 59849,
                              "name": "pack",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59817,
                              "src": "3819:4:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                                "typeString": "function (string memory) pure returns (uint256)"
                              }
                            },
                            "id": 59853,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3819:13:82",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3806:26:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 59855,
                        "nodeType": "ExpressionStatement",
                        "src": "3806:26:82"
                      },
                      {
                        "id": 59859,
                        "nodeType": "UncheckedBlock",
                        "src": "3841:32:82",
                        "statements": [
                          {
                            "expression": {
                              "id": 59857,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "3861:3:82",
                              "subExpression": {
                                "id": 59856,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59841,
                                "src": "3863:1:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 59858,
                            "nodeType": "ExpressionStatement",
                            "src": "3861:3:82"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 59845,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 59843,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59841,
                      "src": "3785:1:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 59844,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59828,
                      "src": "3789:6:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3785:10:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 59861,
                  "initializationExpression": {
                    "assignments": [
                      59841
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 59841,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3782:1:82",
                        "nodeType": "VariableDeclaration",
                        "scope": 59861,
                        "src": "3774:9:82",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 59840,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3774:7:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 59842,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3774:9:82"
                  },
                  "nodeType": "ForStatement",
                  "src": "3769:110:82"
                }
              ]
            },
            "baseFunctions": [
              66744
            ],
            "documentation": {
              "id": 59818,
              "nodeType": "StructuredDocumentation",
              "src": "3562:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "e04af3b7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "packBulk",
            "nameLocation": "3613:8:82",
            "parameters": {
              "id": 59822,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59821,
                  "mutability": "mutable",
                  "name": "strs",
                  "nameLocation": "3638:4:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59863,
                  "src": "3622:20:82",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59819,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "3622:6:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 59820,
                    "nodeType": "ArrayTypeName",
                    "src": "3622:8:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3621:22:82"
            },
            "returnParameters": {
              "id": 59826,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59825,
                  "mutability": "mutable",
                  "name": "packeds",
                  "nameLocation": "3682:7:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59863,
                  "src": "3665:24:82",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59823,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3665:7:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 59824,
                    "nodeType": "ArrayTypeName",
                    "src": "3665:9:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3664:26:82"
            },
            "scope": 60159,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 59890,
            "nodeType": "FunctionDefinition",
            "src": "3929:217:82",
            "nodes": [],
            "body": {
              "id": 59889,
              "nodeType": "Block",
              "src": "4038:108:82",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    59879
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59879,
                      "mutability": "mutable",
                      "name": "packedWords",
                      "nameLocation": "4061:11:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 59889,
                      "src": "4044:28:82",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 59877,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4044:7:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 59878,
                        "nodeType": "ArrayTypeName",
                        "src": "4044:9:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59883,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 59881,
                        "name": "words",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59867,
                        "src": "4084:5:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "string calldata[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "string calldata[] calldata"
                        }
                      ],
                      "id": 59880,
                      "name": "packBulk",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59863,
                      "src": "4075:8:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                        "typeString": "function (string memory[] memory) pure returns (uint256[] memory)"
                      }
                    },
                    "id": 59882,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4075:15:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4044:46:82"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 59885,
                        "name": "packedWords",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59879,
                        "src": "4115:11:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 59886,
                        "name": "shouldForbid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59869,
                        "src": "4128:12:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 59884,
                      "name": "_setForbiddenWords",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60089,
                      "src": "4096:18:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (uint256[] memory,bool)"
                      }
                    },
                    "id": 59887,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4096:45:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59888,
                  "nodeType": "ExpressionStatement",
                  "src": "4096:45:82"
                }
              ]
            },
            "baseFunctions": [
              66686
            ],
            "documentation": {
              "id": 59864,
              "nodeType": "StructuredDocumentation",
              "src": "3887:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "96237206",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 59872,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48194,
                    "src": "4018:18:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 59873,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 59871,
                  "name": "onlyRole",
                  "nameLocations": [
                    "4009:8:82"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48205,
                  "src": "4009:8:82"
                },
                "nodeType": "ModifierInvocation",
                "src": "4009:28:82"
              }
            ],
            "name": "setForbiddenWords",
            "nameLocation": "3938:17:82",
            "parameters": {
              "id": 59870,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59867,
                  "mutability": "mutable",
                  "name": "words",
                  "nameLocation": "3974:5:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59890,
                  "src": "3956:23:82",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59865,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "3956:6:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 59866,
                    "nodeType": "ArrayTypeName",
                    "src": "3956:8:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59869,
                  "mutability": "mutable",
                  "name": "shouldForbid",
                  "nameLocation": "3986:12:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59890,
                  "src": "3981:17:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59868,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3981:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3955:44:82"
            },
            "returnParameters": {
              "id": 59874,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4038:0:82"
            },
            "scope": 60159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59908,
            "nodeType": "FunctionDefinition",
            "src": "4192:172:82",
            "nodes": [],
            "body": {
              "id": 59907,
              "nodeType": "Block",
              "src": "4308:56:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 59903,
                        "name": "packedWords",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59894,
                        "src": "4333:11:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "id": 59904,
                        "name": "shouldForbid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59896,
                        "src": "4346:12:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 59902,
                      "name": "_setForbiddenWords",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60089,
                      "src": "4314:18:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (uint256[] memory,bool)"
                      }
                    },
                    "id": 59905,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4314:45:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59906,
                  "nodeType": "ExpressionStatement",
                  "src": "4314:45:82"
                }
              ]
            },
            "baseFunctions": [
              66677
            ],
            "documentation": {
              "id": 59891,
              "nodeType": "StructuredDocumentation",
              "src": "4150:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "245ed654",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 59899,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48194,
                    "src": "4288:18:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 59900,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 59898,
                  "name": "onlyRole",
                  "nameLocations": [
                    "4279:8:82"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48205,
                  "src": "4279:8:82"
                },
                "nodeType": "ModifierInvocation",
                "src": "4279:28:82"
              }
            ],
            "name": "setForbiddenWords",
            "nameLocation": "4201:17:82",
            "parameters": {
              "id": 59897,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59894,
                  "mutability": "mutable",
                  "name": "packedWords",
                  "nameLocation": "4238:11:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59908,
                  "src": "4219:30:82",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59892,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4219:7:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 59893,
                    "nodeType": "ArrayTypeName",
                    "src": "4219:9:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59896,
                  "mutability": "mutable",
                  "name": "shouldForbid",
                  "nameLocation": "4256:12:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59908,
                  "src": "4251:17:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59895,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4251:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4218:51:82"
            },
            "returnParameters": {
              "id": 59901,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4308:0:82"
            },
            "scope": 60159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59931,
            "nodeType": "FunctionDefinition",
            "src": "4410:166:82",
            "nodes": [],
            "body": {
              "id": 59930,
              "nodeType": "Block",
              "src": "4512:64:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 59928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "components": [
                        {
                          "id": 59920,
                          "name": "total",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59914,
                          "src": "4519:5:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 59921,
                          "name": "min",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59916,
                          "src": "4526:3:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 59922,
                          "name": "max",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59918,
                          "src": "4531:3:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 59923,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "4518:17:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(uint256,uint256,uint256)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 59926,
                          "name": "_wordRange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59524,
                          "src": "4560:10:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                            "typeString": "struct LibSubString.WordRange storage ref"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                            "typeString": "struct LibSubString.WordRange storage ref"
                          }
                        ],
                        "expression": {
                          "id": 59924,
                          "name": "strlen",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59911,
                          "src": "4538:6:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 59925,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4545:14:82",
                        "memberName": "totalSubString",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 68163,
                        "src": "4538:21:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_struct$_WordRange_$67990_memory_ptr_$returns$_t_uint256_$_t_uint256_$_t_uint256_$attached_to$_t_uint256_$",
                          "typeString": "function (uint256,struct LibSubString.WordRange memory) pure returns (uint256,uint256,uint256)"
                        }
                      },
                      "id": 59927,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4538:33:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(uint256,uint256,uint256)"
                      }
                    },
                    "src": "4518:53:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59929,
                  "nodeType": "ExpressionStatement",
                  "src": "4518:53:82"
                }
              ]
            },
            "baseFunctions": [
              66668
            ],
            "documentation": {
              "id": 59909,
              "nodeType": "StructuredDocumentation",
              "src": "4368:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "ca5f7995",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSubString",
            "nameLocation": "4419:14:82",
            "parameters": {
              "id": 59912,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59911,
                  "mutability": "mutable",
                  "name": "strlen",
                  "nameLocation": "4442:6:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59931,
                  "src": "4434:14:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59910,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4434:7:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4433:16:82"
            },
            "returnParameters": {
              "id": 59919,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59914,
                  "mutability": "mutable",
                  "name": "total",
                  "nameLocation": "4479:5:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59931,
                  "src": "4471:13:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59913,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4471:7:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59916,
                  "mutability": "mutable",
                  "name": "min",
                  "nameLocation": "4494:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59931,
                  "src": "4486:11:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59915,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4486:7:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59918,
                  "mutability": "mutable",
                  "name": "max",
                  "nameLocation": "4507:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59931,
                  "src": "4499:11:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59917,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4499:7:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4470:41:82"
            },
            "scope": 60159,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 59948,
            "nodeType": "FunctionDefinition",
            "src": "4622:152:82",
            "nodes": [],
            "body": {
              "id": 59947,
              "nodeType": "Block",
              "src": "4718:56:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 59945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 59940,
                      "name": "subStrings",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59938,
                      "src": "4724:10:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                        "typeString": "string memory[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 59943,
                          "name": "_wordRange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59524,
                          "src": "4758:10:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                            "typeString": "struct LibSubString.WordRange storage ref"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                            "typeString": "struct LibSubString.WordRange storage ref"
                          }
                        ],
                        "expression": {
                          "id": 59941,
                          "name": "str",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59934,
                          "src": "4737:3:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_calldata_ptr",
                            "typeString": "string calldata"
                          }
                        },
                        "id": 59942,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4741:16:82",
                        "memberName": "getAllSubStrings",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 68089,
                        "src": "4737:20:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_string_calldata_ptr_$_t_struct$_WordRange_$67990_memory_ptr_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$attached_to$_t_string_calldata_ptr_$",
                          "typeString": "function (string calldata,struct LibSubString.WordRange memory) pure returns (string memory[] memory)"
                        }
                      },
                      "id": 59944,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4737:32:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                        "typeString": "string memory[] memory"
                      }
                    },
                    "src": "4724:45:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                      "typeString": "string memory[] memory"
                    }
                  },
                  "id": 59946,
                  "nodeType": "ExpressionStatement",
                  "src": "4724:45:82"
                }
              ]
            },
            "baseFunctions": [
              66656
            ],
            "documentation": {
              "id": 59932,
              "nodeType": "StructuredDocumentation",
              "src": "4580:39:82",
              "text": " @inheritdoc INameChecker"
            },
            "functionSelector": "e786c3ad",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAllSubStrings",
            "nameLocation": "4631:16:82",
            "parameters": {
              "id": 59935,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59934,
                  "mutability": "mutable",
                  "name": "str",
                  "nameLocation": "4664:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59948,
                  "src": "4648:19:82",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 59933,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4648:6:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4647:21:82"
            },
            "returnParameters": {
              "id": 59939,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59938,
                  "mutability": "mutable",
                  "name": "subStrings",
                  "nameLocation": "4706:10:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 59948,
                  "src": "4690:26:82",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59936,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "4690:6:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 59937,
                    "nodeType": "ArrayTypeName",
                    "src": "4690:8:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4689:28:82"
            },
            "scope": 60159,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 60089,
            "nodeType": "FunctionDefinition",
            "src": "5160:872:82",
            "nodes": [],
            "body": {
              "id": 60088,
              "nodeType": "Block",
              "src": "5246:786:82",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    59958
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59958,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "5260:6:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 60088,
                      "src": "5252:14:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59957,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5252:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59961,
                  "initialValue": {
                    "expression": {
                      "id": 59959,
                      "name": "packedWords",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59952,
                      "src": "5269:11:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "id": 59960,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "5281:6:82",
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "5269:18:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5252:35:82"
                },
                {
                  "assignments": [
                    59963
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59963,
                      "mutability": "mutable",
                      "name": "strlen",
                      "nameLocation": "5301:6:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 60088,
                      "src": "5293:14:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59962,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5293:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59964,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5293:14:82"
                },
                {
                  "assignments": [
                    59966
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59966,
                      "mutability": "mutable",
                      "name": "max",
                      "nameLocation": "5321:3:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 60088,
                      "src": "5313:11:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59965,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5313:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59967,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5313:11:82"
                },
                {
                  "assignments": [
                    59969
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 59969,
                      "mutability": "mutable",
                      "name": "min",
                      "nameLocation": "5338:3:82",
                      "nodeType": "VariableDeclaration",
                      "scope": 60088,
                      "src": "5330:11:82",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 59968,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5330:7:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 59975,
                  "initialValue": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 59972,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5349:7:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": {
                            "id": 59971,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "5349:7:82",
                            "typeDescriptions": {}
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          }
                        ],
                        "id": 59970,
                        "name": "type",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -27,
                        "src": "5344:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 59973,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5344:13:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_meta_type_t_uint256",
                        "typeString": "type(uint256)"
                      }
                    },
                    "id": 59974,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "5358:3:82",
                    "memberName": "max",
                    "nodeType": "MemberAccess",
                    "src": "5344:17:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5330:31:82"
                },
                {
                  "body": {
                    "id": 60028,
                    "nodeType": "Block",
                    "src": "5397:289:82",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 59987,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 59983,
                                  "name": "packedWords",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59952,
                                  "src": "5413:11:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 59985,
                                "indexExpression": {
                                  "id": 59984,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59977,
                                  "src": "5425:1:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5413:14:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 59986,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5431:1:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "5413:19:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e616d65436865636b65723a20696e76616c6964207061636b656420776f7264",
                              "id": 59988,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5434:34:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b335e24805aa69c1766fd3da9c77d02e6d6ef7ca22d86371a2e6819b1a65f0d8",
                                "typeString": "literal_string \"NameChecker: invalid packed word\""
                              },
                              "value": "NameChecker: invalid packed word"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b335e24805aa69c1766fd3da9c77d02e6d6ef7ca22d86371a2e6819b1a65f0d8",
                                "typeString": "literal_string \"NameChecker: invalid packed word\""
                              }
                            ],
                            "id": 59982,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5405:7:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 59989,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5405:64:82",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 59990,
                        "nodeType": "ExpressionStatement",
                        "src": "5405:64:82"
                      },
                      {
                        "expression": {
                          "id": 59997,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 59991,
                            "name": "strlen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59963,
                            "src": "5477:6:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 59996,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 59992,
                                "name": "packedWords",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59952,
                                "src": "5486:11:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 59994,
                              "indexExpression": {
                                "id": 59993,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59977,
                                "src": "5498:1:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5486:14:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">>",
                            "rightExpression": {
                              "hexValue": "30786638",
                              "id": 59995,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5504:4:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_248_by_1",
                                "typeString": "int_const 248"
                              },
                              "value": "0xf8"
                            },
                            "src": "5486:22:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5477:31:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 59998,
                        "nodeType": "ExpressionStatement",
                        "src": "5477:31:82"
                      },
                      {
                        "expression": {
                          "id": 60005,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 59999,
                            "name": "min",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59969,
                            "src": "5516:3:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 60002,
                                "name": "min",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59969,
                                "src": "5531:3:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 60003,
                                "name": "strlen",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59963,
                                "src": "5536:6:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 60000,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53189,
                                "src": "5522:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$53189_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 60001,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5527:3:82",
                              "memberName": "min",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 52366,
                              "src": "5522:8:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 60004,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5522:21:82",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5516:27:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60006,
                        "nodeType": "ExpressionStatement",
                        "src": "5516:27:82"
                      },
                      {
                        "expression": {
                          "id": 60013,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 60007,
                            "name": "max",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59966,
                            "src": "5551:3:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 60010,
                                "name": "max",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59966,
                                "src": "5566:3:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 60011,
                                "name": "strlen",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59963,
                                "src": "5571:6:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 60008,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53189,
                                "src": "5557:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$53189_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 60009,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5562:3:82",
                              "memberName": "max",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 52348,
                              "src": "5557:8:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 60012,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5557:21:82",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5551:27:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60014,
                        "nodeType": "ExpressionStatement",
                        "src": "5551:27:82"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 60018,
                                "name": "packedWords",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59952,
                                "src": "5610:11:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 60020,
                              "indexExpression": {
                                "id": 60019,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59977,
                                "src": "5622:1:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5610:14:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 60021,
                              "name": "shouldForbid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59954,
                              "src": "5626:12:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "expression": {
                              "id": 60015,
                              "name": "_forbiddenWordMap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59527,
                              "src": "5586:17:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_BitMap_$53614_storage",
                                "typeString": "struct BitMaps.BitMap storage ref"
                              }
                            },
                            "id": 60017,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5604:5:82",
                            "memberName": "setTo",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 53676,
                            "src": "5586:23:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_BitMap_$53614_storage_ptr_$_t_uint256_$_t_bool_$returns$__$attached_to$_t_struct$_BitMap_$53614_storage_ptr_$",
                              "typeString": "function (struct BitMaps.BitMap storage pointer,uint256,bool)"
                            }
                          },
                          "id": 60022,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5586:53:82",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 60023,
                        "nodeType": "ExpressionStatement",
                        "src": "5586:53:82"
                      },
                      {
                        "id": 60027,
                        "nodeType": "UncheckedBlock",
                        "src": "5648:32:82",
                        "statements": [
                          {
                            "expression": {
                              "id": 60025,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "5668:3:82",
                              "subExpression": {
                                "id": 60024,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59977,
                                "src": "5670:1:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 60026,
                            "nodeType": "ExpressionStatement",
                            "src": "5668:3:82"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 59981,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 59979,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59977,
                      "src": "5384:1:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 59980,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59958,
                      "src": "5388:6:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5384:10:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60029,
                  "initializationExpression": {
                    "assignments": [
                      59977
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 59977,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "5381:1:82",
                        "nodeType": "VariableDeclaration",
                        "scope": 60029,
                        "src": "5373:9:82",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 59976,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5373:7:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 59978,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "5373:9:82"
                  },
                  "nodeType": "ForStatement",
                  "src": "5368:318:82"
                },
                {
                  "condition": {
                    "id": 60030,
                    "name": "shouldForbid",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 59954,
                    "src": "5696:12:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 60080,
                  "nodeType": "IfStatement",
                  "src": "5692:267:82",
                  "trueBody": {
                    "id": 60079,
                    "nodeType": "Block",
                    "src": "5710:249:82",
                    "statements": [
                      {
                        "assignments": [
                          60035
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 60035,
                            "mutability": "mutable",
                            "name": "wordRange",
                            "nameLocation": "5748:9:82",
                            "nodeType": "VariableDeclaration",
                            "scope": 60079,
                            "src": "5718:39:82",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                              "typeString": "struct LibSubString.WordRange"
                            },
                            "typeName": {
                              "id": 60034,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 60033,
                                "name": "LibSubString.WordRange",
                                "nameLocations": [
                                  "5718:12:82",
                                  "5731:9:82"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 67990,
                                "src": "5718:22:82"
                              },
                              "referencedDeclaration": 67990,
                              "src": "5718:22:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WordRange_$67990_storage_ptr",
                                "typeString": "struct LibSubString.WordRange"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 60037,
                        "initialValue": {
                          "id": 60036,
                          "name": "_wordRange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59524,
                          "src": "5760:10:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                            "typeString": "struct LibSubString.WordRange storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5718:52:82"
                      },
                      {
                        "expression": {
                          "id": 60045,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 60038,
                            "name": "min",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59969,
                            "src": "5778:3:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 60041,
                                "name": "min",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59969,
                                "src": "5793:3:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 60042,
                                  "name": "wordRange",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60035,
                                  "src": "5798:9:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                                    "typeString": "struct LibSubString.WordRange memory"
                                  }
                                },
                                "id": 60043,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5808:3:82",
                                "memberName": "min",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 67987,
                                "src": "5798:13:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              ],
                              "expression": {
                                "id": 60039,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53189,
                                "src": "5784:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$53189_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 60040,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5789:3:82",
                              "memberName": "min",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 52366,
                              "src": "5784:8:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 60044,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5784:28:82",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5778:34:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60046,
                        "nodeType": "ExpressionStatement",
                        "src": "5778:34:82"
                      },
                      {
                        "expression": {
                          "id": 60054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 60047,
                            "name": "max",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59966,
                            "src": "5820:3:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 60050,
                                "name": "max",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59966,
                                "src": "5835:3:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 60051,
                                  "name": "wordRange",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 60035,
                                  "src": "5840:9:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                                    "typeString": "struct LibSubString.WordRange memory"
                                  }
                                },
                                "id": 60052,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5850:3:82",
                                "memberName": "max",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 67989,
                                "src": "5840:13:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              ],
                              "expression": {
                                "id": 60048,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 53189,
                                "src": "5826:4:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$53189_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 60049,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5831:3:82",
                              "memberName": "max",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 52348,
                              "src": "5826:8:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 60053,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5826:28:82",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5820:34:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 60055,
                        "nodeType": "ExpressionStatement",
                        "src": "5820:34:82"
                      },
                      {
                        "condition": {
                          "id": 60066,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "5866:47:82",
                          "subExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 60064,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 60059,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 60056,
                                    "name": "min",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 59969,
                                    "src": "5868:3:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 60057,
                                      "name": "wordRange",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 60035,
                                      "src": "5875:9:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                                        "typeString": "struct LibSubString.WordRange memory"
                                      }
                                    },
                                    "id": 60058,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "5885:3:82",
                                    "memberName": "min",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 67987,
                                    "src": "5875:13:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "5868:20:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 60063,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 60060,
                                    "name": "max",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 59966,
                                    "src": "5892:3:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 60061,
                                      "name": "wordRange",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 60035,
                                      "src": "5899:9:82",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                                        "typeString": "struct LibSubString.WordRange memory"
                                      }
                                    },
                                    "id": 60062,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "5909:3:82",
                                    "memberName": "max",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 67989,
                                    "src": "5899:13:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "5892:20:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "5868:44:82",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 60065,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5867:46:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 60078,
                        "nodeType": "IfStatement",
                        "src": "5862:90:82",
                        "trueBody": {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 60070,
                                    "name": "min",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 59969,
                                    "src": "5935:3:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 60069,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5929:5:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint8_$",
                                    "typeString": "type(uint8)"
                                  },
                                  "typeName": {
                                    "id": 60068,
                                    "name": "uint8",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5929:5:82",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 60071,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5929:10:82",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 60074,
                                    "name": "max",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 59966,
                                    "src": "5947:3:82",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 60073,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5941:5:82",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint8_$",
                                    "typeString": "type(uint8)"
                                  },
                                  "typeName": {
                                    "id": 60072,
                                    "name": "uint8",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5941:5:82",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 60075,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5941:10:82",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                },
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              ],
                              "id": 60067,
                              "name": "_setWordRange",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60124,
                              "src": "5915:13:82",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$_t_uint8_$returns$__$",
                                "typeString": "function (uint8,uint8)"
                              }
                            },
                            "id": 60076,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5915:37:82",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 60077,
                          "nodeType": "ExpressionStatement",
                          "src": "5915:37:82"
                        }
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 60082,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 51938,
                          "src": "5992:10:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 60083,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5992:12:82",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 60084,
                        "name": "length",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59958,
                        "src": "6006:6:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 60085,
                        "name": "shouldForbid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59954,
                        "src": "6014:12:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 60081,
                      "name": "ForbiddenWordsUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66647,
                      "src": "5970:21:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (address,uint256,bool)"
                      }
                    },
                    "id": 60086,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5970:57:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60087,
                  "nodeType": "EmitStatement",
                  "src": "5965:62:82"
                }
              ]
            },
            "documentation": {
              "id": 59949,
              "nodeType": "StructuredDocumentation",
              "src": "4778:379:82",
              "text": " @dev Set the forbidden status of packed words.\n @param packedWords An array of packed word representations.\n @param shouldForbid A boolean flag indicating whether to forbid or unforbid the words.\n @notice It ensures that packed words are not zero, indicating their validity.\n @notice Emits a `ForbiddenWordsUpdated` event upon successful execution."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setForbiddenWords",
            "nameLocation": "5169:18:82",
            "parameters": {
              "id": 59955,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59952,
                  "mutability": "mutable",
                  "name": "packedWords",
                  "nameLocation": "5205:11:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 60089,
                  "src": "5188:28:82",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59950,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5188:7:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 59951,
                    "nodeType": "ArrayTypeName",
                    "src": "5188:9:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59954,
                  "mutability": "mutable",
                  "name": "shouldForbid",
                  "nameLocation": "5223:12:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 60089,
                  "src": "5218:17:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59953,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5218:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5187:49:82"
            },
            "returnParameters": {
              "id": 59956,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5246:0:82"
            },
            "scope": 60159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 60124,
            "nodeType": "FunctionDefinition",
            "src": "6300:248:82",
            "nodes": [],
            "body": {
              "id": 60123,
              "nodeType": "Block",
              "src": "6354:194:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 60104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 60100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 60098,
                            "name": "min",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60092,
                            "src": "6368:3:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 60099,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6375:1:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "6368:8:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 60103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 60101,
                            "name": "min",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60092,
                            "src": "6380:3:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "id": 60102,
                            "name": "max",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60094,
                            "src": "6387:3:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "6380:10:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6368:22:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e616d65436865636b65723a206d696e20776f7264206c656e677468203e206d617820776f7264206c656e677468",
                        "id": 60105,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6392:48:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a9b867c08978683e215a5bae4cb15c5c7a568cbe7f2096401b20ddb9abee473",
                          "typeString": "literal_string \"NameChecker: min word length > max word length\""
                        },
                        "value": "NameChecker: min word length > max word length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a9b867c08978683e215a5bae4cb15c5c7a568cbe7f2096401b20ddb9abee473",
                          "typeString": "literal_string \"NameChecker: min word length > max word length\""
                        }
                      ],
                      "id": 60097,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6360:7:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 60106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6360:81:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60107,
                  "nodeType": "ExpressionStatement",
                  "src": "6360:81:82"
                },
                {
                  "expression": {
                    "id": 60114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 60108,
                      "name": "_wordRange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59524,
                      "src": "6447:10:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                        "typeString": "struct LibSubString.WordRange storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 60111,
                          "name": "min",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60092,
                          "src": "6483:3:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        {
                          "id": 60112,
                          "name": "max",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60094,
                          "src": "6488:3:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        ],
                        "expression": {
                          "id": 60109,
                          "name": "LibSubString",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 68164,
                          "src": "6460:12:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_LibSubString_$68164_$",
                            "typeString": "type(library LibSubString)"
                          }
                        },
                        "id": 60110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "6473:9:82",
                        "memberName": "WordRange",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 67990,
                        "src": "6460:22:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_WordRange_$67990_storage_ptr_$",
                          "typeString": "type(struct LibSubString.WordRange storage pointer)"
                        }
                      },
                      "id": 60113,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6460:32:82",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_WordRange_$67990_memory_ptr",
                        "typeString": "struct LibSubString.WordRange memory"
                      }
                    },
                    "src": "6447:45:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_WordRange_$67990_storage",
                      "typeString": "struct LibSubString.WordRange storage ref"
                    }
                  },
                  "id": 60115,
                  "nodeType": "ExpressionStatement",
                  "src": "6447:45:82"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 60117,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 51938,
                          "src": "6520:10:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 60118,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6520:12:82",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 60119,
                        "name": "min",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60092,
                        "src": "6534:3:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 60120,
                        "name": "max",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60094,
                        "src": "6539:3:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      ],
                      "id": 60116,
                      "name": "WordRangeUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66638,
                      "src": "6503:16:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint8_$_t_uint8_$returns$__$",
                        "typeString": "function (address,uint8,uint8)"
                      }
                    },
                    "id": 60121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6503:40:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60122,
                  "nodeType": "EmitStatement",
                  "src": "6498:45:82"
                }
              ]
            },
            "documentation": {
              "id": 60090,
              "nodeType": "StructuredDocumentation",
              "src": "6036:261:82",
              "text": " @dev Set the allowed word length range.\n @param min The minimum word length allowed.\n @param max The maximum word length allowed.\n @notice The minimum word length must be greater than 0, and it must not exceed the maximum word length."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setWordRange",
            "nameLocation": "6309:13:82",
            "parameters": {
              "id": 60095,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60092,
                  "mutability": "mutable",
                  "name": "min",
                  "nameLocation": "6329:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 60124,
                  "src": "6323:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 60091,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "6323:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60094,
                  "mutability": "mutable",
                  "name": "max",
                  "nameLocation": "6340:3:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 60124,
                  "src": "6334:9:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 60093,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "6334:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6322:22:82"
            },
            "returnParameters": {
              "id": 60096,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6354:0:82"
            },
            "scope": 60159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 60141,
            "nodeType": "FunctionDefinition",
            "src": "6598:138:82",
            "nodes": [],
            "body": {
              "id": 60140,
              "nodeType": "Block",
              "src": "6661:75:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 60138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes1",
                        "typeString": "bytes1"
                      },
                      "id": 60134,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 60132,
                        "name": "char",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60127,
                        "src": "6703:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "hexValue": "30783631",
                        "id": 60133,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6711:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_97_by_1",
                          "typeString": "int_const 97"
                        },
                        "value": "0x61"
                      },
                      "src": "6703:12:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes1",
                        "typeString": "bytes1"
                      },
                      "id": 60137,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 60135,
                        "name": "char",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60127,
                        "src": "6719:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "hexValue": "30783761",
                        "id": 60136,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6727:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_122_by_1",
                          "typeString": "int_const 122"
                        },
                        "value": "0x7a"
                      },
                      "src": "6719:12:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6703:28:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 60131,
                  "id": 60139,
                  "nodeType": "Return",
                  "src": "6696:35:82"
                }
              ]
            },
            "documentation": {
              "id": 60125,
              "nodeType": "StructuredDocumentation",
              "src": "6552:43:82",
              "text": "@dev Returns whether a char is in [a-z]"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isAlphabet",
            "nameLocation": "6607:11:82",
            "parameters": {
              "id": 60128,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60127,
                  "mutability": "mutable",
                  "name": "char",
                  "nameLocation": "6626:4:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 60141,
                  "src": "6619:11:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes1",
                    "typeString": "bytes1"
                  },
                  "typeName": {
                    "id": 60126,
                    "name": "bytes1",
                    "nodeType": "ElementaryTypeName",
                    "src": "6619:6:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes1",
                      "typeString": "bytes1"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6618:13:82"
            },
            "returnParameters": {
              "id": 60131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60130,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 60141,
                  "src": "6655:4:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 60129,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6655:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6654:6:82"
            },
            "scope": 60159,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 60158,
            "nodeType": "FunctionDefinition",
            "src": "6790:136:82",
            "nodes": [],
            "body": {
              "id": 60157,
              "nodeType": "Block",
              "src": "6851:75:82",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 60155,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes1",
                        "typeString": "bytes1"
                      },
                      "id": 60151,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 60149,
                        "name": "char",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60144,
                        "src": "6893:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "hexValue": "30783330",
                        "id": 60150,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6901:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_48_by_1",
                          "typeString": "int_const 48"
                        },
                        "value": "0x30"
                      },
                      "src": "6893:12:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes1",
                        "typeString": "bytes1"
                      },
                      "id": 60154,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 60152,
                        "name": "char",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60144,
                        "src": "6909:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "hexValue": "30783339",
                        "id": 60153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6917:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_57_by_1",
                          "typeString": "int_const 57"
                        },
                        "value": "0x39"
                      },
                      "src": "6909:12:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6893:28:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 60148,
                  "id": 60156,
                  "nodeType": "Return",
                  "src": "6886:35:82"
                }
              ]
            },
            "documentation": {
              "id": 60142,
              "nodeType": "StructuredDocumentation",
              "src": "6740:47:82",
              "text": "@dev Returns whether a char is number [0-9]"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isNumber",
            "nameLocation": "6799:9:82",
            "parameters": {
              "id": 60145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60144,
                  "mutability": "mutable",
                  "name": "char",
                  "nameLocation": "6816:4:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 60158,
                  "src": "6809:11:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes1",
                    "typeString": "bytes1"
                  },
                  "typeName": {
                    "id": 60143,
                    "name": "bytes1",
                    "nodeType": "ElementaryTypeName",
                    "src": "6809:6:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes1",
                      "typeString": "bytes1"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6808:13:82"
            },
            "returnParameters": {
              "id": 60148,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60147,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 60158,
                  "src": "6845:4:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 60146,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6845:4:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6844:6:82"
            },
            "scope": 60159,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 59505,
              "name": "Initializable",
              "nameLocations": [
                "478:13:82"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 49880,
              "src": "478:13:82"
            },
            "id": 59506,
            "nodeType": "InheritanceSpecifier",
            "src": "478:13:82"
          },
          {
            "baseName": {
              "id": 59507,
              "name": "AccessControlEnumerable",
              "nameLocations": [
                "493:23:82"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48607,
              "src": "493:23:82"
            },
            "id": 59508,
            "nodeType": "InheritanceSpecifier",
            "src": "493:23:82"
          },
          {
            "baseName": {
              "id": 59509,
              "name": "INameChecker",
              "nameLocations": [
                "518:12:82"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66745,
              "src": "518:12:82"
            },
            "id": 59510,
            "nodeType": "InheritanceSpecifier",
            "src": "518:12:82"
          }
        ],
        "canonicalName": "NameChecker",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          60159,
          66745,
          48607,
          48482,
          52311,
          52323,
          48705,
          48680,
          51948,
          49880
        ],
        "name": "NameChecker",
        "nameLocation": "463:11:82",
        "scope": 60160,
        "usedErrors": [
          67984
        ],
        "usedEvents": [
          48619,
          48628,
          48637,
          49726,
          66638,
          66647
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 29373564,
  "bytecode": "0x608060405261000c610011565b6100d0565b600054610100900460ff161561007d5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100ce576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611aee806100df6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063ca5f79951161007c578063ca5f7995146102df578063d547741f1461030d578063e04af3b714610320578063e786c3ad14610340578063fb3809be14610360578063fbc639091461037357600080fd5b806391d148541461027957806392aec2fc1461028c57806396237206146102b1578063a217fddf146102c4578063ca15c873146102cc57600080fd5b80632f2ff15d116100ff5780632f2ff15d1461020257806336568abe14610215578063439e42e7146102285780635c0a3caa1461023b5780639010d07c1461024e57600080fd5b806301ffc9a71461013c5780630fda4464146101645780631d367b5714610177578063245ed654146101bb578063248a9ca3146101d0575b600080fd5b61014f61014a366004611467565b610386565b60405190151581526020015b60405180910390f35b61014f610172366004611491565b6103b1565b6101a16040805180820190915260355460ff80821680845261010090920416602090920182905291565b6040805160ff93841681529290911660208301520161015b565b6101ce6101c9366004611564565b6103d4565b005b6101f46101de3660046115b8565b6000908152600160208190526040909120015490565b60405190815260200161015b565b6101ce6102103660046115e8565b610423565b6101ce6102233660046115e8565b61044e565b61014f610236366004611491565b6104d1565b61014f610249366004611491565b6105ea565b61026161025c366004611614565b61076c565b6040516001600160a01b03909116815260200161015b565b61014f6102873660046115e8565b610784565b6101f461029a3660046116ed565b6000601f600183510310601f830151029050919050565b6101ce6102bf366004611564565b6107af565b6101f4600081565b6101f46102da3660046115b8565b6107dc565b6102f26102ed3660046115b8565b6107f3565b6040805193845260208401929092529082015260600161015b565b6101ce61031b3660046115e8565b610832565b61033361032e3660046117af565b610858565b60405161015b91906117f8565b61035361034e366004611491565b61090d565b60405161015b919061188c565b6101ce61036e3660046118ff565b61093d565b6101ce610381366004611939565b610a5d565b60006001600160e01b03198216635a05180f60e01b14806103ab57506103ab82610a72565b92915050565b60006103bd83836105ea565b806103cd57506103cd83836104d1565b9392505050565b60006103df81610aa7565b61041d848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250610ab4915050565b50505050565b6000828152600160208190526040909120015461043f81610aa7565b6104498383610c54565b505050565b6001600160a01b03811633146104c35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104cd8282610c76565b5050565b6000818180805b838210156105dd578686838181106104f2576104f2611963565b9050013560f81c60f81b925061050783610c98565b156105d25750600181015b8381101561054b5761053e87878381811061052f5761052f611963565b9050013560f81c60f81b610c98565b1561054b57600101610512565b6105bc61059761055d83858a8c611979565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061029a92505050565b600881901c600090815260366020526040902054600160ff9092169190911b16151590565b156105ce5760019450505050506103ab565b8091505b6001909101906104d8565b5060009695505050505050565b600080600084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508251929350506000198201905081158061066257508260008151811061064b5761064b611963565b6020910101516001600160f81b031916602d60f81b145b80610691575082818151811061067a5761067a611963565b6020910101516001600160f81b031916602d60f81b145b156106a35760019450505050506103ab565b60005b8281101561075e578381815181106106c0576106c0611963565b01602001516001600160f81b0319169450602d60f81b85900361072c5781811415801561071457508381600101815181106106fd576106fd611963565b6020910101516001600160f81b031916602d60f81b145b15610727576001955050505050506103ab565b610756565b61073585610ccb565b80610744575061074485610c98565b610756576001955050505050506103ab565b6001016106a6565b506000979650505050505050565b60008281526002602052604081206103cd9083610cfe565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107ba81610aa7565b60006107c961032e85876119a3565b90506107d58184610ab4565b5050505050565b60008181526002602052604081206103ab90610d0a565b6040805180820190915260355460ff808216835261010090910416602082015260009081908190610825908590610d14565b9196909550909350915050565b6000828152600160208190526040909120015461084e81610aa7565b6104498383610c76565b80516060908067ffffffffffffffff81111561087657610876611636565b60405190808252806020026020018201604052801561089f578160200160208202803683370190505b50915060005b81811015610906576108e18482815181106108c2576108c2611963565b60200260200101516000601f600183510310601f830151029050919050565b8382815181106108f3576108f3611963565b60209081029190910101526001016108a5565b5050919050565b6040805180820190915260355460ff80821683526101009091041660208201526060906103cd9084908490610d85565b600054610100900460ff161580801561095d5750600054600160ff909116105b806109775750303b158015610977575060005460ff166001145b6109da5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ba565b6000805460ff1916600117905580156109fd576000805461ff0019166101001790555b610a08600085610e94565b610a128383610e9e565b801561041d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6000610a6881610aa7565b6104498383610e9e565b60006001600160e01b03198216637965db0b60e01b14806103ab57506301ffc9a760e01b6001600160e01b03198316146103ab565b610ab18133610f84565b50565b8151600080600019815b84811015610b9e57868181518110610ad857610ad8611963565b6020026020010151600003610b2f5760405162461bcd60e51b815260206004820181905260248201527f4e616d65436865636b65723a20696e76616c6964207061636b656420776f726460448201526064016104ba565b60f8878281518110610b4357610b43611963565b6020026020010151901c9350610b598285610fdd565b9150610b658385610ff3565b9250610b96878281518110610b7c57610b7c611963565b60200260200101518760366110029092919063ffffffff16565b600101610abe565b508415610c10576040805180820190915260355460ff808216808452610100909204166020830152610bd1908390610fdd565b9150610be483826020015160ff16610ff3565b815190935060ff1682148015610c005750806020015160ff1683145b610c0e57610c0e8284610e9e565b505b60408051858152861515602082015233917f060d5a3fc05fdd11d7ba941d00a4fdcde096fb95171930e19997ce2b7df89174910160405180910390a2505050505050565b610c5e8282611051565b600082815260026020526040902061044990826110bc565b610c8082826110d1565b60008281526002602052604090206104499082611138565b6000606160f81b6001600160f81b03198316108015906103ab5750603d60f91b6001600160f81b03198316111592915050565b6000600360fc1b6001600160f81b03198316108015906103ab5750603960f81b6001600160f81b03198316111592915050565b60006103cd838361114d565b60006103ab825490565b6000806000610d2a846000015160ff1686610fdd565b9150610d3d846020015160ff1686610fdd565b8281036001818101808302821c868a039092010203945090915061ffff841115610d7d57604051630faa3ef560e11b8152600481018590526024016104ba565b509250925092565b60608260008080610d968487610d14565b9250925092508267ffffffffffffffff811115610db557610db5611636565b604051908082528060200260200182016040528015610de857816020015b6060815260200190600190039081610dd35790505b50945060008060005b86811015610e8657610e0584820188610fdd565b91508085015b828111610e7d57610e1e81838d8f611979565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508b5160018801978d935091508110610e6a57610e6a611963565b6020908102919091010152600101610e0b565b50600101610df1565b505050505050509392505050565b6104cd8282610c54565b60ff821615801590610eb657508060ff168260ff1611155b610f195760405162461bcd60e51b815260206004820152602e60248201527f4e616d65436865636b65723a206d696e20776f7264206c656e677468203e206d60448201526d0c2f040eedee4c840d8cadccee8d60931b60648201526084016104ba565b60408051808201825260ff84811680835290841660209283018190526035805461ffff191683176101008302179055835191825291810191909152815133927faabf778cd749a472313a9476aa3b29565e69697c48eb0f82b52fc9f071fd3c95928290030190a25050565b610f8e8282610784565b6104cd57610f9b81611177565b610fa6836020611189565b604051602001610fb79291906119b0565b60408051601f198184030181529082905262461bcd60e51b82526104ba91600401611a25565b6000818310610fec57816103cd565b5090919050565b6000818311610fec57816103cd565b801561102c57600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b61105b8282610784565b6104cd5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006103cd836001600160a01b038416611325565b6110db8282610784565b156104cd5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006103cd836001600160a01b038416611374565b600082600001828154811061116457611164611963565b9060005260206000200154905092915050565b60606103ab6001600160a01b03831660145b60606000611198836002611a4e565b6111a3906002611a65565b67ffffffffffffffff8111156111bb576111bb611636565b6040519080825280601f01601f1916602001820160405280156111e5576020820181803683370190505b509050600360fc1b8160008151811061120057611200611963565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061122f5761122f611963565b60200101906001600160f81b031916908160001a9053506000611253846002611a4e565b61125e906001611a65565b90505b60018111156112d6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061129257611292611963565b1a60f81b8282815181106112a8576112a8611963565b60200101906001600160f81b031916908160001a90535060049490941c936112cf81611a78565b9050611261565b5083156103cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104ba565b600081815260018301602052604081205461136c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103ab565b5060006103ab565b6000818152600183016020526040812054801561145d576000611398600183611a8f565b85549091506000906113ac90600190611a8f565b90508181146114115760008660000182815481106113cc576113cc611963565b90600052602060002001549050808760000184815481106113ef576113ef611963565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061142257611422611aa2565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103ab565b60009150506103ab565b60006020828403121561147957600080fd5b81356001600160e01b0319811681146103cd57600080fd5b600080602083850312156114a457600080fd5b823567ffffffffffffffff808211156114bc57600080fd5b818501915085601f8301126114d057600080fd5b8135818111156114df57600080fd5b8660208285010111156114f157600080fd5b60209290920196919550909350505050565b60008083601f84011261151557600080fd5b50813567ffffffffffffffff81111561152d57600080fd5b6020830191508360208260051b850101111561154857600080fd5b9250929050565b8035801515811461155f57600080fd5b919050565b60008060006040848603121561157957600080fd5b833567ffffffffffffffff81111561159057600080fd5b61159c86828701611503565b90945092506115af90506020850161154f565b90509250925092565b6000602082840312156115ca57600080fd5b5035919050565b80356001600160a01b038116811461155f57600080fd5b600080604083850312156115fb57600080fd5b8235915061160b602084016115d1565b90509250929050565b6000806040838503121561162757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561167557611675611636565b604052919050565b600082601f83011261168e57600080fd5b813567ffffffffffffffff8111156116a8576116a8611636565b6116bb601f8201601f191660200161164c565b8181528460208386010111156116d057600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156116ff57600080fd5b813567ffffffffffffffff81111561171657600080fd5b6117228482850161167d565b949350505050565b600067ffffffffffffffff8084111561174557611745611636565b8360051b602061175681830161164c565b8681529350908401908084018783111561176f57600080fd5b855b838110156117a3578035858111156117895760008081fd5b6117958a828a0161167d565b835250908201908201611771565b50505050509392505050565b6000602082840312156117c157600080fd5b813567ffffffffffffffff8111156117d857600080fd5b8201601f810184136117e957600080fd5b6117228482356020840161172a565b6020808252825182820181905260009190848201906040850190845b8181101561183057835183529284019291840191600101611814565b50909695505050505050565b60005b8381101561185757818101518382015260200161183f565b50506000910152565b6000815180845261187881602086016020860161183c565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118e157603f198886030184526118cf858351611860565b945092850192908501906001016118b3565b5092979650505050505050565b803560ff8116811461155f57600080fd5b60008060006060848603121561191457600080fd5b61191d846115d1565b925061192b602085016118ee565b91506115af604085016118ee565b6000806040838503121561194c57600080fd5b611955836118ee565b915061160b602084016118ee565b634e487b7160e01b600052603260045260246000fd5b6000808585111561198957600080fd5b8386111561199657600080fd5b5050820193919092039150565b60006103cd36848461172a565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119e881601785016020880161183c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611a1981602884016020880161183c565b01602801949350505050565b6020815260006103cd6020830184611860565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103ab576103ab611a38565b808201808211156103ab576103ab611a38565b600081611a8757611a87611a38565b506000190190565b818103818111156103ab576103ab611a38565b634e487b7160e01b600052603160045260246000fdfea264697066735822122017485fa2231ef418500ce1c216428ce0f07371b27ce11d36e480e5613b06352464736f6c63430008150033",
  "chainId": 2020,
  "contractName": "NameChecker",
  "deployedBytecode": "",
  "deployer": "0x0F68eDBE14C8f68481771016d7E2871d6a35DE11",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "containsBlacklistedWord(string)": {
        "params": {
          "name": "The string to check."
        },
        "returns": {
          "_0": "true if the name contains blacklisted words, false otherwise."
        }
      },
      "containsInvalidCharacter(string)": {
        "params": {
          "name": "The string to check."
        },
        "returns": {
          "_0": "true if the name contains invalid characters, false otherwise."
        }
      },
      "forbidden(string)": {
        "params": {
          "name": "The string to check."
        },
        "returns": {
          "_0": "true if the name contains forbidden characters or blacklisted words, false otherwise."
        }
      },
      "getAllSubStrings(string)": {
        "details": "Returns an array of all substrings of a given string.",
        "params": {
          "str": "The input string to analyze."
        },
        "returns": {
          "subStrings": "An array of all substrings."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getWordRange()": {
        "details": "Retrieves the current minimum and maximum word lengths allowed.",
        "returns": {
          "max": "The maximum word length allowed.",
          "min": "The minimum word length allowed."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pack(string)": {
        "details": "Packs a string into a single word representation.",
        "params": {
          "str": "The string to be packed."
        },
        "returns": {
          "packed": "The packed value of the input string."
        }
      },
      "packBulk(string[])": {
        "details": "Packs an array of strings into their single word representations.",
        "params": {
          "strs": "The array of strings to be packed."
        },
        "returns": {
          "packeds": "An array containing the packed values of the input strings."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setForbiddenWords(string[],bool)": {
        "details": "Sets a list of forbidden words and specifies whether they should be forbidden.",
        "params": {
          "shouldForbid": "Boolean indicating whether the specified words should be forbidden.",
          "words": "An array of raw words in string representations."
        }
      },
      "setForbiddenWords(uint256[],bool)": {
        "details": "Sets a list of forbidden words and specifies whether they should be forbidden.",
        "params": {
          "packedWords": "An array of packed word representations.",
          "shouldForbid": "Boolean indicating whether the specified words should be forbidden."
        }
      },
      "setWordRange(uint8,uint8)": {
        "details": "Sets the minimum and maximum word lengths allowed.",
        "params": {
          "max": "The maximum word length.",
          "min": "The minimum word length."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSubString(uint256)": {
        "details": "Returns the total number of substrings for a given string length, as well as the minimum and maximum allowed word lengths.",
        "params": {
          "strlen": "The length of the input string."
        },
        "returns": {
          "max": "The maximum word length allowed.",
          "min": "The minimum word length allowed.",
          "total": "The total number of substrings."
        }
      }
    },
    "events": {
      "ForbiddenWordsUpdated(address,uint256,bool)": {
        "details": "Emitted when the forbidden words are updated.",
        "params": {
          "operator": "The address that updated the forbidden words list.",
          "shouldForbid": "Boolean indicating whether the specified words should be forbidden.",
          "wordCount": "The number of words in the list."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "WordRangeUpdated(address,uint8,uint8)": {
        "details": "Emitted when the word range is updated.",
        "params": {
          "max": "The maximum word length allowed.",
          "min": "The minimum word length allowed.",
          "operator": "The address that updated the word range."
        }
      }
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TotalSubStringTooLarge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wordCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldForbid\",\"type\":\"bool\"}],\"name\":\"ForbiddenWordsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"WordRangeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"containsBlacklistedWord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"containsInvalidCharacter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"forbidden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"getAllSubStrings\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"subStrings\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWordRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"pack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"packed\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"strs\",\"type\":\"string[]\"}],\"name\":\"packBulk\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"packeds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"packedWords\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"shouldForbid\",\"type\":\"bool\"}],\"name\":\"setForbiddenWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"shouldForbid\",\"type\":\"bool\"}],\"name\":\"setForbiddenWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setWordRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strlen\",\"type\":\"uint256\"}],\"name\":\"totalSubString\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ForbiddenWordsUpdated(address,uint256,bool)\":{\"details\":\"Emitted when the forbidden words are updated.\",\"params\":{\"operator\":\"The address that updated the forbidden words list.\",\"shouldForbid\":\"Boolean indicating whether the specified words should be forbidden.\",\"wordCount\":\"The number of words in the list.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"WordRangeUpdated(address,uint8,uint8)\":{\"details\":\"Emitted when the word range is updated.\",\"params\":{\"max\":\"The maximum word length allowed.\",\"min\":\"The minimum word length allowed.\",\"operator\":\"The address that updated the word range.\"}}},\"kind\":\"dev\",\"methods\":{\"containsBlacklistedWord(string)\":{\"params\":{\"name\":\"The string to check.\"},\"returns\":{\"_0\":\"true if the name contains blacklisted words, false otherwise.\"}},\"containsInvalidCharacter(string)\":{\"params\":{\"name\":\"The string to check.\"},\"returns\":{\"_0\":\"true if the name contains invalid characters, false otherwise.\"}},\"forbidden(string)\":{\"params\":{\"name\":\"The string to check.\"},\"returns\":{\"_0\":\"true if the name contains forbidden characters or blacklisted words, false otherwise.\"}},\"getAllSubStrings(string)\":{\"details\":\"Returns an array of all substrings of a given string.\",\"params\":{\"str\":\"The input string to analyze.\"},\"returns\":{\"subStrings\":\"An array of all substrings.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getWordRange()\":{\"details\":\"Retrieves the current minimum and maximum word lengths allowed.\",\"returns\":{\"max\":\"The maximum word length allowed.\",\"min\":\"The minimum word length allowed.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pack(string)\":{\"details\":\"Packs a string into a single word representation.\",\"params\":{\"str\":\"The string to be packed.\"},\"returns\":{\"packed\":\"The packed value of the input string.\"}},\"packBulk(string[])\":{\"details\":\"Packs an array of strings into their single word representations.\",\"params\":{\"strs\":\"The array of strings to be packed.\"},\"returns\":{\"packeds\":\"An array containing the packed values of the input strings.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setForbiddenWords(string[],bool)\":{\"details\":\"Sets a list of forbidden words and specifies whether they should be forbidden.\",\"params\":{\"shouldForbid\":\"Boolean indicating whether the specified words should be forbidden.\",\"words\":\"An array of raw words in string representations.\"}},\"setForbiddenWords(uint256[],bool)\":{\"details\":\"Sets a list of forbidden words and specifies whether they should be forbidden.\",\"params\":{\"packedWords\":\"An array of packed word representations.\",\"shouldForbid\":\"Boolean indicating whether the specified words should be forbidden.\"}},\"setWordRange(uint8,uint8)\":{\"details\":\"Sets the minimum and maximum word lengths allowed.\",\"params\":{\"max\":\"The maximum word length.\",\"min\":\"The minimum word length.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSubString(uint256)\":{\"details\":\"Returns the total number of substrings for a given string length, as well as the minimum and maximum allowed word lengths.\",\"params\":{\"strlen\":\"The length of the input string.\"},\"returns\":{\"max\":\"The maximum word length allowed.\",\"min\":\"The minimum word length allowed.\",\"total\":\"The total number of substrings.\"}}},\"stateVariables\":{\"____gap\":{\"details\":\"Gap for upgradeability.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"containsBlacklistedWord(string)\":{\"notice\":\"Checks if a given name contains any blacklisted words.\"},\"containsInvalidCharacter(string)\":{\"notice\":\"Checks if a given name contains any invalid characters. requirements: - all characters in name must in range [a-z] or [0-9].\"},\"forbidden(string)\":{\"notice\":\"Checks if a given name contains any forbidden characters or blacklisted words.\"},\"pack(string)\":{\"notice\":\"Returns `uint256(0)` if the length is zero or greater than 31.\"},\"packBulk(string[])\":{\"notice\":\"Returns an array of packed values, along with the minimum and maximum string lengths.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NameChecker.sol\":\"NameChecker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/=lib/pyth-sdk-solidity/\",\":@rns-contracts/=src/\",\":buffer/=lib/buffer/contracts/\",\":contract-template/=lib/contract-template/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/NameChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { BitMaps } from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport { Math, LibSubString } from \\\"./libraries/LibSubString.sol\\\";\\nimport { INameChecker } from \\\"./interfaces/INameChecker.sol\\\";\\n\\ncontract NameChecker is Initializable, AccessControlEnumerable, INameChecker {\\n  using LibSubString for *;\\n  using BitMaps for BitMaps.BitMap;\\n\\n  /// @dev Gap for upgradeability.\\n  uint256[50] private ____gap;\\n\\n  LibSubString.WordRange internal _wordRange;\\n  BitMaps.BitMap internal _forbiddenWordMap;\\n\\n  constructor() payable {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address admin, uint8 min, uint8 max) external initializer {\\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    _setWordRange(min, max);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function getWordRange() external view returns (uint8 min, uint8 max) {\\n    LibSubString.WordRange memory wordRange = _wordRange;\\n    return (wordRange.min, wordRange.max);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function setWordRange(uint8 min, uint8 max) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setWordRange(min, max);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function forbidden(string calldata name) public view returns (bool) {\\n    return containsInvalidCharacter(name) || containsBlacklistedWord(name);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function containsBlacklistedWord(string calldata name) public view returns (bool) {\\n    uint256 length = bytes(name).length;\\n    bytes1 char;\\n    uint256 i;\\n    uint256 j;\\n\\n    unchecked {\\n      for (i; i < length; i++) {\\n        char = bytes(name)[i];\\n\\n        if (_isAlphabet(char)) {\\n          for (j = i + 1; j < length; j++) {\\n            if (!_isAlphabet(bytes(name)[j])) {\\n              break;\\n            }\\n          }\\n          if (_forbiddenWordMap.get(pack(name[i:j]))) return true;\\n          i = j;\\n        }\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function containsInvalidCharacter(string calldata name) public pure returns (bool) {\\n    unchecked {\\n      bytes1 char;\\n      bytes memory bName = bytes(name);\\n      uint256 length = bName.length;\\n\\n      uint256 tail = length - 1;\\n      // Check if the name is empty or starts or ends with a hyphen (-)\\n      if (length == 0 || bName[0] == 0x2d || bName[tail] == 0x2d) return true;\\n\\n      for (uint256 i; i < length; ++i) {\\n        char = bName[i];\\n        if (char == 0x2d) {\\n          // Check consecutive hyphens\\n          if (i != tail && bName[i + 1] == 0x2d) return true;\\n        }\\n        // Check for invalid character (not (-) || [0-9] || [a-z])\\n        else if (!(_isNumber(char) || _isAlphabet(char))) {\\n          return true;\\n        }\\n      }\\n\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function pack(string memory str) public pure returns (uint256 packed) {\\n    assembly (\\\"memory-safe\\\") {\\n      // We don't need to zero right pad the string,\\n      // since this is our own custom non-standard packing scheme.\\n      packed :=\\n        mul(\\n          // Load the length and the bytes.\\n          mload(add(str, 0x1f)),\\n          // `length != 0 && length < 32`. Abuses underflow.\\n          // Assumes that the length is valid and within the block gas limit.\\n          lt(sub(mload(str), 1), 0x1f)\\n        )\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function packBulk(string[] memory strs) public pure returns (uint256[] memory packeds) {\\n    uint256 length = strs.length;\\n    packeds = new uint256[](length);\\n\\n    for (uint256 i; i < length;) {\\n      packeds[i] = pack(strs[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function setForbiddenWords(string[] calldata words, bool shouldForbid) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    uint256[] memory packedWords = packBulk(words);\\n    _setForbiddenWords(packedWords, shouldForbid);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function setForbiddenWords(uint256[] calldata packedWords, bool shouldForbid) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setForbiddenWords(packedWords, shouldForbid);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function totalSubString(uint256 strlen) public view returns (uint256 total, uint256 min, uint256 max) {\\n    (total, min, max) = strlen.totalSubString(_wordRange);\\n  }\\n\\n  /**\\n   * @inheritdoc INameChecker\\n   */\\n  function getAllSubStrings(string calldata str) public view returns (string[] memory subStrings) {\\n    subStrings = str.getAllSubStrings(_wordRange);\\n  }\\n\\n  /**\\n   * @dev Set the forbidden status of packed words.\\n   * @param packedWords An array of packed word representations.\\n   * @param shouldForbid A boolean flag indicating whether to forbid or unforbid the words.\\n   * @notice It ensures that packed words are not zero, indicating their validity.\\n   * @notice Emits a `ForbiddenWordsUpdated` event upon successful execution.\\n   */\\n  function _setForbiddenWords(uint256[] memory packedWords, bool shouldForbid) internal {\\n    uint256 length = packedWords.length;\\n    uint256 strlen;\\n    uint256 max;\\n    uint256 min = type(uint256).max;\\n\\n    for (uint256 i; i < length;) {\\n      require(packedWords[i] != 0, \\\"NameChecker: invalid packed word\\\");\\n      strlen = packedWords[i] >> 0xf8;\\n      min = Math.min(min, strlen);\\n      max = Math.max(max, strlen);\\n      _forbiddenWordMap.setTo(packedWords[i], shouldForbid);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    if (shouldForbid) {\\n      LibSubString.WordRange memory wordRange = _wordRange;\\n      min = Math.min(min, wordRange.min);\\n      max = Math.max(max, wordRange.max);\\n      if (!(min == wordRange.min && max == wordRange.max)) _setWordRange(uint8(min), uint8(max));\\n    }\\n\\n    emit ForbiddenWordsUpdated(_msgSender(), length, shouldForbid);\\n  }\\n\\n  /**\\n   * @dev Set the allowed word length range.\\n   * @param min The minimum word length allowed.\\n   * @param max The maximum word length allowed.\\n   * @notice The minimum word length must be greater than 0, and it must not exceed the maximum word length.\\n   */\\n  function _setWordRange(uint8 min, uint8 max) internal {\\n    require(min != 0 && min <= max, \\\"NameChecker: min word length > max word length\\\");\\n    _wordRange = LibSubString.WordRange(min, max);\\n    emit WordRangeUpdated(_msgSender(), min, max);\\n  }\\n\\n  /// @dev Returns whether a char is in [a-z]\\n  function _isAlphabet(bytes1 char) internal pure returns (bool) {\\n    // [0x61, 0x7a] => [a-z]\\n    return char >= 0x61 && char <= 0x7a;\\n  }\\n\\n  /// @dev Returns whether a char is number [0-9]\\n  function _isNumber(bytes1 char) internal pure returns (bool) {\\n    // [0x30, 0x39] => [0-9]\\n    return char >= 0x30 && char <= 0x39;\\n  }\\n}\\n\",\"keccak256\":\"0x6cba577951e05b6ad37988b4a2aa304cb8963734f44cf87216ea1805e8d2415f\",\"license\":\"MIT\"},\"src/interfaces/INameChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title INameChecker\\n * @dev The INameChecker interface provides functions for managing and checking substrings and forbidden words in strings.\\n */\\ninterface INameChecker {\\n  /**\\n   * @dev Emitted when the word range is updated.\\n   * @param operator The address that updated the word range.\\n   * @param min The minimum word length allowed.\\n   * @param max The maximum word length allowed.\\n   */\\n  event WordRangeUpdated(address indexed operator, uint8 min, uint8 max);\\n\\n  /**\\n   * @dev Emitted when the forbidden words are updated.\\n   * @param operator The address that updated the forbidden words list.\\n   * @param wordCount The number of words in the list.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  event ForbiddenWordsUpdated(address indexed operator, uint256 wordCount, bool shouldForbid);\\n\\n  /**\\n   * @dev Returns an array of all substrings of a given string.\\n   * @param str The input string to analyze.\\n   * @return subStrings An array of all substrings.\\n   */\\n  function getAllSubStrings(string calldata str) external view returns (string[] memory subStrings);\\n\\n  /**\\n   * @dev Returns the total number of substrings for a given string length, as well as the minimum and maximum allowed word lengths.\\n   * @param strlen The length of the input string.\\n   * @return total The total number of substrings.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function totalSubString(uint256 strlen) external view returns (uint256 total, uint256 min, uint256 max);\\n\\n  /**\\n   * @dev Sets a list of forbidden words and specifies whether they should be forbidden.\\n   * @param packedWords An array of packed word representations.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  function setForbiddenWords(uint256[] calldata packedWords, bool shouldForbid) external;\\n\\n  /**\\n   * @dev Sets a list of forbidden words and specifies whether they should be forbidden.\\n   * @param words An array of raw words in string representations.\\n   * @param shouldForbid Boolean indicating whether the specified words should be forbidden.\\n   */\\n  function setForbiddenWords(string[] calldata words, bool shouldForbid) external;\\n\\n  /**\\n   * @dev Sets the minimum and maximum word lengths allowed.\\n   * @param min The minimum word length.\\n   * @param max The maximum word length.\\n   */\\n  function setWordRange(uint8 min, uint8 max) external;\\n\\n  /**\\n   * @dev Retrieves the current minimum and maximum word lengths allowed.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function getWordRange() external view returns (uint8 min, uint8 max);\\n\\n  /**\\n   * @notice Checks if a given name contains any forbidden characters or blacklisted words.\\n   * @param name The string to check.\\n   * @return true if the name contains forbidden characters or blacklisted words, false otherwise.\\n   */\\n  function forbidden(string calldata name) external view returns (bool);\\n\\n  /**\\n   * @notice Checks if a given name contains any blacklisted words.\\n   * @param name The string to check.\\n   * @return true if the name contains blacklisted words, false otherwise.\\n   */\\n  function containsBlacklistedWord(string calldata name) external view returns (bool);\\n\\n  /**\\n   * @notice Checks if a given name contains any invalid characters.\\n   * requirements:\\n   * - all characters in name must in range [a-z] or [0-9].\\n   * @param name The string to check.\\n   * @return true if the name contains invalid characters, false otherwise.\\n   */\\n  function containsInvalidCharacter(string calldata name) external pure returns (bool);\\n\\n  /**\\n   * @dev Packs a string into a single word representation.\\n   * @param str The string to be packed.\\n   * @notice Returns `uint256(0)` if the length is zero or greater than 31.\\n   * @return packed The packed value of the input string.\\n   */\\n  function pack(string memory str) external pure returns (uint256 packed);\\n\\n  /**\\n   * @dev Packs an array of strings into their single word representations.\\n   * @param strs The array of strings to be packed.\\n   * @notice Returns an array of packed values, along with the minimum and maximum string lengths.\\n   * @return packeds An array containing the packed values of the input strings.\\n   */\\n  function packBulk(string[] memory strs) external pure returns (uint256[] memory packeds);\\n}\\n\",\"keccak256\":\"0x9f2b9f08f8d60f565f93925ad64353f01feaad671440d865f45008d1304d4794\",\"license\":\"MIT\"},\"src/libraries/LibSubString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibSubString\\n * @dev A library for working with substrings and word ranges in strings.\\n */\\nlibrary LibSubString {\\n  error TotalSubStringTooLarge(uint256 total);\\n  /**\\n   * @dev Struct representing a word range with minimum and maximum word lengths.\\n   */\\n\\n  struct WordRange {\\n    uint8 min;\\n    uint8 max;\\n  }\\n\\n  uint256 public constant MAX_SUBSTRING_SIZE = type(uint16).max;\\n\\n  /**\\n   * @dev Retrieves all possible substrings within a given string based on a specified word range.\\n   * @param str The input string to analyze.\\n   * @param wordRange The word range specifying the minimum and maximum word lengths.\\n   * @return subStrings An array of all possible substrings within the input string.\\n   */\\n  function getAllSubStrings(string calldata str, WordRange memory wordRange)\\n    internal\\n    pure\\n    returns (string[] memory subStrings)\\n  {\\n    unchecked {\\n      uint256 length = bytes(str).length;\\n      (uint256 total, uint256 min, uint256 max) = totalSubString(length, wordRange);\\n      subStrings = new string[](total);\\n      uint256 idx;\\n      uint256 bLength;\\n\\n      for (uint256 i; i < length; ++i) {\\n        bLength = Math.min(i + max, length);\\n\\n        for (uint256 j = i + min; j <= bLength; ++j) {\\n          subStrings[idx++] = str[i:j];\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the total number of possible substrings within a given string length based on a specified word range.\\n   * @param len The length of the input string.\\n   * @param wordRange The word range specifying the minimum and maximum word lengths.\\n   * @return total The total number of possible substrings.\\n   * @return min The minimum word length allowed.\\n   * @return max The maximum word length allowed.\\n   */\\n  function totalSubString(uint256 len, WordRange memory wordRange)\\n    internal\\n    pure\\n    returns (uint256 total, uint256 min, uint256 max)\\n  {\\n    unchecked {\\n      min = Math.min(wordRange.min, len);\\n      max = Math.min(wordRange.max, len);\\n      uint256 range = max - min;\\n      // `(range + 1)` represents the number of possible substring lengths in `range`.\\n      // `(strlen - min + 1)` represents the number of possible starting positions for substrings with a minimum length of `min`.\\n      total = (range + 1) * (len - min + 1) - (((range + 1) * range) >> 1);\\n      if (total > MAX_SUBSTRING_SIZE) revert TotalSubStringTooLarge(total);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd0f0b1fad608356df7e9fcb8a133d1f639049fc5ff45ebdf8de59183fe50abb6\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 1800,
  "numDeployments": 2,
  "storageLayout": {
    "storage": [
      {
        "astId": 49718,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 49721,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 48191,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)48186_storage)"
      },
      {
        "astId": 48501,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)54070_storage)"
      },
      {
        "astId": 59521,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "____gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 59524,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_wordRange",
        "offset": 0,
        "slot": "53",
        "type": "t_struct(WordRange)67990_storage"
      },
      {
        "astId": 59527,
        "contract": "src/NameChecker.sol:NameChecker",
        "label": "_forbiddenWordMap",
        "offset": 0,
        "slot": "54",
        "type": "t_struct(BitMap)53614_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)54070_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)54070_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)48186_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)48186_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)54070_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 54069,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)53755_storage"
          }
        ]
      },
      "t_struct(BitMap)53614_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "numberOfBytes": "32",
        "members": [
          {
            "astId": 53613,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ]
      },
      "t_struct(RoleData)48186_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 48183,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 48185,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)53755_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 53750,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 53754,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_struct(WordRange)67990_storage": {
        "encoding": "inplace",
        "label": "struct LibSubString.WordRange",
        "numberOfBytes": "32",
        "members": [
          {
            "astId": 67987,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 67989,
            "contract": "src/NameChecker.sol:NameChecker",
            "label": "max",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1699948299,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "containsBlacklistedWord(string)": {
        "notice": "Checks if a given name contains any blacklisted words."
      },
      "containsInvalidCharacter(string)": {
        "notice": "Checks if a given name contains any invalid characters. requirements: - all characters in name must in range [a-z] or [0-9]."
      },
      "forbidden(string)": {
        "notice": "Checks if a given name contains any forbidden characters or blacklisted words."
      },
      "pack(string)": {
        "notice": "Returns `uint256(0)` if the length is zero or greater than 31."
      },
      "packBulk(string[])": {
        "notice": "Returns an array of packed values, along with the minimum and maximum string lengths."
      }
    }
  }
}